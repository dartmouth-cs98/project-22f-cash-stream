{"version":3,"sources":["components/CreateFlow.js","components/ConnectWallet.js","App.js","index.js"],"names":["recipient","flowRate","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","console","log","_address","request","method","chainId","Framework","create","Number","sf","loadSuperToken","DAIxContract","DAIx","address","createFlowOperation","cfaV1","createFlow","receiver","superToken","exec","result","error","CreateFlow","useState","setRecipient","isButtonLoading","setIsButtonLoading","setFlowRate","flowRateDisplay","setFlowRateDisplay","CreateButton","isLoading","children","props","Button","variant","className","Spinner","animation","Form","FormGroup","FormControl","name","value","onChange","e","target","placeholder","newFlowRateDisplay","amount","isNaN","amountInWei","BigNumber","from","utils","formatEther","toString","alert","calculateFlowRate","onClick","createNewFlow","setTimeout","ConnectWallet","currentAccount","setCurrentAccount","connectWallet","accounts","checkIfWalletIsConnected","chain","length","account","useEffect","id","Card","substring","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.56fc3c4b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Framework } from \"@superfluid-finance/sdk-core\";\nimport {\n  Button,\n  Form,\n  FormGroup,\n  FormControl,\n  Spinner,\n} from \"react-bootstrap\";\nimport \"../css/createFlow.css\";\nimport { ethers } from \"ethers\";\n\n//where the Superfluid logic takes place\nasync function createNewFlow(recipient, flowRate) {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n  const signer = provider.getSigner();\n\n  console.log(signer._address);\n  \n  const chainId = await window.ethereum.request({ method: \"eth_chainId\" });\n  const sf = await Framework.create({\n    chainId: Number(chainId),\n    provider: provider\n  });\n\n  const DAIxContract = await sf.loadSuperToken(\"fDAIx\");\n  const DAIx = DAIxContract.address;\n\n  try {\n    const createFlowOperation = sf.cfaV1.createFlow({\n      receiver: recipient,\n      flowRate: flowRate,\n      superToken: DAIx\n      // userData?: string\n    });\n\n    console.log(\"Creating your stream...\");\n\n    const result = await createFlowOperation.exec(signer);\n    console.log(result);\n\n    console.log(\n      `Congrats - you've just created a money stream!\n    View Your Stream At: https://app.superfluid.finance/dashboard/${recipient}\n    Network: Kovan\n    Super Token: DAIx\n    Sender: ${signer._address},\n    Receiver: ${recipient},\n    FlowRate: ${flowRate}\n    `\n    );\n  } catch (error) {\n    console.log(\n      \"Hmmm, your transaction threw an error. Make sure that this stream does not already exist, and that you've entered a valid Ethereum address!\"\n    );\n    console.error(error);\n  }\n}\n\nexport const CreateFlow = () => {\n  const [recipient, setRecipient] = useState(\"\");\n  const [isButtonLoading, setIsButtonLoading] = useState(false);\n  const [flowRate, setFlowRate] = useState(\"\");\n  const [flowRateDisplay, setFlowRateDisplay] = useState(\"\");\n\n  function calculateFlowRate(amount) {\n    if (typeof Number(amount) !== \"number\" || isNaN(Number(amount)) === true) {\n      alert(\"You can only calculate a flowRate based on a number\");\n      return;\n    } else if (typeof Number(amount) === \"number\") {\n      if (Number(amount) === 0) {\n        return 0;\n      }\n      const amountInWei = ethers.BigNumber.from(amount);\n      const monthlyAmount = ethers.utils.formatEther(amountInWei.toString());\n      const calculatedFlowRate = monthlyAmount * 3600 * 24 * 30;\n      return calculatedFlowRate;\n    }\n  }\n\n  function CreateButton({ isLoading, children, ...props }) {\n    return (\n      <Button variant=\"success\" className=\"button\" {...props}>\n        {isButtonLoading ? <Spinner animation=\"border\" /> : children}\n      </Button>\n    );\n  }\n\n  const handleRecipientChange = (e) => {\n    setRecipient(() => ([e.target.name] = e.target.value));\n  };\n\n  const handleFlowRateChange = (e) => {\n    setFlowRate(() => ([e.target.name] = e.target.value));\n    let newFlowRateDisplay = calculateFlowRate(e.target.value);\n    setFlowRateDisplay(newFlowRateDisplay.toString());\n  };\n\n  return (\n    <div>\n      <h3>Create New Stream</h3>\n      <Form>\n        <FormGroup className=\"mb-3\">\n          <FormControl\n            name=\"recipient\"\n            value={recipient}\n            onChange={handleRecipientChange}\n            placeholder=\"Enter recipient address\"\n          ></FormControl>\n        </FormGroup>\n        <FormGroup className=\"mb-3\">\n          <FormControl\n            name=\"flowRate\"\n            value={flowRate}\n            onChange={handleFlowRateChange}\n            placeholder=\"Enter a flowRate in wei/second\"\n          ></FormControl>\n        </FormGroup>\n        <CreateButton\n          onClick={() => {\n            setIsButtonLoading(true);\n            createNewFlow(recipient, flowRate);\n            setTimeout(() => {\n              setIsButtonLoading(false);\n            }, 1000);\n          }}\n        >\n          Click to Create Your Stream\n        </CreateButton>\n      </Form>\n\n      <div className=\"calculation\">\n        <p>Your flow will be equal to:</p>\n        <p>\n          <b>${flowRateDisplay !== \" \" ? flowRateDisplay : 0}</b> DAIx/month\n        </p>\n      </div>\n      \n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport \"../css/createFlow.css\";\n\nexport const ConnectWallet = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      // let account = currentAccount;\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      // setupEventListener()\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n    const chain = await window.ethereum.request({ method: \"eth_chainId\" });\n    let chainId = chain;\n    console.log(\"chain ID:\", chain);\n    console.log(\"global Chain Id:\", chainId);\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      // setupEventListener()\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  return(\n  <div>\n      {currentAccount === \"\" ? (\n        <button id=\"connectWallet\" className=\"button\" onClick={connectWallet}>\n          Connect Wallet\n        </button>\n      ) : (\n        <Card className=\"connectedWallet\">\n          {`${currentAccount.substring(0, 4)}...${currentAccount.substring(38)}`}\n        </Card>\n      )}\n  </div>\n  );\n};","import \"./css/styles.css\";\n\nimport { CreateFlow } from \"./components/CreateFlow\";\nimport { ConnectWallet } from \"./components/ConnectWallet\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <ConnectWallet />\n      <CreateFlow />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}