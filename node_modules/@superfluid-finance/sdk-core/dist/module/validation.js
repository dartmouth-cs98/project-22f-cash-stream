import Ajv from "ajv";
import { ethers } from "ethers";
import { SFError } from "./SFError";
const ajv = new Ajv();
ajv.addFormat("addressOrEmpty", {
    type: "string",
    validate: (x) => x === "" || ethers.utils.isAddress(x),
});
ajv.addFormat("stringNumber", {
    type: "string",
    validate: (x) => !isNaN(Number(x)),
});
// Schemas
const superTokenRequestSchema = {
    type: "object",
    additionalProperties: false,
    properties: {
        isListed: { type: "boolean", nullable: true },
    },
};
const eventRequestSchema = {
    type: "object",
    additionalProperties: false,
    properties: {
        account: { type: "string", format: "addressOrEmpty", nullable: true },
        timestamp_gt: {
            type: "number",
            nullable: true,
        },
    },
};
const indexRequestSchema = {
    type: "object",
    additionalProperties: false,
    properties: {
        indexId: { type: "string", format: "stringNumber", nullable: true },
        publisher: { type: "string", format: "addressOrEmpty", nullable: true },
        token: { type: "string", format: "addressOrEmpty", nullable: true },
    },
};
const accountTokenSnapshotRequestSchema = {
    type: "object",
    additionalProperties: false,
    properties: {
        account: {
            type: "string",
            format: "addressOrEmpty",
            nullable: true,
        },
        token: { type: "string", format: "addressOrEmpty", nullable: true },
    },
};
const indexSubscriptionRequestSchema = {
    type: "object",
    additionalProperties: false,
    properties: {
        subscriber: {
            type: "string",
            format: "stringNumber",
            nullable: true,
        },
        approved: { type: "boolean", nullable: true },
    },
};
const streamRequestSchema = {
    type: "object",
    additionalProperties: false,
    properties: {
        sender: { type: "string", format: "addressOrEmpty", nullable: true },
        receiver: { type: "string", format: "addressOrEmpty", nullable: true },
        token: { type: "string", format: "addressOrEmpty", nullable: true },
    },
};
function wrapValidationWithCustomError(validateFunction) {
    return (filter) => {
        if (!validateFunction(filter)) {
            throw new SFError({
                type: "INVALID_OBJECT",
                customMessage: "Invalid Filter Object",
                errorObject: validateFunction.errors,
            });
        }
    };
}
// Validate functions
export const validateSuperTokenRequest = wrapValidationWithCustomError(ajv.compile(superTokenRequestSchema));
export const validateEventRequest = wrapValidationWithCustomError(ajv.compile(eventRequestSchema));
export const validateIndexRequest = wrapValidationWithCustomError(ajv.compile(indexRequestSchema));
export const validateIndexSubscriptionRequest = wrapValidationWithCustomError(ajv.compile(indexSubscriptionRequestSchema));
export const validateStreamRequest = wrapValidationWithCustomError(ajv.compile(streamRequestSchema));
export const validateAccountTokenSnapshotRequest = wrapValidationWithCustomError(ajv.compile(accountTokenSnapshotRequestSchema));
//# sourceMappingURL=validation.js.map