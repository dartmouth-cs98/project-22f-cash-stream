import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface SuperfluidGovernanceIIInterface extends utils.Interface {
    functions: {
        "authorizeAppFactory(address,address)": FunctionFragment;
        "batchUpdateSuperTokenLogic(address,address[])": FunctionFragment;
        "batchUpdateSuperTokenMinimumDeposit(address,address[],uint256[])": FunctionFragment;
        "clearConfig(address,address,bytes32)": FunctionFragment;
        "clearPPPConfig(address,address)": FunctionFragment;
        "clearRewardAddress(address,address)": FunctionFragment;
        "clearSuperTokenMinimumDeposit(address,address)": FunctionFragment;
        "clearTrustedForwarder(address,address,address)": FunctionFragment;
        "disableTrustedForwarder(address,address,address)": FunctionFragment;
        "enableTrustedForwarder(address,address,address)": FunctionFragment;
        "getCodeAddress()": FunctionFragment;
        "getConfigAsAddress(address,address,bytes32)": FunctionFragment;
        "getConfigAsUint256(address,address,bytes32)": FunctionFragment;
        "getPPPConfig(address,address)": FunctionFragment;
        "getRewardAddress(address,address)": FunctionFragment;
        "getSuperTokenMinimumDeposit(address,address)": FunctionFragment;
        "isAuthorizedAppFactory(address,address)": FunctionFragment;
        "isTrustedForwarder(address,address,address)": FunctionFragment;
        "owner()": FunctionFragment;
        "registerAgreementClass(address,address)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "replaceGovernance(address,address)": FunctionFragment;
        "setConfig(address,address,bytes32,address)": FunctionFragment;
        "setPPPConfig(address,address,uint256,uint256)": FunctionFragment;
        "setRewardAddress(address,address,address)": FunctionFragment;
        "setSuperTokenMinimumDeposit(address,address,uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "unauthorizeAppFactory(address,address)": FunctionFragment;
        "updateContracts(address,address,address[],address)": FunctionFragment;
        "proxiableUUID()": FunctionFragment;
        "updateCode(address)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "authorizeAppFactory", values: [string, string]): string;
    encodeFunctionData(functionFragment: "batchUpdateSuperTokenLogic", values: [string, string[]]): string;
    encodeFunctionData(functionFragment: "batchUpdateSuperTokenMinimumDeposit", values: [string, string[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "clearConfig", values: [string, string, BytesLike]): string;
    encodeFunctionData(functionFragment: "clearPPPConfig", values: [string, string]): string;
    encodeFunctionData(functionFragment: "clearRewardAddress", values: [string, string]): string;
    encodeFunctionData(functionFragment: "clearSuperTokenMinimumDeposit", values: [string, string]): string;
    encodeFunctionData(functionFragment: "clearTrustedForwarder", values: [string, string, string]): string;
    encodeFunctionData(functionFragment: "disableTrustedForwarder", values: [string, string, string]): string;
    encodeFunctionData(functionFragment: "enableTrustedForwarder", values: [string, string, string]): string;
    encodeFunctionData(functionFragment: "getCodeAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "getConfigAsAddress", values: [string, string, BytesLike]): string;
    encodeFunctionData(functionFragment: "getConfigAsUint256", values: [string, string, BytesLike]): string;
    encodeFunctionData(functionFragment: "getPPPConfig", values: [string, string]): string;
    encodeFunctionData(functionFragment: "getRewardAddress", values: [string, string]): string;
    encodeFunctionData(functionFragment: "getSuperTokenMinimumDeposit", values: [string, string]): string;
    encodeFunctionData(functionFragment: "isAuthorizedAppFactory", values: [string, string]): string;
    encodeFunctionData(functionFragment: "isTrustedForwarder", values: [string, string, string]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "registerAgreementClass", values: [string, string]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "replaceGovernance", values: [string, string]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [string, string, BytesLike, string]): string;
    encodeFunctionData(functionFragment: "setPPPConfig", values: [string, string, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setRewardAddress", values: [string, string, string]): string;
    encodeFunctionData(functionFragment: "setSuperTokenMinimumDeposit", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "unauthorizeAppFactory", values: [string, string]): string;
    encodeFunctionData(functionFragment: "updateContracts", values: [string, string, string[], string]): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "updateCode", values: [string]): string;
    decodeFunctionResult(functionFragment: "authorizeAppFactory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "batchUpdateSuperTokenLogic", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "batchUpdateSuperTokenMinimumDeposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clearConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clearPPPConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clearRewardAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clearSuperTokenMinimumDeposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clearTrustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "disableTrustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enableTrustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCodeAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfigAsAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfigAsUint256", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPPPConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRewardAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSuperTokenMinimumDeposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAuthorizedAppFactory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isTrustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerAgreementClass", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "replaceGovernance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPPPConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRewardAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSuperTokenMinimumDeposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unauthorizeAppFactory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateContracts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateCode", data: BytesLike): Result;
    events: {
        "CFAv1LiquidationPeriodChanged(address,address,bool,uint256)": EventFragment;
        "CodeUpdated(bytes32,address)": EventFragment;
        "ConfigChanged(address,address,bytes32,bool,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PPPConfigurationChanged(address,address,bool,uint256,uint256)": EventFragment;
        "RewardAddressChanged(address,address,bool,address)": EventFragment;
        "SuperTokenMinimumDepositChanged(address,address,bool,uint256)": EventFragment;
        "TrustedForwarderChanged(address,address,bool,address,bool)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "CFAv1LiquidationPeriodChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "CodeUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ConfigChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PPPConfigurationChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardAddressChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SuperTokenMinimumDepositChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TrustedForwarderChanged"): EventFragment;
}
export declare type CFAv1LiquidationPeriodChangedEvent = TypedEvent<[
    string,
    string,
    boolean,
    BigNumber
], {
    host: string;
    superToken: string;
    isKeySet: boolean;
    liquidationPeriod: BigNumber;
}>;
export declare type CFAv1LiquidationPeriodChangedEventFilter = TypedEventFilter<CFAv1LiquidationPeriodChangedEvent>;
export declare type CodeUpdatedEvent = TypedEvent<[
    string,
    string
], {
    uuid: string;
    codeAddress: string;
}>;
export declare type CodeUpdatedEventFilter = TypedEventFilter<CodeUpdatedEvent>;
export declare type ConfigChangedEvent = TypedEvent<[
    string,
    string,
    string,
    boolean,
    BigNumber
], {
    host: string;
    superToken: string;
    key: string;
    isKeySet: boolean;
    value: BigNumber;
}>;
export declare type ConfigChangedEventFilter = TypedEventFilter<ConfigChangedEvent>;
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], {
    previousOwner: string;
    newOwner: string;
}>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export declare type PPPConfigurationChangedEvent = TypedEvent<[
    string,
    string,
    boolean,
    BigNumber,
    BigNumber
], {
    host: string;
    superToken: string;
    isKeySet: boolean;
    liquidationPeriod: BigNumber;
    patricianPeriod: BigNumber;
}>;
export declare type PPPConfigurationChangedEventFilter = TypedEventFilter<PPPConfigurationChangedEvent>;
export declare type RewardAddressChangedEvent = TypedEvent<[
    string,
    string,
    boolean,
    string
], {
    host: string;
    superToken: string;
    isKeySet: boolean;
    rewardAddress: string;
}>;
export declare type RewardAddressChangedEventFilter = TypedEventFilter<RewardAddressChangedEvent>;
export declare type SuperTokenMinimumDepositChangedEvent = TypedEvent<[
    string,
    string,
    boolean,
    BigNumber
], {
    host: string;
    superToken: string;
    isKeySet: boolean;
    minimumDeposit: BigNumber;
}>;
export declare type SuperTokenMinimumDepositChangedEventFilter = TypedEventFilter<SuperTokenMinimumDepositChangedEvent>;
export declare type TrustedForwarderChangedEvent = TypedEvent<[
    string,
    string,
    boolean,
    string,
    boolean
], {
    host: string;
    superToken: string;
    isKeySet: boolean;
    forwarder: string;
    enabled: boolean;
}>;
export declare type TrustedForwarderChangedEventFilter = TypedEventFilter<TrustedForwarderChangedEvent>;
export interface SuperfluidGovernanceII extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SuperfluidGovernanceIIInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        authorizeAppFactory(host: string, factory: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        batchUpdateSuperTokenLogic(host: string, tokens: string[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        batchUpdateSuperTokenMinimumDeposit(host: string, tokens: string[], minimumDeposits: BigNumberish[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        clearConfig(host: string, superToken: string, key: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        clearPPPConfig(host: string, superToken: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        clearRewardAddress(host: string, superToken: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        clearSuperTokenMinimumDeposit(host: string, superToken: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        clearTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        disableTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        enableTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getCodeAddress(overrides?: CallOverrides): Promise<[string] & {
            codeAddress: string;
        }>;
        getConfigAsAddress(host: string, superToken: string, key: BytesLike, overrides?: CallOverrides): Promise<[string] & {
            value: string;
        }>;
        getConfigAsUint256(host: string, superToken: string, key: BytesLike, overrides?: CallOverrides): Promise<[BigNumber] & {
            period: BigNumber;
        }>;
        getPPPConfig(host: string, superToken: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            liquidationPeriod: BigNumber;
            patricianPeriod: BigNumber;
        }>;
        getRewardAddress(host: string, superToken: string, overrides?: CallOverrides): Promise<[string]>;
        getSuperTokenMinimumDeposit(host: string, superToken: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            value: BigNumber;
        }>;
        isAuthorizedAppFactory(host: string, factory: string, overrides?: CallOverrides): Promise<[boolean]>;
        isTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: CallOverrides): Promise<[boolean]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        registerAgreementClass(host: string, agreementClass: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        replaceGovernance(host: string, newGov: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        "setConfig(address,address,bytes32,address)"(host: string, superToken: string, key: BytesLike, value: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        "setConfig(address,address,bytes32,uint256)"(host: string, superToken: string, key: BytesLike, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setPPPConfig(host: string, superToken: string, liquidationPeriod: BigNumberish, patricianPeriod: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setRewardAddress(host: string, superToken: string, rewardAddress: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setSuperTokenMinimumDeposit(host: string, superToken: string, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        unauthorizeAppFactory(host: string, factory: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        updateContracts(host: string, hostNewLogic: string, agreementClassNewLogics: string[], superTokenFactoryNewLogic: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        proxiableUUID(overrides?: CallOverrides): Promise<[string]>;
        updateCode(newAddress: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    authorizeAppFactory(host: string, factory: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    batchUpdateSuperTokenLogic(host: string, tokens: string[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    batchUpdateSuperTokenMinimumDeposit(host: string, tokens: string[], minimumDeposits: BigNumberish[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    clearConfig(host: string, superToken: string, key: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    clearPPPConfig(host: string, superToken: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    clearRewardAddress(host: string, superToken: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    clearSuperTokenMinimumDeposit(host: string, superToken: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    clearTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    disableTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    enableTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getCodeAddress(overrides?: CallOverrides): Promise<string>;
    getConfigAsAddress(host: string, superToken: string, key: BytesLike, overrides?: CallOverrides): Promise<string>;
    getConfigAsUint256(host: string, superToken: string, key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    getPPPConfig(host: string, superToken: string, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        liquidationPeriod: BigNumber;
        patricianPeriod: BigNumber;
    }>;
    getRewardAddress(host: string, superToken: string, overrides?: CallOverrides): Promise<string>;
    getSuperTokenMinimumDeposit(host: string, superToken: string, overrides?: CallOverrides): Promise<BigNumber>;
    isAuthorizedAppFactory(host: string, factory: string, overrides?: CallOverrides): Promise<boolean>;
    isTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: CallOverrides): Promise<boolean>;
    owner(overrides?: CallOverrides): Promise<string>;
    registerAgreementClass(host: string, agreementClass: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    renounceOwnership(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    replaceGovernance(host: string, newGov: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    "setConfig(address,address,bytes32,address)"(host: string, superToken: string, key: BytesLike, value: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    "setConfig(address,address,bytes32,uint256)"(host: string, superToken: string, key: BytesLike, value: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setPPPConfig(host: string, superToken: string, liquidationPeriod: BigNumberish, patricianPeriod: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setRewardAddress(host: string, superToken: string, rewardAddress: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setSuperTokenMinimumDeposit(host: string, superToken: string, value: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    unauthorizeAppFactory(host: string, factory: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    updateContracts(host: string, hostNewLogic: string, agreementClassNewLogics: string[], superTokenFactoryNewLogic: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    proxiableUUID(overrides?: CallOverrides): Promise<string>;
    updateCode(newAddress: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        authorizeAppFactory(host: string, factory: string, overrides?: CallOverrides): Promise<void>;
        batchUpdateSuperTokenLogic(host: string, tokens: string[], overrides?: CallOverrides): Promise<void>;
        batchUpdateSuperTokenMinimumDeposit(host: string, tokens: string[], minimumDeposits: BigNumberish[], overrides?: CallOverrides): Promise<void>;
        clearConfig(host: string, superToken: string, key: BytesLike, overrides?: CallOverrides): Promise<void>;
        clearPPPConfig(host: string, superToken: string, overrides?: CallOverrides): Promise<void>;
        clearRewardAddress(host: string, superToken: string, overrides?: CallOverrides): Promise<void>;
        clearSuperTokenMinimumDeposit(host: string, superToken: string, overrides?: CallOverrides): Promise<void>;
        clearTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: CallOverrides): Promise<void>;
        disableTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: CallOverrides): Promise<void>;
        enableTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: CallOverrides): Promise<void>;
        getCodeAddress(overrides?: CallOverrides): Promise<string>;
        getConfigAsAddress(host: string, superToken: string, key: BytesLike, overrides?: CallOverrides): Promise<string>;
        getConfigAsUint256(host: string, superToken: string, key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getPPPConfig(host: string, superToken: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            liquidationPeriod: BigNumber;
            patricianPeriod: BigNumber;
        }>;
        getRewardAddress(host: string, superToken: string, overrides?: CallOverrides): Promise<string>;
        getSuperTokenMinimumDeposit(host: string, superToken: string, overrides?: CallOverrides): Promise<BigNumber>;
        isAuthorizedAppFactory(host: string, factory: string, overrides?: CallOverrides): Promise<boolean>;
        isTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: CallOverrides): Promise<boolean>;
        owner(overrides?: CallOverrides): Promise<string>;
        registerAgreementClass(host: string, agreementClass: string, overrides?: CallOverrides): Promise<void>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        replaceGovernance(host: string, newGov: string, overrides?: CallOverrides): Promise<void>;
        "setConfig(address,address,bytes32,address)"(host: string, superToken: string, key: BytesLike, value: string, overrides?: CallOverrides): Promise<void>;
        "setConfig(address,address,bytes32,uint256)"(host: string, superToken: string, key: BytesLike, value: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setPPPConfig(host: string, superToken: string, liquidationPeriod: BigNumberish, patricianPeriod: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setRewardAddress(host: string, superToken: string, rewardAddress: string, overrides?: CallOverrides): Promise<void>;
        setSuperTokenMinimumDeposit(host: string, superToken: string, value: BigNumberish, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
        unauthorizeAppFactory(host: string, factory: string, overrides?: CallOverrides): Promise<void>;
        updateContracts(host: string, hostNewLogic: string, agreementClassNewLogics: string[], superTokenFactoryNewLogic: string, overrides?: CallOverrides): Promise<void>;
        proxiableUUID(overrides?: CallOverrides): Promise<string>;
        updateCode(newAddress: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "CFAv1LiquidationPeriodChanged(address,address,bool,uint256)"(host?: string | null, superToken?: string | null, isKeySet?: null, liquidationPeriod?: null): CFAv1LiquidationPeriodChangedEventFilter;
        CFAv1LiquidationPeriodChanged(host?: string | null, superToken?: string | null, isKeySet?: null, liquidationPeriod?: null): CFAv1LiquidationPeriodChangedEventFilter;
        "CodeUpdated(bytes32,address)"(uuid?: null, codeAddress?: null): CodeUpdatedEventFilter;
        CodeUpdated(uuid?: null, codeAddress?: null): CodeUpdatedEventFilter;
        "ConfigChanged(address,address,bytes32,bool,uint256)"(host?: string | null, superToken?: string | null, key?: null, isKeySet?: null, value?: null): ConfigChangedEventFilter;
        ConfigChanged(host?: string | null, superToken?: string | null, key?: null, isKeySet?: null, value?: null): ConfigChangedEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        "PPPConfigurationChanged(address,address,bool,uint256,uint256)"(host?: string | null, superToken?: string | null, isKeySet?: null, liquidationPeriod?: null, patricianPeriod?: null): PPPConfigurationChangedEventFilter;
        PPPConfigurationChanged(host?: string | null, superToken?: string | null, isKeySet?: null, liquidationPeriod?: null, patricianPeriod?: null): PPPConfigurationChangedEventFilter;
        "RewardAddressChanged(address,address,bool,address)"(host?: string | null, superToken?: string | null, isKeySet?: null, rewardAddress?: null): RewardAddressChangedEventFilter;
        RewardAddressChanged(host?: string | null, superToken?: string | null, isKeySet?: null, rewardAddress?: null): RewardAddressChangedEventFilter;
        "SuperTokenMinimumDepositChanged(address,address,bool,uint256)"(host?: string | null, superToken?: string | null, isKeySet?: null, minimumDeposit?: null): SuperTokenMinimumDepositChangedEventFilter;
        SuperTokenMinimumDepositChanged(host?: string | null, superToken?: string | null, isKeySet?: null, minimumDeposit?: null): SuperTokenMinimumDepositChangedEventFilter;
        "TrustedForwarderChanged(address,address,bool,address,bool)"(host?: string | null, superToken?: string | null, isKeySet?: null, forwarder?: null, enabled?: null): TrustedForwarderChangedEventFilter;
        TrustedForwarderChanged(host?: string | null, superToken?: string | null, isKeySet?: null, forwarder?: null, enabled?: null): TrustedForwarderChangedEventFilter;
    };
    estimateGas: {
        authorizeAppFactory(host: string, factory: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        batchUpdateSuperTokenLogic(host: string, tokens: string[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        batchUpdateSuperTokenMinimumDeposit(host: string, tokens: string[], minimumDeposits: BigNumberish[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        clearConfig(host: string, superToken: string, key: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        clearPPPConfig(host: string, superToken: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        clearRewardAddress(host: string, superToken: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        clearSuperTokenMinimumDeposit(host: string, superToken: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        clearTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        disableTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        enableTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getCodeAddress(overrides?: CallOverrides): Promise<BigNumber>;
        getConfigAsAddress(host: string, superToken: string, key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getConfigAsUint256(host: string, superToken: string, key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getPPPConfig(host: string, superToken: string, overrides?: CallOverrides): Promise<BigNumber>;
        getRewardAddress(host: string, superToken: string, overrides?: CallOverrides): Promise<BigNumber>;
        getSuperTokenMinimumDeposit(host: string, superToken: string, overrides?: CallOverrides): Promise<BigNumber>;
        isAuthorizedAppFactory(host: string, factory: string, overrides?: CallOverrides): Promise<BigNumber>;
        isTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        registerAgreementClass(host: string, agreementClass: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        replaceGovernance(host: string, newGov: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        "setConfig(address,address,bytes32,address)"(host: string, superToken: string, key: BytesLike, value: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        "setConfig(address,address,bytes32,uint256)"(host: string, superToken: string, key: BytesLike, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setPPPConfig(host: string, superToken: string, liquidationPeriod: BigNumberish, patricianPeriod: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setRewardAddress(host: string, superToken: string, rewardAddress: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setSuperTokenMinimumDeposit(host: string, superToken: string, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        unauthorizeAppFactory(host: string, factory: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        updateContracts(host: string, hostNewLogic: string, agreementClassNewLogics: string[], superTokenFactoryNewLogic: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;
        updateCode(newAddress: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        authorizeAppFactory(host: string, factory: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        batchUpdateSuperTokenLogic(host: string, tokens: string[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        batchUpdateSuperTokenMinimumDeposit(host: string, tokens: string[], minimumDeposits: BigNumberish[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        clearConfig(host: string, superToken: string, key: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        clearPPPConfig(host: string, superToken: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        clearRewardAddress(host: string, superToken: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        clearSuperTokenMinimumDeposit(host: string, superToken: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        clearTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        disableTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        enableTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getCodeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfigAsAddress(host: string, superToken: string, key: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfigAsUint256(host: string, superToken: string, key: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPPPConfig(host: string, superToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRewardAddress(host: string, superToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSuperTokenMinimumDeposit(host: string, superToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isAuthorizedAppFactory(host: string, factory: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isTrustedForwarder(host: string, superToken: string, forwarder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        registerAgreementClass(host: string, agreementClass: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        replaceGovernance(host: string, newGov: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        "setConfig(address,address,bytes32,address)"(host: string, superToken: string, key: BytesLike, value: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        "setConfig(address,address,bytes32,uint256)"(host: string, superToken: string, key: BytesLike, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setPPPConfig(host: string, superToken: string, liquidationPeriod: BigNumberish, patricianPeriod: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setRewardAddress(host: string, superToken: string, rewardAddress: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setSuperTokenMinimumDeposit(host: string, superToken: string, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        unauthorizeAppFactory(host: string, factory: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        updateContracts(host: string, hostNewLogic: string, agreementClassNewLogics: string[], superTokenFactoryNewLogic: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        updateCode(newAddress: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=SuperfluidGovernanceII.d.ts.map