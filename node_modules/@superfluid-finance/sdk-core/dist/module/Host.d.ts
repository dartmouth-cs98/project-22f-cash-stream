import { ethers } from "ethers";
import Operation from "./Operation";
import { Superfluid } from "./typechain";
/**
 * Host Helper Class
 * @description A helper class which can be used as a standalone class to populate call agreement transactions.
 */
export default class Host {
    contract: Superfluid;
    constructor(hostAddress: string);
    /**
     * Creates an Operation of the `callAgreement` function on the host contract.
     * @param agreementAddress the agreement address (cfa or ida address)
     * @param callData the encoded callData for the function
     * @param userData any additional user data
     * @param overrides ethers overrides object for more control over the transaction sent.
     * @returns {Operation} an `Operation` class
     */
    populateCallAgreementTxnAndReturnOperation: (agreementAddress: string, callData: string, userData: string | undefined, overrides?: (ethers.Overrides & {
        from?: string | Promise<string> | undefined;
    }) | undefined) => Operation;
}
//# sourceMappingURL=Host.d.ts.map