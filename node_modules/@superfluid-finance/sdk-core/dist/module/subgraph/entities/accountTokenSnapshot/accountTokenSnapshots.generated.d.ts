import * as Types from '../../schema.generated';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export declare type AccountTokenSnapshotsQueryVariables = Types.Exact<{
    first?: Types.InputMaybe<Types.Scalars['Int']>;
    skip?: Types.InputMaybe<Types.Scalars['Int']>;
    orderBy?: Types.InputMaybe<Types.AccountTokenSnapshot_OrderBy>;
    orderDirection?: Types.InputMaybe<Types.OrderDirection>;
    where?: Types.InputMaybe<Types.AccountTokenSnapshot_Filter>;
    block?: Types.InputMaybe<Types.Block_Height>;
}>;
export declare type AccountTokenSnapshotsQuery = {
    accountTokenSnapshots: Array<{
        balanceUntilUpdatedAt: string;
        id: string;
        totalAmountStreamedUntilUpdatedAt: string;
        totalAmountStreamedInUntilUpdatedAt: string;
        totalAmountStreamedOutUntilUpdatedAt: string;
        totalAmountTransferredUntilUpdatedAt: string;
        totalInflowRate: string;
        totalApprovedSubscriptions: number;
        totalNetFlowRate: string;
        totalNumberOfActiveStreams: number;
        totalOutflowRate: string;
        totalNumberOfClosedStreams: number;
        totalSubscriptionsWithUnits: number;
        updatedAtBlockNumber: string;
        updatedAtTimestamp: string;
        maybeCriticalAtTimestamp?: string | undefined;
        isLiquidationEstimateOptimistic: boolean;
        account: {
            id: string;
        };
        token: {
            id: string;
            symbol: string;
        };
    }>;
};
export declare const AccountTokenSnapshotsDocument: DocumentNode<AccountTokenSnapshotsQuery, Types.Exact<{
    first?: Types.InputMaybe<Types.Scalars['Int']>;
    skip?: Types.InputMaybe<Types.Scalars['Int']>;
    orderBy?: Types.InputMaybe<Types.AccountTokenSnapshot_OrderBy>;
    orderDirection?: Types.InputMaybe<Types.OrderDirection>;
    where?: Types.InputMaybe<Types.AccountTokenSnapshot_Filter>;
    block?: Types.InputMaybe<Types.Block_Height>;
}>>;
//# sourceMappingURL=accountTokenSnapshots.generated.d.ts.map