import { BlockNumber, Timestamp } from "../../mappedSubgraphTypes";
import { Account_Filter, Account_OrderBy } from "../../schema.generated";
import { RelevantAddressesIntermediate, SubgraphListQuery, SubgraphQueryHandler } from "../../subgraphQueryHandler";
import { AccountsQuery, AccountsQueryVariables } from "./accounts.generated";
export interface Account {
    id: string;
    createdAtBlockNumber: BlockNumber;
    createdAtTimestamp: Timestamp;
    updatedAtBlockNumber: BlockNumber;
    updatedAtTimestamp: Timestamp;
    isSuperApp: boolean;
}
export declare type AccountListQuery = SubgraphListQuery<Account_Filter, Account_OrderBy>;
export declare class AccountQueryHandler extends SubgraphQueryHandler<Account, AccountListQuery, AccountsQuery, AccountsQueryVariables> {
    getAddressFieldKeysFromFilter: () => {
        accountKeys: (keyof Account_Filter)[];
        tokenKeys: (keyof Account_Filter)[];
    };
    getRelevantAddressesFromResultCore: (result: Account) => RelevantAddressesIntermediate;
    mapFromSubgraphResponse: (response: AccountsQuery) => Account[];
    requestDocument: import("@graphql-typed-document-node/core").TypedDocumentNode<AccountsQuery, import("../../schema.generated").Exact<{
        first?: import("../../schema.generated").InputMaybe<number>;
        orderBy?: import("../../schema.generated").InputMaybe<Account_OrderBy>;
        orderDirection?: import("../../schema.generated").InputMaybe<import("../../schema.generated").OrderDirection>;
        skip?: import("../../schema.generated").InputMaybe<number>;
        where?: import("../../schema.generated").InputMaybe<Account_Filter>;
        block?: import("../../schema.generated").InputMaybe<import("../../schema.generated").Block_Height>;
    }>>;
}
//# sourceMappingURL=account.d.ts.map