import * as Types from '../schema.generated';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export declare type GetStreamsQueryVariables = Types.Exact<{
    where?: Types.Stream_Filter;
    skip?: Types.Scalars['Int'];
    first?: Types.Scalars['Int'];
    orderBy?: Types.Stream_OrderBy;
    orderDirection?: Types.OrderDirection;
}>;
export declare type GetStreamsQuery = {
    result: Array<{
        id: string;
        createdAtTimestamp: string;
        createdAtBlockNumber: string;
        updatedAtTimestamp: string;
        updatedAtBlockNumber: string;
        currentFlowRate: string;
        streamedUntilUpdatedAt: string;
        token: {
            id: string;
            createdAtTimestamp: string;
            createdAtBlockNumber: string;
            name: string;
            symbol: string;
            isListed: boolean;
            underlyingAddress: string;
        };
        sender: {
            id: string;
        };
        receiver: {
            id: string;
        };
        flowUpdatedEvents: Array<{
            id: string;
            blockNumber: string;
            timestamp: string;
            transactionHash: string;
            token: string;
            sender: string;
            receiver: string;
            flowRate: string;
            totalSenderFlowRate: string;
            totalReceiverFlowRate: string;
            userData: string;
            oldFlowRate: string;
            type: number;
            totalAmountStreamedUntilTimestamp: string;
        }>;
    }>;
};
export declare const GetStreamsDocument: DocumentNode<GetStreamsQuery, Types.Exact<{
    where?: Types.Stream_Filter | undefined;
    skip?: number | undefined;
    first?: number | undefined;
    orderBy?: Types.Stream_OrderBy | undefined;
    orderDirection?: Types.OrderDirection | undefined;
}>>;
//# sourceMappingURL=getStreams.generated.d.ts.map