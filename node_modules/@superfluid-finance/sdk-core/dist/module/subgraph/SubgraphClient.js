import { request } from "graphql-request";
import { SFError } from "../SFError";
export class SubgraphClient {
    constructor(subgraphUrl) {
        this.subgraphUrl = subgraphUrl;
    }
    async request(document, variables) {
        try {
            return await request(this.subgraphUrl, document, cleanVariables(variables));
        }
        catch (err) {
            throw new SFError({
                type: "SUBGRAPH_ERROR",
                customMessage: `Failed call to subgraph with query ${document}`,
                errorObject: err,
            });
        }
    }
}
// Inspired by: https://stackoverflow.com/a/38340730
// Remove properties with null, undefined, empty string values.
function cleanVariables(variables) {
    return Object.fromEntries(Object.entries(variables)
        .filter(([, value]) => value !== "" && value !== null && value !== undefined)
        .map(([key, value]) => [
        key,
        value === Object(value) && !Array.isArray(value)
            ? cleanVariables(value)
            : value,
    ]));
}
//# sourceMappingURL=SubgraphClient.js.map