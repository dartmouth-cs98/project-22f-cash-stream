import { FlowUpdatedEvent } from "../../events";
import { FlowUpdatedEvent_Filter, FlowUpdatedEvent_OrderBy } from "../schema.generated";
import { RelevantAddressesIntermediate, SubgraphListQuery, SubgraphQueryHandler } from "../subgraphQueryHandler";
import { FlowUpdatedEventsQuery, FlowUpdatedEventsQueryVariables } from "./events.generated";
export declare type FlowUpdatedEventListQuery = SubgraphListQuery<FlowUpdatedEvent_Filter, FlowUpdatedEvent_OrderBy>;
export declare class FlowUpdatedEventQueryHandler extends SubgraphQueryHandler<FlowUpdatedEvent, FlowUpdatedEventListQuery, FlowUpdatedEventsQuery, FlowUpdatedEventsQueryVariables> {
    getAddressFieldKeysFromFilter: () => {
        accountKeys: (keyof FlowUpdatedEvent_Filter)[];
        tokenKeys: (keyof FlowUpdatedEvent_Filter)[];
    };
    getRelevantAddressesFromResultCore(result: FlowUpdatedEvent): RelevantAddressesIntermediate;
    mapFromSubgraphResponse(response: FlowUpdatedEventsQuery): FlowUpdatedEvent[];
    requestDocument: import("@graphql-typed-document-node/core").TypedDocumentNode<FlowUpdatedEventsQuery, import("../schema.generated").Exact<{
        first?: import("../schema.generated").InputMaybe<number>;
        skip?: import("../schema.generated").InputMaybe<number>;
        where?: import("../schema.generated").InputMaybe<FlowUpdatedEvent_Filter>;
        orderBy?: import("../schema.generated").InputMaybe<FlowUpdatedEvent_OrderBy>;
        orderDirection?: import("../schema.generated").InputMaybe<import("../schema.generated").OrderDirection>;
        block?: import("../schema.generated").InputMaybe<import("../schema.generated").Block_Height>;
    }>>;
}
//# sourceMappingURL=flowUpdatedEvent.d.ts.map