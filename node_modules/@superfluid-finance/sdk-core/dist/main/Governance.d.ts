import { IGetGovernanceParametersParams, IWeb3GovernanceParams } from "./interfaces";
import { SuperfluidGovernanceII } from "./typechain/SuperfluidGovernanceII";
export default class Governance {
    contract: SuperfluidGovernanceII;
    hostAddress: string;
    constructor(govAddress: string, hostAddress: string);
    /**
     * Returns the 3Ps config for the specified token (or default) - the liquidation period and patrician period
     * @see https://docs.superfluid.finance/superfluid/sentinels/liquidations-and-toga
     * @param providerOrSigner a provider or signer for executing a web3 call
     * @param token specified governance parameter token
     * @returns {Object} liquidationPeriod and patricianPeriod as strings
     */
    getPPPConfig: ({ providerOrSigner, token, }: IGetGovernanceParametersParams) => Promise<{
        liquidationPeriod: string;
        patricianPeriod: string;
    }>;
    /**
     * Returns the reward address for the specified token (or default)
     * @param providerOrSigner a provider or signer for executing a web3 call
     * @param token specified governance parameter token
     * @returns {string} the reward address
     */
    getRewardAddress: ({ providerOrSigner, token, }: IGetGovernanceParametersParams) => Promise<string>;
    /**
     * Returns the minimum deposit for the specified token (or default)
     * @param providerOrSigner a provider or signer for executing a web3 call
     * @param token specified governance parameter token
     * @returns {string} minimum deposit
     */
    getMinimumDeposit: ({ providerOrSigner, token, }: IGetGovernanceParametersParams) => Promise<string>;
    /**
     * Returns the relevant governance parameters
     * @param providerOrSigner a provider or signer for executing a web3 call
     * @param token specified governance parameter token
     * @returns {Object} liquidationPeriod, patricianPeriod, rewardAddress and minimumDeposit
     */
    getGovernanceParameters: ({ providerOrSigner, token, }: IGetGovernanceParametersParams) => Promise<IWeb3GovernanceParams>;
}
//# sourceMappingURL=Governance.d.ts.map