"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const Host_1 = __importDefault(require("./Host"));
const SFError_1 = require("./SFError");
const IInstantDistributionAgreementV1_json_1 = __importDefault(require("./abi/IInstantDistributionAgreementV1.json"));
const utils_1 = require("./utils");
const idaInterface = new ethers_1.ethers.utils.Interface(IInstantDistributionAgreementV1_json_1.default.abi);
/**
 * Instant Distribution Agreement V1 Helper Class
 * @description A helper class to interact with the IDAV1 contract.
 */
class InstantDistributionAgreementV1 {
    constructor(options) {
        /** ### IDA Read Functions ### */
        /**
         * Get the details of a `Subscription`.
         * @param superToken the superToken of the agreement
         * @param publisher the address of the publisher of the index
         * @param indexId the index id
         * @param subscriber the subscriber's address
         * @param providerOrSigner a provider or signer object
         * @returns {Promise<IWeb3Subscription>} Web3 Subscription object
         */
        this.getSubscription = async (params) => {
            const normalizedToken = (0, utils_1.normalizeAddress)(params.superToken);
            const normalizedPublisher = (0, utils_1.normalizeAddress)(params.publisher);
            const normalizedSubscriber = (0, utils_1.normalizeAddress)(params.subscriber);
            try {
                const subscription = await this.contract
                    .connect(params.providerOrSigner)
                    .getSubscription(normalizedToken, normalizedPublisher, params.indexId, normalizedSubscriber);
                return {
                    exist: subscription.exist,
                    approved: subscription.approved,
                    units: subscription.units.toString(),
                    pendingDistribution: subscription.pendingDistribution.toString(),
                };
            }
            catch (err) {
                throw new SFError_1.SFError({
                    type: "IDAV1_READ",
                    customMessage: "There was an error getting the subscription",
                    errorObject: err,
                });
            }
        };
        /**
         * Get the details of an `Index`.
         * @param superToken the superToken of the agreement
         * @param publisher the address of the publisher of the index
         * @param indexId the index id
         * @param providerOrSigner a provider or signer object
         * @returns {Promise<IWeb3Index>} Web3 Index object
         */
        this.getIndex = async (params) => {
            const normalizedToken = (0, utils_1.normalizeAddress)(params.superToken);
            const normalizedPublisher = (0, utils_1.normalizeAddress)(params.publisher);
            try {
                const index = await this.contract
                    .connect(params.providerOrSigner)
                    .getIndex(normalizedToken, normalizedPublisher, params.indexId);
                return {
                    exist: index.exist,
                    indexValue: index.indexValue.toString(),
                    totalUnitsApproved: index.totalUnitsApproved.toString(),
                    totalUnitsPending: index.totalUnitsPending.toString(),
                };
            }
            catch (err) {
                throw new SFError_1.SFError({
                    type: "IDAV1_READ",
                    customMessage: "There was an error getting the index",
                    errorObject: err,
                });
            }
        };
        /** ### IDA Write Functions ### */
        /**
         * Creates an IDA Index.
         * @param indexId The id of the index.
         * @param superToken The address of the `index` superToken.
         * @param userData Extra user data provided.
         * @param overrides ethers overrides object for more control over the transaction sent.
         * @returns {Operation} An instance of Operation which can be executed or batched.
         */
        this.createIndex = (params) => {
            const normalizedToken = (0, utils_1.normalizeAddress)(params.superToken);
            const callData = idaInterface.encodeFunctionData("createIndex", [
                normalizedToken,
                params.indexId,
                "0x",
            ]);
            return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.idaV1Address, callData, params.userData, params.overrides);
        };
        /**
         * Distributes `amount` of `superToken` to an index
         * @param indexId The id of the index.
         * @param amount The amount of `superToken` to be distributed.
         * @param superToken The superToken to be distributed.
         * @param userData Extra user data provided.
         * @param overrides ethers overrides object for more control over the transaction sent.
         * @returns {Operation} An instance of Operation which can be executed or batched.
         */
        this.distribute = (params) => {
            const normalizedToken = (0, utils_1.normalizeAddress)(params.superToken);
            const callData = idaInterface.encodeFunctionData("distribute", [
                normalizedToken,
                params.indexId,
                params.amount,
                "0x",
            ]);
            return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.idaV1Address, callData, params.userData, params.overrides);
        };
        /**
         * Updates the `indexValue` of an index.
         * @description NOTE: It has the same effect as `distribute`, but is closer to the low level data structure of the index.
         * @param indexId The id of the index.
         * @param indexValue The new indexValue.
         * @param superToken The superToken to be distributed.
         * @param userData Extra user data provided.
         * @param overrides ethers overrides object for more control over the transaction sent.
         * @returns {Operation} An instance of Operation which can be executed or batched.
         */
        this.updateIndexValue = (params) => {
            const normalizedToken = (0, utils_1.normalizeAddress)(params.superToken);
            const callData = idaInterface.encodeFunctionData("updateIndex", [
                normalizedToken,
                params.indexId,
                params.indexValue,
                "0x",
            ]);
            return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.idaV1Address, callData, params.userData, params.overrides);
        };
        /**
         * Updates the `units` allocated to a Subscription.
         * @param indexId The id of the index.
         * @param superToken The superToken of the index.
         * @param subscriber The subscriber address whose units you want to update.
         * @param units The amount of units you want to update to.
         * @param userData Extra user data provided.
         * @param overrides ethers overrides object for more control over the transaction sent.
         * @returns {Operation} An instance of Operation which can be executed or batched.
         */
        this.updateSubscriptionUnits = (params) => {
            const normalizedToken = (0, utils_1.normalizeAddress)(params.superToken);
            const normalizedSubscriber = (0, utils_1.normalizeAddress)(params.subscriber);
            const callData = idaInterface.encodeFunctionData("updateSubscription", [
                normalizedToken,
                params.indexId,
                normalizedSubscriber,
                params.units,
                "0x",
            ]);
            return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.idaV1Address, callData, params.userData, params.overrides);
        };
        /**
         * Approves a Subscription, so the Subscriber won't need to claim tokens when the Publisher distributes.
         * @param indexId The id of the index.
         * @param superToken The superToken of the index.
         * @param publisher The publisher of the index you want to approve.
         * @param userData Extra user data provided.
         * @param overrides ethers overrides object for more control over the transaction sent.
         * @returns {Operation} An instance of Operation which can be executed or batched.
         */
        this.approveSubscription = (params) => {
            const normalizedPublisher = (0, utils_1.normalizeAddress)(params.publisher);
            const normalizedToken = (0, utils_1.normalizeAddress)(params.superToken);
            const callData = idaInterface.encodeFunctionData("approveSubscription", [normalizedToken, normalizedPublisher, params.indexId, "0x"]);
            return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.idaV1Address, callData, params.userData, params.overrides);
        };
        /**
         * Revokes a Subscription, so the Subscriber will need to claim tokens when the Publisher distributres.
         * @param indexId The id of the index.
         * @param superToken The superToken of the index.
         * @param subscriber The subscriber address whose subscription you want to revoke.
         * @param userData Extra user data provided.
         * @param overrides ethers overrides object for more control over the transaction sent.
         * @returns {Operation} An instance of Operation which can be executed or batched.
         */
        this.revokeSubscription = (params) => {
            const normalizedPublisher = (0, utils_1.normalizeAddress)(params.publisher);
            const normalizedToken = (0, utils_1.normalizeAddress)(params.superToken);
            const callData = idaInterface.encodeFunctionData("revokeSubscription", [
                normalizedToken,
                normalizedPublisher,
                params.indexId,
                "0x",
            ]);
            return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.idaV1Address, callData, params.userData, params.overrides);
        };
        /**
         * Deletes a Subscription by setting the `units` allocated to the Subscriber to 0.
         * @param indexId The id of the index.
         * @param superToken The superToken of the index.
         * @param subscriber The subscriber address whose subscription you want to delete.
         * @param publisher The publisher address of the index you are targetting.
         * @param userData Extra user data provided.
         * @param overrides ethers overrides object for more control over the transaction sent.
         * @returns {Operation} An instance of Operation which can be executed or batched.
         */
        this.deleteSubscription = (params) => {
            const normalizedPublisher = (0, utils_1.normalizeAddress)(params.publisher);
            const normalizedToken = (0, utils_1.normalizeAddress)(params.superToken);
            const normalizedSubscriber = (0, utils_1.normalizeAddress)(params.subscriber);
            const callData = idaInterface.encodeFunctionData("deleteSubscription", [
                normalizedToken,
                normalizedPublisher,
                params.indexId,
                normalizedSubscriber,
                "0x",
            ]);
            return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.idaV1Address, callData, params.userData, params.overrides);
        };
        /**
         * Claims any pending tokens allocated to the Subscription (unapproved).
         * @param indexId The id of the index.
         * @param superToken The superToken of the index.
         * @param subscriber The subscriber address whose subscription you want to delete.
         * @param publisher The publisher address of the index you are targetting.
         * @param userData Extra user data provided.
         * @param overrides ethers overrides object for more control over the transaction sent.
         * @returns {Operation} An instance of Operation which can be executed or batched.
         */
        this.claim = (params) => {
            const normalizedPublisher = (0, utils_1.normalizeAddress)(params.publisher);
            const normalizedToken = (0, utils_1.normalizeAddress)(params.superToken);
            const normalizedSubscriber = (0, utils_1.normalizeAddress)(params.subscriber);
            const callData = idaInterface.encodeFunctionData("claim", [
                normalizedToken,
                normalizedPublisher,
                params.indexId,
                normalizedSubscriber,
                "0x",
            ]);
            return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.idaV1Address, callData, params.userData, params.overrides);
        };
        this.options = options;
        this.host = new Host_1.default(options.config.hostAddress);
        this.contract = new ethers_1.ethers.Contract(this.options.config.idaV1Address, IInstantDistributionAgreementV1_json_1.default.abi);
    }
}
exports.default = InstantDistributionAgreementV1;
//# sourceMappingURL=InstantDistributionAgreementV1.js.map