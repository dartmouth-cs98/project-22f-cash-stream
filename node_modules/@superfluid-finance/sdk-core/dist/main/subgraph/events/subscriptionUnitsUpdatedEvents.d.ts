import { SubscriptionUnitsUpdatedEvent } from "../../events";
import { SubscriptionUnitsUpdatedEvent_Filter, SubscriptionUnitsUpdatedEvent_OrderBy } from "../schema.generated";
import { RelevantAddressesIntermediate, SubgraphListQuery, SubgraphQueryHandler } from "../subgraphQueryHandler";
import { SubscriptionUnitsUpdatedEventsQuery, SubscriptionUnitsUpdatedEventsQueryVariables } from "./events.generated";
export declare type SubscriptionUnitsUpdatedEventListQuery = SubgraphListQuery<SubscriptionUnitsUpdatedEvent_Filter, SubscriptionUnitsUpdatedEvent_OrderBy>;
export declare class SubscriptionUnitsUpdatedEventQueryHandler extends SubgraphQueryHandler<SubscriptionUnitsUpdatedEvent, SubscriptionUnitsUpdatedEventListQuery, SubscriptionUnitsUpdatedEventsQuery, SubscriptionUnitsUpdatedEventsQueryVariables> {
    getAddressFieldKeysFromFilter: () => {
        accountKeys: (keyof SubscriptionUnitsUpdatedEvent_Filter)[];
        tokenKeys: (keyof SubscriptionUnitsUpdatedEvent_Filter)[];
    };
    getRelevantAddressesFromResultCore(result: SubscriptionUnitsUpdatedEvent): RelevantAddressesIntermediate;
    mapFromSubgraphResponse(response: SubscriptionUnitsUpdatedEventsQuery): SubscriptionUnitsUpdatedEvent[];
    requestDocument: import("@graphql-typed-document-node/core").TypedDocumentNode<SubscriptionUnitsUpdatedEventsQuery, import("../schema.generated").Exact<{
        first?: import("../schema.generated").InputMaybe<number>;
        skip?: import("../schema.generated").InputMaybe<number>;
        where?: import("../schema.generated").InputMaybe<SubscriptionUnitsUpdatedEvent_Filter>;
        orderBy?: import("../schema.generated").InputMaybe<SubscriptionUnitsUpdatedEvent_OrderBy>;
        orderDirection?: import("../schema.generated").InputMaybe<import("../schema.generated").OrderDirection>;
        block?: import("../schema.generated").InputMaybe<import("../schema.generated").Block_Height>;
    }>>;
}
//# sourceMappingURL=subscriptionUnitsUpdatedEvents.d.ts.map