import { AllEvents } from "../../events";
import { Event_Filter, Event_OrderBy } from "../schema.generated";
import { RelevantAddressesIntermediate, SubgraphListQuery, SubgraphQueryHandler } from "../subgraphQueryHandler";
import { EventsQuery, EventsQueryVariables } from "./events.generated";
export declare type EventListQuery = SubgraphListQuery<Event_Filter, Event_OrderBy>;
export declare class EventQueryHandler extends SubgraphQueryHandler<AllEvents, EventListQuery, EventsQuery, EventsQueryVariables> {
    getAddressFieldKeysFromFilter: () => {
        accountKeys: (keyof Event_Filter)[];
        tokenKeys: (keyof Event_Filter)[];
    };
    getRelevantAddressesFromResultCore(): RelevantAddressesIntermediate;
    mapFromSubgraphResponse(response: EventsQuery): AllEvents[];
    requestDocument: import("@graphql-typed-document-node/core").TypedDocumentNode<EventsQuery, import("../schema.generated").Exact<{
        where?: Event_Filter | undefined;
        skip?: number | undefined;
        first?: number | undefined;
        orderBy?: Event_OrderBy | undefined;
        orderDirection?: import("../schema.generated").OrderDirection | undefined;
        block?: import("../schema.generated").InputMaybe<import("../schema.generated").Block_Height>;
    }>>;
}
//# sourceMappingURL=events.d.ts.map