import { IndexUpdatedEvent } from "../../events";
import { IndexUpdatedEvent_Filter, IndexUpdatedEvent_OrderBy } from "../schema.generated";
import { RelevantAddressesIntermediate, SubgraphListQuery, SubgraphQueryHandler } from "../subgraphQueryHandler";
import { IndexUpdatedEventsQuery, IndexUpdatedEventsQueryVariables } from "./events.generated";
export declare type IndexUpdatedEventListQuery = SubgraphListQuery<IndexUpdatedEvent_Filter, IndexUpdatedEvent_OrderBy>;
export declare class IndexUpdatedEventQueryHandler extends SubgraphQueryHandler<IndexUpdatedEvent, IndexUpdatedEventListQuery, IndexUpdatedEventsQuery, IndexUpdatedEventsQueryVariables> {
    getAddressFieldKeysFromFilter: () => {
        accountKeys: (keyof IndexUpdatedEvent_Filter)[];
        tokenKeys: (keyof IndexUpdatedEvent_Filter)[];
    };
    getRelevantAddressesFromResultCore(result: IndexUpdatedEvent): RelevantAddressesIntermediate;
    mapFromSubgraphResponse(response: IndexUpdatedEventsQuery): IndexUpdatedEvent[];
    requestDocument: import("@graphql-typed-document-node/core").TypedDocumentNode<IndexUpdatedEventsQuery, import("../schema.generated").Exact<{
        first?: import("../schema.generated").InputMaybe<number>;
        skip?: import("../schema.generated").InputMaybe<number>;
        where?: import("../schema.generated").InputMaybe<IndexUpdatedEvent_Filter>;
        orderBy?: import("../schema.generated").InputMaybe<IndexUpdatedEvent_OrderBy>;
        orderDirection?: import("../schema.generated").InputMaybe<import("../schema.generated").OrderDirection>;
        block?: import("../schema.generated").InputMaybe<import("../schema.generated").Block_Height>;
    }>>;
}
//# sourceMappingURL=indexUpdatedEvent.d.ts.map