import { TransferEvent } from "../../events";
import { TransferEvent_Filter, TransferEvent_OrderBy } from "../schema.generated";
import { RelevantAddressesIntermediate, SubgraphListQuery, SubgraphQueryHandler } from "../subgraphQueryHandler";
import { TransferEventsQuery, TransferEventsQueryVariables } from "./events.generated";
export declare type TransferEventListQuery = SubgraphListQuery<TransferEvent_Filter, TransferEvent_OrderBy>;
export declare class TransferEventQueryHandler extends SubgraphQueryHandler<TransferEvent, TransferEventListQuery, TransferEventsQuery, TransferEventsQueryVariables> {
    getAddressFieldKeysFromFilter: () => {
        accountKeys: (keyof TransferEvent_Filter)[];
        tokenKeys: (keyof TransferEvent_Filter)[];
    };
    getRelevantAddressesFromResultCore(result: TransferEvent): RelevantAddressesIntermediate;
    mapFromSubgraphResponse(response: TransferEventsQuery): TransferEvent[];
    requestDocument: import("@graphql-typed-document-node/core").TypedDocumentNode<TransferEventsQuery, import("../schema.generated").Exact<{
        first?: import("../schema.generated").InputMaybe<number>;
        skip?: import("../schema.generated").InputMaybe<number>;
        where?: import("../schema.generated").InputMaybe<TransferEvent_Filter>;
        orderBy?: import("../schema.generated").InputMaybe<TransferEvent_OrderBy>;
        orderDirection?: import("../schema.generated").InputMaybe<import("../schema.generated").OrderDirection>;
        block?: import("../schema.generated").InputMaybe<import("../schema.generated").Block_Height>;
    }>>;
}
//# sourceMappingURL=transferEvents.d.ts.map