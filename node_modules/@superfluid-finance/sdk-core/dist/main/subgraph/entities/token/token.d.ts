import { Address, BlockNumber, Timestamp } from "../../mappedSubgraphTypes";
import { Token_Filter, Token_OrderBy } from "../../schema.generated";
import { RelevantAddressesIntermediate, SubgraphListQuery, SubgraphQueryHandler } from "../../subgraphQueryHandler";
import { TokensQuery, TokensQueryVariables } from "./tokens.generated";
export interface Token {
    createdAtBlockNumber: BlockNumber;
    createdAtTimestamp: Timestamp;
    decimals: number;
    id: Address;
    isListed: boolean;
    isSuperToken: boolean;
    name: string;
    symbol: string;
    underlyingAddress: Address;
}
export declare type TokenListQuery = SubgraphListQuery<Token_Filter, Token_OrderBy>;
export declare class TokenQueryHandler extends SubgraphQueryHandler<Token, TokenListQuery, TokensQuery, TokensQueryVariables> {
    getAddressFieldKeysFromFilter: () => {
        accountKeys: (keyof Token_Filter)[];
        tokenKeys: (keyof Token_Filter)[];
    };
    getRelevantAddressesFromResultCore: (result: Token) => RelevantAddressesIntermediate;
    mapFromSubgraphResponse: (response: TokensQuery) => Token[];
    requestDocument: import("@graphql-typed-document-node/core").TypedDocumentNode<TokensQuery, import("../../schema.generated").Exact<{
        first?: import("../../schema.generated").InputMaybe<number>;
        orderBy?: import("../../schema.generated").InputMaybe<Token_OrderBy>;
        orderDirection?: import("../../schema.generated").InputMaybe<import("../../schema.generated").OrderDirection>;
        skip?: import("../../schema.generated").InputMaybe<number>;
        where?: import("../../schema.generated").InputMaybe<Token_Filter>;
        block?: import("../../schema.generated").InputMaybe<import("../../schema.generated").Block_Height>;
    }>>;
}
//# sourceMappingURL=token.d.ts.map