"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamPeriodQueryHandler = void 0;
const subgraphQueryHandler_1 = require("../../subgraphQueryHandler");
const streamPeriods_generated_1 = require("./streamPeriods.generated");
class StreamPeriodQueryHandler extends subgraphQueryHandler_1.SubgraphQueryHandler {
    constructor() {
        super(...arguments);
        this.getAddressFieldKeysFromFilter = () => ({
            accountKeys: ["sender", "receiver"],
            tokenKeys: ["token"],
        });
        this.getRelevantAddressesFromResultCore = (result) => ({
            tokens: [result.token],
            accounts: [result.sender, result.receiver],
        });
        this.mapFromSubgraphResponse = (response) => response.streamPeriods.map((x) => {
            var _a;
            return ({
                ...x,
                stream: x.stream.id,
                token: x.token.id,
                tokenSymbol: x.token.symbol,
                sender: x.sender.id,
                receiver: x.receiver.id,
                startedAtEvent: x.startedAtEvent.id,
                stoppedAtEvent: (_a = x.stoppedAtEvent) === null || _a === void 0 ? void 0 : _a.id,
                startedAtBlockNumber: Number(x.startedAtBlockNumber),
                stoppedAtBlockNumber: Number(x.stoppedAtBlockNumber),
                startedAtTimestamp: Number(x.startedAtTimestamp),
                stoppedAtTimestamp: Number(x.stoppedAtTimestamp),
            });
        });
        this.requestDocument = streamPeriods_generated_1.StreamPeriodsDocument;
    }
}
exports.StreamPeriodQueryHandler = StreamPeriodQueryHandler;
//# sourceMappingURL=streamPeriod.js.map