import * as Types from '../../schema.generated';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export declare type StreamPeriodsQueryVariables = Types.Exact<{
    first?: Types.InputMaybe<Types.Scalars['Int']>;
    skip?: Types.InputMaybe<Types.Scalars['Int']>;
    where?: Types.InputMaybe<Types.StreamPeriod_Filter>;
    orderBy?: Types.InputMaybe<Types.StreamPeriod_OrderBy>;
    orderDirection?: Types.InputMaybe<Types.OrderDirection>;
    block?: Types.InputMaybe<Types.Block_Height>;
}>;
export declare type StreamPeriodsQuery = {
    streamPeriods: Array<{
        id: string;
        flowRate: string;
        startedAtBlockNumber: string;
        startedAtTimestamp: string;
        stoppedAtBlockNumber?: string | undefined;
        stoppedAtTimestamp?: string | undefined;
        totalAmountStreamed?: string | undefined;
        token: {
            id: string;
            symbol: string;
        };
        stream: {
            id: string;
        };
        sender: {
            id: string;
        };
        receiver: {
            id: string;
        };
        stoppedAtEvent?: {
            id: string;
        } | undefined;
        startedAtEvent: {
            id: string;
        };
    }>;
};
export declare const StreamPeriodsDocument: DocumentNode<StreamPeriodsQuery, Types.Exact<{
    first?: Types.InputMaybe<Types.Scalars['Int']>;
    skip?: Types.InputMaybe<Types.Scalars['Int']>;
    where?: Types.InputMaybe<Types.StreamPeriod_Filter>;
    orderBy?: Types.InputMaybe<Types.StreamPeriod_OrderBy>;
    orderDirection?: Types.InputMaybe<Types.OrderDirection>;
    block?: Types.InputMaybe<Types.Block_Height>;
}>>;
//# sourceMappingURL=streamPeriods.generated.d.ts.map