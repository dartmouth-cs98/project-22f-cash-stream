{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\nvar defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport var AlchemyWebSocketProvider = /*#__PURE__*/function (_WebSocketProvider) {\n  _inherits(AlchemyWebSocketProvider, _WebSocketProvider);\n  var _super = _createSuper(AlchemyWebSocketProvider);\n  function AlchemyWebSocketProvider(network, apiKey) {\n    var _this;\n    _classCallCheck(this, AlchemyWebSocketProvider);\n    var provider = new AlchemyProvider(network, apiKey);\n    var url = provider.connection.url.replace(/^http/i, \"ws\").replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n    _this = _super.call(this, url, provider.network);\n    defineReadOnly(_assertThisInitialized(_this), \"apiKey\", provider.apiKey);\n    return _this;\n  }\n  _createClass(AlchemyWebSocketProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey === defaultApiKey;\n    }\n  }]);\n  return AlchemyWebSocketProvider;\n}(WebSocketProvider);\nexport var AlchemyProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(AlchemyProvider, _UrlJsonRpcProvider);\n  var _super2 = _createSuper(AlchemyProvider);\n  function AlchemyProvider() {\n    _classCallCheck(this, AlchemyProvider);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(AlchemyProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey === defaultApiKey;\n    }\n  }], [{\n    key: \"getWebSocketProvider\",\n    value: function getWebSocketProvider(network, apiKey) {\n      return new AlchemyWebSocketProvider(network, apiKey);\n    }\n  }, {\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      if (apiKey == null) {\n        return defaultApiKey;\n      }\n      if (apiKey && typeof apiKey !== \"string\") {\n        logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n      }\n      return apiKey;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n      switch (network.name) {\n        case \"homestead\":\n          host = \"eth-mainnet.alchemyapi.io/v2/\";\n          break;\n        case \"goerli\":\n          host = \"eth-goerli.g.alchemy.com/v2/\";\n          break;\n        case \"matic\":\n          host = \"polygon-mainnet.g.alchemy.com/v2/\";\n          break;\n        case \"maticmum\":\n          host = \"polygon-mumbai.g.alchemy.com/v2/\";\n          break;\n        case \"arbitrum\":\n          host = \"arb-mainnet.g.alchemy.com/v2/\";\n          break;\n        case \"arbitrum-goerli\":\n          host = \"arb-goerli.g.alchemy.com/v2/\";\n          break;\n        case \"optimism\":\n          host = \"opt-mainnet.g.alchemy.com/v2/\";\n          break;\n        case \"optimism-goerli\":\n          host = \"opt-goerli.g.alchemy.com/v2/\";\n          break;\n        default:\n          logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n      }\n      return {\n        allowGzip: true,\n        url: \"https:/\" + \"/\" + host + apiKey,\n        throttleCallback: function throttleCallback(attempt, url) {\n          if (apiKey === defaultApiKey) {\n            showThrottleMessage();\n          }\n          return Promise.resolve(true);\n        }\n      };\n    }\n  }]);\n  return AlchemyProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"sources":["../src.ts/alchemy-provider.ts"],"names":[],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAAA;AAGb,SAAS,cAAc,QAAQ,2BAA2B;AAG1D,SAA+B,mBAAmB,QAAQ,aAAa;AACvE,SAAS,iBAAiB,QAAQ,sBAAsB;AAExD,SAAS,MAAM,QAAQ,uBAAuB;AAC9C,SAAS,OAAO,QAAQ,YAAY;AACpC,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC;AAElC,SAAS,kBAAkB,QAAQ,yBAAyB;AAE5D;AACA;AACA;AACA;AAEA,IAAM,aAAa,GAAG,kCAAkC;AAExD,WAAa,wBAAyB;EAAA;EAAA;EAGlC,kCAAY,OAAoB,EAAE,MAAY,EAAA;IAAA;IAAA;IAC1C,IAAM,QAAQ,GAAG,IAAI,eAAe,CAAC,OAAO,EAAE,MAAM,CAAC;IAErD,IAAM,GAAG,GAAG,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CACvB,OAAO,CAAC,cAAc,EAAE,iBAAiB,CAAC;IAE9E,0BAAM,GAAG,EAAE,QAAQ,CAAC,OAAO;IAC3B,cAAc,gCAAO,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC;IAAC;EACpD;EAAC;IAAA;IAAA,OAED,+BAAmB;MACf,OAAQ,IAAI,CAAC,MAAM,KAAK,aAAa;IACzC;EAAC;EAAA;AAAA,EAfyC,iBAAiB;AAkB/D,WAAa,eAAgB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAyDzB,+BAAmB;MACf,OAAQ,IAAI,CAAC,MAAM,KAAK,aAAa;IACzC;EAAC;IAAA;IAAA,OAzDD,8BAA4B,OAAoB,EAAE,MAAY,EAAA;MAC1D,OAAO,IAAI,wBAAwB,CAAC,OAAO,EAAE,MAAM,CAAC;IACxD;EAAC;IAAA;IAAA,OAED,mBAAiB,MAAW,EAAA;MACxB,IAAI,MAAM,IAAI,IAAI,EAAE;QAAE,OAAO,aAAa;MAAG;MAC7C,IAAI,MAAM,IAAI,OAAO,MAAO,KAAK,QAAQ,EAAE;QACvC,MAAM,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,QAAQ,EAAE,MAAM,CAAC;MAChE;MACD,OAAO,MAAM;IACjB;EAAC;IAAA;IAAA,OAED,gBAAc,OAAgB,EAAE,MAAc,EAAA;MAC1C,IAAI,IAAI,GAAG,IAAI;MACf,QAAQ,OAAO,CAAC,IAAI;QAChB,KAAK,WAAW;UACZ,IAAI,GAAG,+BAA+B;UACtC;QACJ,KAAK,QAAQ;UACT,IAAI,GAAG,8BAA8B;UACrC;QACJ,KAAK,OAAO;UACR,IAAI,GAAG,mCAAmC;UAC1C;QACJ,KAAK,UAAU;UACX,IAAI,GAAG,kCAAkC;UACzC;QACJ,KAAK,UAAU;UACX,IAAI,GAAG,+BAA+B;UACtC;QACJ,KAAK,iBAAiB;UAClB,IAAI,GAAG,8BAA8B;UACrC;QACJ,KAAK,UAAU;UACX,IAAI,GAAG,+BAA+B;UACtC;QACJ,KAAK,iBAAiB;UAClB,IAAI,GAAG,8BAA8B;UACrC;QACJ;UACG,MAAM,CAAC,kBAAkB,CAAC,qBAAqB,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;MAAC;MAGjF,OAAO;QACH,SAAS,EAAE,IAAI;QACf,GAAG,EAAG,SAAS,GAAG,GAAG,GAAG,IAAI,GAAG,MAAO;QACtC,gBAAgB,EAAE,0BAAC,OAAe,EAAE,GAAW,EAAI;UAC/C,IAAI,MAAM,KAAK,aAAa,EAAE;YAC1B,mBAAmB,EAAE;UACxB;UACD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;QAChC;OACH;IACL;EAAC;EAAA;AAAA,EAvDgC,kBAAkB","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport class AlchemyWebSocketProvider extends WebSocketProvider {\n    constructor(network, apiKey) {\n        const provider = new AlchemyProvider(network, apiKey);\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n            .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n}\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n    static getWebSocketProvider(network, apiKey) {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        if (apiKey == null) {\n            return defaultApiKey;\n        }\n        if (apiKey && typeof (apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum\":\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arb-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"optimism\":\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"optimism-goerli\":\n                host = \"opt-goerli.g.alchemy.com/v2/\";\n                break;\n            default:\n                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt, url) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n//# sourceMappingURL=alchemy-provider.js.map"]},"metadata":{},"sourceType":"module"}