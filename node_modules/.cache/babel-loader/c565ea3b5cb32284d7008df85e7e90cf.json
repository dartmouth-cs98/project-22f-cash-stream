{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { arrayify, concat, hexDataSlice, isHexString, joinSignature } from \"@ethersproject/bytes\";\nimport { hashMessage, _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nfunction isAccount(value) {\n  return value != null && isHexString(value.privateKey, 32) && value.address != null;\n}\nfunction hasMnemonic(value) {\n  var mnemonic = value.mnemonic;\n  return mnemonic && mnemonic.phrase;\n}\nexport var Wallet = /*#__PURE__*/function (_Signer) {\n  _inherits(Wallet, _Signer);\n  var _super = _createSuper(Wallet);\n  function Wallet(privateKey, provider) {\n    var _this;\n    _classCallCheck(this, Wallet);\n    _this = _super.call(this);\n    if (isAccount(privateKey)) {\n      var signingKey = new SigningKey(privateKey.privateKey);\n      defineReadOnly(_assertThisInitialized(_this), \"_signingKey\", function () {\n        return signingKey;\n      });\n      defineReadOnly(_assertThisInitialized(_this), \"address\", computeAddress(_this.publicKey));\n      if (_this.address !== getAddress(privateKey.address)) {\n        logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n      }\n      if (hasMnemonic(privateKey)) {\n        var srcMnemonic = privateKey.mnemonic;\n        defineReadOnly(_assertThisInitialized(_this), \"_mnemonic\", function () {\n          return {\n            phrase: srcMnemonic.phrase,\n            path: srcMnemonic.path || defaultPath,\n            locale: srcMnemonic.locale || \"en\"\n          };\n        });\n        var mnemonic = _this.mnemonic;\n        var node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n        if (computeAddress(node.privateKey) !== _this.address) {\n          logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n        }\n      } else {\n        defineReadOnly(_assertThisInitialized(_this), \"_mnemonic\", function () {\n          return null;\n        });\n      }\n    } else {\n      if (SigningKey.isSigningKey(privateKey)) {\n        /* istanbul ignore if */\n        if (privateKey.curve !== \"secp256k1\") {\n          logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n        }\n        defineReadOnly(_assertThisInitialized(_this), \"_signingKey\", function () {\n          return privateKey;\n        });\n      } else {\n        // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n        if (typeof privateKey === \"string\") {\n          if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n            privateKey = \"0x\" + privateKey;\n          }\n        }\n        var _signingKey = new SigningKey(privateKey);\n        defineReadOnly(_assertThisInitialized(_this), \"_signingKey\", function () {\n          return _signingKey;\n        });\n      }\n      defineReadOnly(_assertThisInitialized(_this), \"_mnemonic\", function () {\n        return null;\n      });\n      defineReadOnly(_assertThisInitialized(_this), \"address\", computeAddress(_this.publicKey));\n    }\n    /* istanbul ignore if */\n    if (provider && !Provider.isProvider(provider)) {\n      logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n    }\n    defineReadOnly(_assertThisInitialized(_this), \"provider\", provider || null);\n    return _this;\n  }\n  _createClass(Wallet, [{\n    key: \"mnemonic\",\n    get: function get() {\n      return this._mnemonic();\n    }\n  }, {\n    key: \"privateKey\",\n    get: function get() {\n      return this._signingKey().privateKey;\n    }\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return this._signingKey().publicKey;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress() {\n      return Promise.resolve(this.address);\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(provider) {\n      return new Wallet(this, provider);\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(transaction) {\n      var _this2 = this;\n      return resolveProperties(transaction).then(function (tx) {\n        if (tx.from != null) {\n          if (getAddress(tx.from) !== _this2.address) {\n            logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n          }\n          delete tx.from;\n        }\n        var signature = _this2._signingKey().signDigest(keccak256(serialize(tx)));\n        return serialize(tx, signature);\n      });\n    }\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(message) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", joinSignature(this._signingKey().signDigest(hashMessage(message))));\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"_signTypedData\",\n    value: function _signTypedData(domain, types, value) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this3 = this;\n        var populated;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _TypedDataEncoder.resolveNames(domain, types, value, function (name) {\n                  if (_this3.provider == null) {\n                    logger.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                      operation: \"resolveName\",\n                      value: name\n                    });\n                  }\n                  return _this3.provider.resolveName(name);\n                });\n              case 2:\n                populated = _context2.sent;\n                return _context2.abrupt(\"return\", joinSignature(this._signingKey().signDigest(_TypedDataEncoder.hash(populated.domain, types, populated.value))));\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(password, options, progressCallback) {\n      if (typeof options === \"function\" && !progressCallback) {\n        progressCallback = options;\n        options = {};\n      }\n      if (progressCallback && typeof progressCallback !== \"function\") {\n        throw new Error(\"invalid callback\");\n      }\n      if (!options) {\n        options = {};\n      }\n      return encryptKeystore(this, password, options, progressCallback);\n    }\n    /**\n     *  Static methods to create Wallet instances.\n     */\n  }], [{\n    key: \"createRandom\",\n    value: function createRandom(options) {\n      var entropy = randomBytes(16);\n      if (!options) {\n        options = {};\n      }\n      if (options.extraEntropy) {\n        entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));\n      }\n      var mnemonic = entropyToMnemonic(entropy, options.locale);\n      return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n  }, {\n    key: \"fromEncryptedJson\",\n    value: function fromEncryptedJson(json, password, progressCallback) {\n      return decryptJsonWallet(json, password, progressCallback).then(function (account) {\n        return new Wallet(account);\n      });\n    }\n  }, {\n    key: \"fromEncryptedJsonSync\",\n    value: function fromEncryptedJsonSync(json, password) {\n      return new Wallet(decryptJsonWalletSync(json, password));\n    }\n  }, {\n    key: \"fromMnemonic\",\n    value: function fromMnemonic(mnemonic, path, wordlist) {\n      if (!path) {\n        path = defaultPath;\n      }\n      return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n  }]);\n  return Wallet;\n}(Signer);\nexport function verifyMessage(message, signature) {\n  return recoverAddress(hashMessage(message), signature);\n}\nexport function verifyTypedData(domain, types, value, signature) {\n  return recoverAddress(_TypedDataEncoder.hash(domain, types, value), signature);\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { arrayify, concat, hexDataSlice, isHexString, joinSignature } from \"@ethersproject/bytes\";\nimport { hashMessage, _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction isAccount(value) {\n    return (value != null && isHexString(value.privateKey, 32) && value.address != null);\n}\nfunction hasMnemonic(value) {\n    const mnemonic = value.mnemonic;\n    return (mnemonic && mnemonic.phrase);\n}\nexport class Wallet extends Signer {\n    constructor(privateKey, provider) {\n        super();\n        if (isAccount(privateKey)) {\n            const signingKey = new SigningKey(privateKey.privateKey);\n            defineReadOnly(this, \"_signingKey\", () => signingKey);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n            if (this.address !== getAddress(privateKey.address)) {\n                logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n            }\n            if (hasMnemonic(privateKey)) {\n                const srcMnemonic = privateKey.mnemonic;\n                defineReadOnly(this, \"_mnemonic\", () => ({\n                    phrase: srcMnemonic.phrase,\n                    path: srcMnemonic.path || defaultPath,\n                    locale: srcMnemonic.locale || \"en\"\n                }));\n                const mnemonic = this.mnemonic;\n                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n                if (computeAddress(node.privateKey) !== this.address) {\n                    logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n                }\n            }\n            else {\n                defineReadOnly(this, \"_mnemonic\", () => null);\n            }\n        }\n        else {\n            if (SigningKey.isSigningKey(privateKey)) {\n                /* istanbul ignore if */\n                if (privateKey.curve !== \"secp256k1\") {\n                    logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n                }\n                defineReadOnly(this, \"_signingKey\", () => privateKey);\n            }\n            else {\n                // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n                if (typeof (privateKey) === \"string\") {\n                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n                        privateKey = \"0x\" + privateKey;\n                    }\n                }\n                const signingKey = new SigningKey(privateKey);\n                defineReadOnly(this, \"_signingKey\", () => signingKey);\n            }\n            defineReadOnly(this, \"_mnemonic\", () => null);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n        }\n        /* istanbul ignore if */\n        if (provider && !Provider.isProvider(provider)) {\n            logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n        }\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n    get mnemonic() { return this._mnemonic(); }\n    get privateKey() { return this._signingKey().privateKey; }\n    get publicKey() { return this._signingKey().publicKey; }\n    getAddress() {\n        return Promise.resolve(this.address);\n    }\n    connect(provider) {\n        return new Wallet(this, provider);\n    }\n    signTransaction(transaction) {\n        return resolveProperties(transaction).then((tx) => {\n            if (tx.from != null) {\n                if (getAddress(tx.from) !== this.address) {\n                    logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n                }\n                delete tx.from;\n            }\n            const signature = this._signingKey().signDigest(keccak256(serialize(tx)));\n            return serialize(tx, signature);\n        });\n    }\n    signMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return joinSignature(this._signingKey().signDigest(hashMessage(message)));\n        });\n    }\n    _signTypedData(domain, types, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Populate any ENS names\n            const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, (name) => {\n                if (this.provider == null) {\n                    logger.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"resolveName\",\n                        value: name\n                    });\n                }\n                return this.provider.resolveName(name);\n            });\n            return joinSignature(this._signingKey().signDigest(_TypedDataEncoder.hash(populated.domain, types, populated.value)));\n        });\n    }\n    encrypt(password, options, progressCallback) {\n        if (typeof (options) === \"function\" && !progressCallback) {\n            progressCallback = options;\n            options = {};\n        }\n        if (progressCallback && typeof (progressCallback) !== \"function\") {\n            throw new Error(\"invalid callback\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return encryptKeystore(this, password, options, progressCallback);\n    }\n    /**\n     *  Static methods to create Wallet instances.\n     */\n    static createRandom(options) {\n        let entropy = randomBytes(16);\n        if (!options) {\n            options = {};\n        }\n        if (options.extraEntropy) {\n            entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));\n        }\n        const mnemonic = entropyToMnemonic(entropy, options.locale);\n        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n    static fromEncryptedJson(json, password, progressCallback) {\n        return decryptJsonWallet(json, password, progressCallback).then((account) => {\n            return new Wallet(account);\n        });\n    }\n    static fromEncryptedJsonSync(json, password) {\n        return new Wallet(decryptJsonWalletSync(json, password));\n    }\n    static fromMnemonic(mnemonic, path, wordlist) {\n        if (!path) {\n            path = defaultPath;\n        }\n        return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n}\nexport function verifyMessage(message, signature) {\n    return recoverAddress(hashMessage(message), signature);\n}\nexport function verifyTypedData(domain, types, value, signature) {\n    return recoverAddress(_TypedDataEncoder.hash(domain, types, value), signature);\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}