{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _slicedToArray = require(\"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _get = require(\"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _toConsumableArray = require(\"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _objectSpread = require(\"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _inherits = require(\"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classCallCheck = require(\"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;\nvar code_1 = require(\"./code\");\nvar scope_1 = require(\"./scope\");\nvar code_2 = require(\"./code\");\nObject.defineProperty(exports, \"_\", {\n  enumerable: true,\n  get: function get() {\n    return code_2._;\n  }\n});\nObject.defineProperty(exports, \"str\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.str;\n  }\n});\nObject.defineProperty(exports, \"strConcat\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.strConcat;\n  }\n});\nObject.defineProperty(exports, \"nil\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.nil;\n  }\n});\nObject.defineProperty(exports, \"getProperty\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.getProperty;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.stringify;\n  }\n});\nObject.defineProperty(exports, \"regexpCode\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.regexpCode;\n  }\n});\nObject.defineProperty(exports, \"Name\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.Name;\n  }\n});\nvar scope_2 = require(\"./scope\");\nObject.defineProperty(exports, \"Scope\", {\n  enumerable: true,\n  get: function get() {\n    return scope_2.Scope;\n  }\n});\nObject.defineProperty(exports, \"ValueScope\", {\n  enumerable: true,\n  get: function get() {\n    return scope_2.ValueScope;\n  }\n});\nObject.defineProperty(exports, \"ValueScopeName\", {\n  enumerable: true,\n  get: function get() {\n    return scope_2.ValueScopeName;\n  }\n});\nObject.defineProperty(exports, \"varKinds\", {\n  enumerable: true,\n  get: function get() {\n    return scope_2.varKinds;\n  }\n});\nexports.operators = {\n  GT: new code_1._Code(\">\"),\n  GTE: new code_1._Code(\">=\"),\n  LT: new code_1._Code(\"<\"),\n  LTE: new code_1._Code(\"<=\"),\n  EQ: new code_1._Code(\"===\"),\n  NEQ: new code_1._Code(\"!==\"),\n  NOT: new code_1._Code(\"!\"),\n  OR: new code_1._Code(\"||\"),\n  AND: new code_1._Code(\"&&\"),\n  ADD: new code_1._Code(\"+\")\n};\nvar Node = /*#__PURE__*/function () {\n  function Node() {\n    _classCallCheck(this, Node);\n  }\n  _createClass(Node, [{\n    key: \"optimizeNodes\",\n    value: function optimizeNodes() {\n      return this;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(_names, _constants) {\n      return this;\n    }\n  }]);\n  return Node;\n}();\nvar Def = /*#__PURE__*/function (_Node) {\n  _inherits(Def, _Node);\n  var _super = _createSuper(Def);\n  function Def(varKind, name, rhs) {\n    var _this;\n    _classCallCheck(this, Def);\n    _this = _super.call(this);\n    _this.varKind = varKind;\n    _this.name = name;\n    _this.rhs = rhs;\n    return _this;\n  }\n  _createClass(Def, [{\n    key: \"render\",\n    value: function render(_ref) {\n      var es5 = _ref.es5,\n        _n = _ref._n;\n      var varKind = es5 ? scope_1.varKinds.var : this.varKind;\n      var rhs = this.rhs === undefined ? \"\" : \" = \".concat(this.rhs);\n      return \"\".concat(varKind, \" \").concat(this.name).concat(rhs, \";\") + _n;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      if (!names[this.name.str]) return;\n      if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};\n    }\n  }]);\n  return Def;\n}(Node);\nvar Assign = /*#__PURE__*/function (_Node2) {\n  _inherits(Assign, _Node2);\n  var _super2 = _createSuper(Assign);\n  function Assign(lhs, rhs, sideEffects) {\n    var _this2;\n    _classCallCheck(this, Assign);\n    _this2 = _super2.call(this);\n    _this2.lhs = lhs;\n    _this2.rhs = rhs;\n    _this2.sideEffects = sideEffects;\n    return _this2;\n  }\n  _createClass(Assign, [{\n    key: \"render\",\n    value: function render(_ref2) {\n      var _n = _ref2._n;\n      return \"\".concat(this.lhs, \" = \").concat(this.rhs, \";\") + _n;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects) return;\n      this.rhs = optimizeExpr(this.rhs, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      var names = this.lhs instanceof code_1.Name ? {} : _objectSpread({}, this.lhs.names);\n      return addExprNames(names, this.rhs);\n    }\n  }]);\n  return Assign;\n}(Node);\nvar AssignOp = /*#__PURE__*/function (_Assign) {\n  _inherits(AssignOp, _Assign);\n  var _super3 = _createSuper(AssignOp);\n  function AssignOp(lhs, op, rhs, sideEffects) {\n    var _this3;\n    _classCallCheck(this, AssignOp);\n    _this3 = _super3.call(this, lhs, rhs, sideEffects);\n    _this3.op = op;\n    return _this3;\n  }\n  _createClass(AssignOp, [{\n    key: \"render\",\n    value: function render(_ref3) {\n      var _n = _ref3._n;\n      return \"\".concat(this.lhs, \" \").concat(this.op, \"= \").concat(this.rhs, \";\") + _n;\n    }\n  }]);\n  return AssignOp;\n}(Assign);\nvar Label = /*#__PURE__*/function (_Node3) {\n  _inherits(Label, _Node3);\n  var _super4 = _createSuper(Label);\n  function Label(label) {\n    var _this4;\n    _classCallCheck(this, Label);\n    _this4 = _super4.call(this);\n    _this4.label = label;\n    _this4.names = {};\n    return _this4;\n  }\n  _createClass(Label, [{\n    key: \"render\",\n    value: function render(_ref4) {\n      var _n = _ref4._n;\n      return \"\".concat(this.label, \":\") + _n;\n    }\n  }]);\n  return Label;\n}(Node);\nvar Break = /*#__PURE__*/function (_Node4) {\n  _inherits(Break, _Node4);\n  var _super5 = _createSuper(Break);\n  function Break(label) {\n    var _this5;\n    _classCallCheck(this, Break);\n    _this5 = _super5.call(this);\n    _this5.label = label;\n    _this5.names = {};\n    return _this5;\n  }\n  _createClass(Break, [{\n    key: \"render\",\n    value: function render(_ref5) {\n      var _n = _ref5._n;\n      var label = this.label ? \" \".concat(this.label) : \"\";\n      return \"break\".concat(label, \";\") + _n;\n    }\n  }]);\n  return Break;\n}(Node);\nvar Throw = /*#__PURE__*/function (_Node5) {\n  _inherits(Throw, _Node5);\n  var _super6 = _createSuper(Throw);\n  function Throw(error) {\n    var _this6;\n    _classCallCheck(this, Throw);\n    _this6 = _super6.call(this);\n    _this6.error = error;\n    return _this6;\n  }\n  _createClass(Throw, [{\n    key: \"render\",\n    value: function render(_ref6) {\n      var _n = _ref6._n;\n      return \"throw \".concat(this.error, \";\") + _n;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return this.error.names;\n    }\n  }]);\n  return Throw;\n}(Node);\nvar AnyCode = /*#__PURE__*/function (_Node6) {\n  _inherits(AnyCode, _Node6);\n  var _super7 = _createSuper(AnyCode);\n  function AnyCode(code) {\n    var _this7;\n    _classCallCheck(this, AnyCode);\n    _this7 = _super7.call(this);\n    _this7.code = code;\n    return _this7;\n  }\n  _createClass(AnyCode, [{\n    key: \"render\",\n    value: function render(_ref7) {\n      var _n = _ref7._n;\n      return \"\".concat(this.code, \";\") + _n;\n    }\n  }, {\n    key: \"optimizeNodes\",\n    value: function optimizeNodes() {\n      return \"\".concat(this.code) ? this : undefined;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      this.code = optimizeExpr(this.code, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return this.code instanceof code_1._CodeOrName ? this.code.names : {};\n    }\n  }]);\n  return AnyCode;\n}(Node);\nvar ParentNode = /*#__PURE__*/function (_Node7) {\n  _inherits(ParentNode, _Node7);\n  var _super8 = _createSuper(ParentNode);\n  function ParentNode() {\n    var _this8;\n    var nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    _classCallCheck(this, ParentNode);\n    _this8 = _super8.call(this);\n    _this8.nodes = nodes;\n    return _this8;\n  }\n  _createClass(ParentNode, [{\n    key: \"render\",\n    value: function render(opts) {\n      return this.nodes.reduce(function (code, n) {\n        return code + n.render(opts);\n      }, \"\");\n    }\n  }, {\n    key: \"optimizeNodes\",\n    value: function optimizeNodes() {\n      var nodes = this.nodes;\n      var i = nodes.length;\n      while (i--) {\n        var n = nodes[i].optimizeNodes();\n        if (Array.isArray(n)) nodes.splice.apply(nodes, [i, 1].concat(_toConsumableArray(n)));else if (n) nodes[i] = n;else nodes.splice(i, 1);\n      }\n      return nodes.length > 0 ? this : undefined;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      var nodes = this.nodes;\n      var i = nodes.length;\n      while (i--) {\n        // iterating backwards improves 1-pass optimization\n        var n = nodes[i];\n        if (n.optimizeNames(names, constants)) continue;\n        subtractNames(names, n.names);\n        nodes.splice(i, 1);\n      }\n      return nodes.length > 0 ? this : undefined;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return this.nodes.reduce(function (names, n) {\n        return addNames(names, n.names);\n      }, {});\n    }\n  }]);\n  return ParentNode;\n}(Node);\nvar BlockNode = /*#__PURE__*/function (_ParentNode) {\n  _inherits(BlockNode, _ParentNode);\n  var _super9 = _createSuper(BlockNode);\n  function BlockNode() {\n    _classCallCheck(this, BlockNode);\n    return _super9.apply(this, arguments);\n  }\n  _createClass(BlockNode, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"{\" + opts._n + _get(_getPrototypeOf(BlockNode.prototype), \"render\", this).call(this, opts) + \"}\" + opts._n;\n    }\n  }]);\n  return BlockNode;\n}(ParentNode);\nvar Root = /*#__PURE__*/function (_ParentNode2) {\n  _inherits(Root, _ParentNode2);\n  var _super10 = _createSuper(Root);\n  function Root() {\n    _classCallCheck(this, Root);\n    return _super10.apply(this, arguments);\n  }\n  return _createClass(Root);\n}(ParentNode);\nvar Else = /*#__PURE__*/function (_BlockNode) {\n  _inherits(Else, _BlockNode);\n  var _super11 = _createSuper(Else);\n  function Else() {\n    _classCallCheck(this, Else);\n    return _super11.apply(this, arguments);\n  }\n  return _createClass(Else);\n}(BlockNode);\nElse.kind = \"else\";\nvar If = /*#__PURE__*/function (_BlockNode2) {\n  _inherits(If, _BlockNode2);\n  var _super12 = _createSuper(If);\n  function If(condition, nodes) {\n    var _this9;\n    _classCallCheck(this, If);\n    _this9 = _super12.call(this, nodes);\n    _this9.condition = condition;\n    return _this9;\n  }\n  _createClass(If, [{\n    key: \"render\",\n    value: function render(opts) {\n      var code = \"if(\".concat(this.condition, \")\") + _get(_getPrototypeOf(If.prototype), \"render\", this).call(this, opts);\n      if (this.else) code += \"else \" + this.else.render(opts);\n      return code;\n    }\n  }, {\n    key: \"optimizeNodes\",\n    value: function optimizeNodes() {\n      _get(_getPrototypeOf(If.prototype), \"optimizeNodes\", this).call(this);\n      var cond = this.condition;\n      if (cond === true) return this.nodes; // else is ignored here\n      var e = this.else;\n      if (e) {\n        var ns = e.optimizeNodes();\n        e = this.else = Array.isArray(ns) ? new Else(ns) : ns;\n      }\n      if (e) {\n        if (cond === false) return e instanceof If ? e : e.nodes;\n        if (this.nodes.length) return this;\n        return new If(not(cond), e instanceof If ? [e] : e.nodes);\n      }\n      if (cond === false || !this.nodes.length) return undefined;\n      return this;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      var _a;\n      this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n      if (!(_get(_getPrototypeOf(If.prototype), \"optimizeNames\", this).call(this, names, constants) || this.else)) return;\n      this.condition = optimizeExpr(this.condition, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      var names = _get(_getPrototypeOf(If.prototype), \"names\", this);\n      addExprNames(names, this.condition);\n      if (this.else) addNames(names, this.else.names);\n      return names;\n    }\n  }]);\n  return If;\n}(BlockNode);\nIf.kind = \"if\";\nvar For = /*#__PURE__*/function (_BlockNode3) {\n  _inherits(For, _BlockNode3);\n  var _super13 = _createSuper(For);\n  function For() {\n    _classCallCheck(this, For);\n    return _super13.apply(this, arguments);\n  }\n  return _createClass(For);\n}(BlockNode);\nFor.kind = \"for\";\nvar ForLoop = /*#__PURE__*/function (_For) {\n  _inherits(ForLoop, _For);\n  var _super14 = _createSuper(ForLoop);\n  function ForLoop(iteration) {\n    var _this10;\n    _classCallCheck(this, ForLoop);\n    _this10 = _super14.call(this);\n    _this10.iteration = iteration;\n    return _this10;\n  }\n  _createClass(ForLoop, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"for(\".concat(this.iteration, \")\") + _get(_getPrototypeOf(ForLoop.prototype), \"render\", this).call(this, opts);\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      if (!_get(_getPrototypeOf(ForLoop.prototype), \"optimizeNames\", this).call(this, names, constants)) return;\n      this.iteration = optimizeExpr(this.iteration, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return addNames(_get(_getPrototypeOf(ForLoop.prototype), \"names\", this), this.iteration.names);\n    }\n  }]);\n  return ForLoop;\n}(For);\nvar ForRange = /*#__PURE__*/function (_For2) {\n  _inherits(ForRange, _For2);\n  var _super15 = _createSuper(ForRange);\n  function ForRange(varKind, name, from, to) {\n    var _this11;\n    _classCallCheck(this, ForRange);\n    _this11 = _super15.call(this);\n    _this11.varKind = varKind;\n    _this11.name = name;\n    _this11.from = from;\n    _this11.to = to;\n    return _this11;\n  }\n  _createClass(ForRange, [{\n    key: \"render\",\n    value: function render(opts) {\n      var varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;\n      var name = this.name,\n        from = this.from,\n        to = this.to;\n      return \"for(\".concat(varKind, \" \").concat(name, \"=\").concat(from, \"; \").concat(name, \"<\").concat(to, \"; \").concat(name, \"++)\") + _get(_getPrototypeOf(ForRange.prototype), \"render\", this).call(this, opts);\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      var names = addExprNames(_get(_getPrototypeOf(ForRange.prototype), \"names\", this), this.from);\n      return addExprNames(names, this.to);\n    }\n  }]);\n  return ForRange;\n}(For);\nvar ForIter = /*#__PURE__*/function (_For3) {\n  _inherits(ForIter, _For3);\n  var _super16 = _createSuper(ForIter);\n  function ForIter(loop, varKind, name, iterable) {\n    var _this12;\n    _classCallCheck(this, ForIter);\n    _this12 = _super16.call(this);\n    _this12.loop = loop;\n    _this12.varKind = varKind;\n    _this12.name = name;\n    _this12.iterable = iterable;\n    return _this12;\n  }\n  _createClass(ForIter, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"for(\".concat(this.varKind, \" \").concat(this.name, \" \").concat(this.loop, \" \").concat(this.iterable, \")\") + _get(_getPrototypeOf(ForIter.prototype), \"render\", this).call(this, opts);\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      if (!_get(_getPrototypeOf(ForIter.prototype), \"optimizeNames\", this).call(this, names, constants)) return;\n      this.iterable = optimizeExpr(this.iterable, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return addNames(_get(_getPrototypeOf(ForIter.prototype), \"names\", this), this.iterable.names);\n    }\n  }]);\n  return ForIter;\n}(For);\nvar Func = /*#__PURE__*/function (_BlockNode4) {\n  _inherits(Func, _BlockNode4);\n  var _super17 = _createSuper(Func);\n  function Func(name, args, async) {\n    var _this13;\n    _classCallCheck(this, Func);\n    _this13 = _super17.call(this);\n    _this13.name = name;\n    _this13.args = args;\n    _this13.async = async;\n    return _this13;\n  }\n  _createClass(Func, [{\n    key: \"render\",\n    value: function render(opts) {\n      var _async = this.async ? \"async \" : \"\";\n      return \"\".concat(_async, \"function \").concat(this.name, \"(\").concat(this.args, \")\") + _get(_getPrototypeOf(Func.prototype), \"render\", this).call(this, opts);\n    }\n  }]);\n  return Func;\n}(BlockNode);\nFunc.kind = \"func\";\nvar Return = /*#__PURE__*/function (_ParentNode3) {\n  _inherits(Return, _ParentNode3);\n  var _super18 = _createSuper(Return);\n  function Return() {\n    _classCallCheck(this, Return);\n    return _super18.apply(this, arguments);\n  }\n  _createClass(Return, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"return \" + _get(_getPrototypeOf(Return.prototype), \"render\", this).call(this, opts);\n    }\n  }]);\n  return Return;\n}(ParentNode);\nReturn.kind = \"return\";\nvar Try = /*#__PURE__*/function (_BlockNode5) {\n  _inherits(Try, _BlockNode5);\n  var _super19 = _createSuper(Try);\n  function Try() {\n    _classCallCheck(this, Try);\n    return _super19.apply(this, arguments);\n  }\n  _createClass(Try, [{\n    key: \"render\",\n    value: function render(opts) {\n      var code = \"try\" + _get(_getPrototypeOf(Try.prototype), \"render\", this).call(this, opts);\n      if (this.catch) code += this.catch.render(opts);\n      if (this.finally) code += this.finally.render(opts);\n      return code;\n    }\n  }, {\n    key: \"optimizeNodes\",\n    value: function optimizeNodes() {\n      var _a, _b;\n      _get(_getPrototypeOf(Try.prototype), \"optimizeNodes\", this).call(this);\n      (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();\n      (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();\n      return this;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      var _a, _b;\n      _get(_getPrototypeOf(Try.prototype), \"optimizeNames\", this).call(this, names, constants);\n      (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n      (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      var names = _get(_getPrototypeOf(Try.prototype), \"names\", this);\n      if (this.catch) addNames(names, this.catch.names);\n      if (this.finally) addNames(names, this.finally.names);\n      return names;\n    }\n  }]);\n  return Try;\n}(BlockNode);\nvar Catch = /*#__PURE__*/function (_BlockNode6) {\n  _inherits(Catch, _BlockNode6);\n  var _super20 = _createSuper(Catch);\n  function Catch(error) {\n    var _this14;\n    _classCallCheck(this, Catch);\n    _this14 = _super20.call(this);\n    _this14.error = error;\n    return _this14;\n  }\n  _createClass(Catch, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"catch(\".concat(this.error, \")\") + _get(_getPrototypeOf(Catch.prototype), \"render\", this).call(this, opts);\n    }\n  }]);\n  return Catch;\n}(BlockNode);\nCatch.kind = \"catch\";\nvar Finally = /*#__PURE__*/function (_BlockNode7) {\n  _inherits(Finally, _BlockNode7);\n  var _super21 = _createSuper(Finally);\n  function Finally() {\n    _classCallCheck(this, Finally);\n    return _super21.apply(this, arguments);\n  }\n  _createClass(Finally, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"finally\" + _get(_getPrototypeOf(Finally.prototype), \"render\", this).call(this, opts);\n    }\n  }]);\n  return Finally;\n}(BlockNode);\nFinally.kind = \"finally\";\nvar CodeGen = /*#__PURE__*/function () {\n  function CodeGen(extScope) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, CodeGen);\n    this._values = {};\n    this._blockStarts = [];\n    this._constants = {};\n    this.opts = _objectSpread(_objectSpread({}, opts), {}, {\n      _n: opts.lines ? \"\\n\" : \"\"\n    });\n    this._extScope = extScope;\n    this._scope = new scope_1.Scope({\n      parent: extScope\n    });\n    this._nodes = [new Root()];\n  }\n  _createClass(CodeGen, [{\n    key: \"toString\",\n    value: function toString() {\n      return this._root.render(this.opts);\n    }\n    // returns unique name in the internal scope\n  }, {\n    key: \"name\",\n    value: function name(prefix) {\n      return this._scope.name(prefix);\n    }\n    // reserves unique name in the external scope\n  }, {\n    key: \"scopeName\",\n    value: function scopeName(prefix) {\n      return this._extScope.name(prefix);\n    }\n    // reserves unique name in the external scope and assigns value to it\n  }, {\n    key: \"scopeValue\",\n    value: function scopeValue(prefixOrName, value) {\n      var name = this._extScope.value(prefixOrName, value);\n      var vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());\n      vs.add(name);\n      return name;\n    }\n  }, {\n    key: \"getScopeValue\",\n    value: function getScopeValue(prefix, keyOrRef) {\n      return this._extScope.getValue(prefix, keyOrRef);\n    }\n    // return code that assigns values in the external scope to the names that are used internally\n    // (same names that were returned by gen.scopeName or gen.scopeValue)\n  }, {\n    key: \"scopeRefs\",\n    value: function scopeRefs(scopeName) {\n      return this._extScope.scopeRefs(scopeName, this._values);\n    }\n  }, {\n    key: \"scopeCode\",\n    value: function scopeCode() {\n      return this._extScope.scopeCode(this._values);\n    }\n  }, {\n    key: \"_def\",\n    value: function _def(varKind, nameOrPrefix, rhs, constant) {\n      var name = this._scope.toName(nameOrPrefix);\n      if (rhs !== undefined && constant) this._constants[name.str] = rhs;\n      this._leafNode(new Def(varKind, name, rhs));\n      return name;\n    }\n    // `const` declaration (`var` in es5 mode)\n  }, {\n    key: \"const\",\n    value: function _const(nameOrPrefix, rhs, _constant) {\n      return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);\n    }\n    // `let` declaration with optional assignment (`var` in es5 mode)\n  }, {\n    key: \"let\",\n    value: function _let(nameOrPrefix, rhs, _constant) {\n      return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);\n    }\n    // `var` declaration with optional assignment\n  }, {\n    key: \"var\",\n    value: function _var(nameOrPrefix, rhs, _constant) {\n      return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);\n    }\n    // assignment code\n  }, {\n    key: \"assign\",\n    value: function assign(lhs, rhs, sideEffects) {\n      return this._leafNode(new Assign(lhs, rhs, sideEffects));\n    }\n    // `+=` code\n  }, {\n    key: \"add\",\n    value: function add(lhs, rhs) {\n      return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));\n    }\n    // appends passed SafeExpr to code or executes Block\n  }, {\n    key: \"code\",\n    value: function code(c) {\n      if (typeof c == \"function\") c();else if (c !== code_1.nil) this._leafNode(new AnyCode(c));\n      return this;\n    }\n    // returns code for object literal for the passed argument list of key-value pairs\n  }, {\n    key: \"object\",\n    value: function object() {\n      var code = [\"{\"];\n      for (var _len = arguments.length, keyValues = new Array(_len), _key = 0; _key < _len; _key++) {\n        keyValues[_key] = arguments[_key];\n      }\n      for (var _i = 0, _keyValues = keyValues; _i < _keyValues.length; _i++) {\n        var _keyValues$_i = _slicedToArray(_keyValues[_i], 2),\n          key = _keyValues$_i[0],\n          value = _keyValues$_i[1];\n        if (code.length > 1) code.push(\",\");\n        code.push(key);\n        if (key !== value || this.opts.es5) {\n          code.push(\":\");\n          (0, code_1.addCodeArg)(code, value);\n        }\n      }\n      code.push(\"}\");\n      return new code_1._Code(code);\n    }\n    // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n  }, {\n    key: \"if\",\n    value: function _if(condition, thenBody, elseBody) {\n      this._blockNode(new If(condition));\n      if (thenBody && elseBody) {\n        this.code(thenBody).else().code(elseBody).endIf();\n      } else if (thenBody) {\n        this.code(thenBody).endIf();\n      } else if (elseBody) {\n        throw new Error('CodeGen: \"else\" body without \"then\" body');\n      }\n      return this;\n    }\n    // `else if` clause - invalid without `if` or after `else` clauses\n  }, {\n    key: \"elseIf\",\n    value: function elseIf(condition) {\n      return this._elseNode(new If(condition));\n    }\n    // `else` clause - only valid after `if` or `else if` clauses\n  }, {\n    key: \"else\",\n    value: function _else() {\n      return this._elseNode(new Else());\n    }\n    // end `if` statement (needed if gen.if was used only with condition)\n  }, {\n    key: \"endIf\",\n    value: function endIf() {\n      return this._endBlockNode(If, Else);\n    }\n  }, {\n    key: \"_for\",\n    value: function _for(node, forBody) {\n      this._blockNode(node);\n      if (forBody) this.code(forBody).endFor();\n      return this;\n    }\n    // a generic `for` clause (or statement if `forBody` is passed)\n  }, {\n    key: \"for\",\n    value: function _for(iteration, forBody) {\n      return this._for(new ForLoop(iteration), forBody);\n    }\n    // `for` statement for a range of values\n  }, {\n    key: \"forRange\",\n    value: function forRange(nameOrPrefix, from, to, forBody) {\n      var varKind = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let;\n      var name = this._scope.toName(nameOrPrefix);\n      return this._for(new ForRange(varKind, name, from, to), function () {\n        return forBody(name);\n      });\n    }\n    // `for-of` statement (in es5 mode replace with a normal for loop)\n  }, {\n    key: \"forOf\",\n    value: function forOf(nameOrPrefix, iterable, forBody) {\n      var _this15 = this;\n      var varKind = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : scope_1.varKinds.const;\n      var name = this._scope.toName(nameOrPrefix);\n      if (this.opts.es5) {\n        var arr = iterable instanceof code_1.Name ? iterable : this.var(\"_arr\", iterable);\n        return this.forRange(\"_i\", 0, (0, code_1._)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\", \".length\"])), arr), function (i) {\n          _this15.var(name, (0, code_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\", \"[\", \"]\"])), arr, i));\n          forBody(name);\n        });\n      }\n      return this._for(new ForIter(\"of\", varKind, name, iterable), function () {\n        return forBody(name);\n      });\n    }\n    // `for-in` statement.\n    // With option `ownProperties` replaced with a `for-of` loop for object keys\n  }, {\n    key: \"forIn\",\n    value: function forIn(nameOrPrefix, obj, forBody) {\n      var varKind = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const;\n      if (this.opts.ownProperties) {\n        return this.forOf(nameOrPrefix, (0, code_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"Object.keys(\", \")\"])), obj), forBody);\n      }\n      var name = this._scope.toName(nameOrPrefix);\n      return this._for(new ForIter(\"in\", varKind, name, obj), function () {\n        return forBody(name);\n      });\n    }\n    // end `for` loop\n  }, {\n    key: \"endFor\",\n    value: function endFor() {\n      return this._endBlockNode(For);\n    }\n    // `label` statement\n  }, {\n    key: \"label\",\n    value: function label(_label) {\n      return this._leafNode(new Label(_label));\n    }\n    // `break` statement\n  }, {\n    key: \"break\",\n    value: function _break(label) {\n      return this._leafNode(new Break(label));\n    }\n    // `return` statement\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      var node = new Return();\n      this._blockNode(node);\n      this.code(value);\n      if (node.nodes.length !== 1) throw new Error('CodeGen: \"return\" should have one node');\n      return this._endBlockNode(Return);\n    }\n    // `try` statement\n  }, {\n    key: \"try\",\n    value: function _try(tryBody, catchCode, finallyCode) {\n      if (!catchCode && !finallyCode) throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"');\n      var node = new Try();\n      this._blockNode(node);\n      this.code(tryBody);\n      if (catchCode) {\n        var error = this.name(\"e\");\n        this._currNode = node.catch = new Catch(error);\n        catchCode(error);\n      }\n      if (finallyCode) {\n        this._currNode = node.finally = new Finally();\n        this.code(finallyCode);\n      }\n      return this._endBlockNode(Catch, Finally);\n    }\n    // `throw` statement\n  }, {\n    key: \"throw\",\n    value: function _throw(error) {\n      return this._leafNode(new Throw(error));\n    }\n    // start self-balancing block\n  }, {\n    key: \"block\",\n    value: function block(body, nodeCount) {\n      this._blockStarts.push(this._nodes.length);\n      if (body) this.code(body).endBlock(nodeCount);\n      return this;\n    }\n    // end the current self-balancing block\n  }, {\n    key: \"endBlock\",\n    value: function endBlock(nodeCount) {\n      var len = this._blockStarts.pop();\n      if (len === undefined) throw new Error(\"CodeGen: not in self-balancing block\");\n      var toClose = this._nodes.length - len;\n      if (toClose < 0 || nodeCount !== undefined && toClose !== nodeCount) {\n        throw new Error(\"CodeGen: wrong number of nodes: \".concat(toClose, \" vs \").concat(nodeCount, \" expected\"));\n      }\n      this._nodes.length = len;\n      return this;\n    }\n    // `function` heading (or definition if funcBody is passed)\n  }, {\n    key: \"func\",\n    value: function func(name) {\n      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : code_1.nil;\n      var async = arguments.length > 2 ? arguments[2] : undefined;\n      var funcBody = arguments.length > 3 ? arguments[3] : undefined;\n      this._blockNode(new Func(name, args, async));\n      if (funcBody) this.code(funcBody).endFunc();\n      return this;\n    }\n    // end function definition\n  }, {\n    key: \"endFunc\",\n    value: function endFunc() {\n      return this._endBlockNode(Func);\n    }\n  }, {\n    key: \"optimize\",\n    value: function optimize() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      while (n-- > 0) {\n        this._root.optimizeNodes();\n        this._root.optimizeNames(this._root.names, this._constants);\n      }\n    }\n  }, {\n    key: \"_leafNode\",\n    value: function _leafNode(node) {\n      this._currNode.nodes.push(node);\n      return this;\n    }\n  }, {\n    key: \"_blockNode\",\n    value: function _blockNode(node) {\n      this._currNode.nodes.push(node);\n      this._nodes.push(node);\n    }\n  }, {\n    key: \"_endBlockNode\",\n    value: function _endBlockNode(N1, N2) {\n      var n = this._currNode;\n      if (n instanceof N1 || N2 && n instanceof N2) {\n        this._nodes.pop();\n        return this;\n      }\n      throw new Error(\"CodeGen: not in block \\\"\".concat(N2 ? \"\".concat(N1.kind, \"/\").concat(N2.kind) : N1.kind, \"\\\"\"));\n    }\n  }, {\n    key: \"_elseNode\",\n    value: function _elseNode(node) {\n      var n = this._currNode;\n      if (!(n instanceof If)) {\n        throw new Error('CodeGen: \"else\" without \"if\"');\n      }\n      this._currNode = n.else = node;\n      return this;\n    }\n  }, {\n    key: \"_root\",\n    get: function get() {\n      return this._nodes[0];\n    }\n  }, {\n    key: \"_currNode\",\n    get: function get() {\n      var ns = this._nodes;\n      return ns[ns.length - 1];\n    },\n    set: function set(node) {\n      var ns = this._nodes;\n      ns[ns.length - 1] = node;\n    }\n  }]);\n  return CodeGen;\n}();\nexports.CodeGen = CodeGen;\nfunction addNames(names, from) {\n  for (var n in from) {\n    names[n] = (names[n] || 0) + (from[n] || 0);\n  }\n  return names;\n}\nfunction addExprNames(names, from) {\n  return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;\n}\nfunction optimizeExpr(expr, names, constants) {\n  if (expr instanceof code_1.Name) return replaceName(expr);\n  if (!canOptimize(expr)) return expr;\n  return new code_1._Code(expr._items.reduce(function (items, c) {\n    if (c instanceof code_1.Name) c = replaceName(c);\n    if (c instanceof code_1._Code) items.push.apply(items, _toConsumableArray(c._items));else items.push(c);\n    return items;\n  }, []));\n  function replaceName(n) {\n    var c = constants[n.str];\n    if (c === undefined || names[n.str] !== 1) return n;\n    delete names[n.str];\n    return c;\n  }\n  function canOptimize(e) {\n    return e instanceof code_1._Code && e._items.some(function (c) {\n      return c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined;\n    });\n  }\n}\nfunction subtractNames(names, from) {\n  for (var n in from) {\n    names[n] = (names[n] || 0) - (from[n] || 0);\n  }\n}\nfunction not(x) {\n  return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : (0, code_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"!\", \"\"])), par(x));\n}\nexports.not = not;\nvar andCode = mappend(exports.operators.AND);\n// boolean AND (&&) expression with the passed arguments\nfunction and() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  return args.reduce(andCode);\n}\nexports.and = and;\nvar orCode = mappend(exports.operators.OR);\n// boolean OR (||) expression with the passed arguments\nfunction or() {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n  return args.reduce(orCode);\n}\nexports.or = or;\nfunction mappend(op) {\n  return function (x, y) {\n    return x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \" \", \" \", \"\"])), par(x), op, par(y));\n  };\n}\nfunction par(x) {\n  return x instanceof code_1.Name ? x : (0, code_1._)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"(\", \")\"])), x);\n}","map":{"version":3,"sources":["../../../lib/compile/codegen/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAEA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AAAQ,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,GAAA,EAAA;EAAA,UAAA,EAAA,IAAA;EAAA,GAAA,EAAA,eAAA;IAAA,OAAA,MAAA,CAAA,CAAC;EAAA;AAAA,CAAA,CAAA;AAAE,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,KAAA,EAAA;EAAA,UAAA,EAAA,IAAA;EAAA,GAAA,EAAA,eAAA;IAAA,OAAA,MAAA,CAAA,GAAG;EAAA;AAAA,CAAA,CAAA;AAAE,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,WAAA,EAAA;EAAA,UAAA,EAAA,IAAA;EAAA,GAAA,EAAA,eAAA;IAAA,OAAA,MAAA,CAAA,SAAS;EAAA;AAAA,CAAA,CAAA;AAAE,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,KAAA,EAAA;EAAA,UAAA,EAAA,IAAA;EAAA,GAAA,EAAA,eAAA;IAAA,OAAA,MAAA,CAAA,GAAG;EAAA;AAAA,CAAA,CAAA;AAAE,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,aAAA,EAAA;EAAA,UAAA,EAAA,IAAA;EAAA,GAAA,EAAA,eAAA;IAAA,OAAA,MAAA,CAAA,WAAW;EAAA;AAAA,CAAA,CAAA;AAAE,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,WAAA,EAAA;EAAA,UAAA,EAAA,IAAA;EAAA,GAAA,EAAA,eAAA;IAAA,OAAA,MAAA,CAAA,SAAS;EAAA;AAAA,CAAA,CAAA;AAAE,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA;EAAA,UAAA,EAAA,IAAA;EAAA,GAAA,EAAA,eAAA;IAAA,OAAA,MAAA,CAAA,UAAU;EAAA;AAAA,CAAA,CAAA;AAAE,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,MAAA,EAAA;EAAA,UAAA,EAAA,IAAA;EAAA,GAAA,EAAA,eAAA;IAAA,OAAA,MAAA,CAAA,IAAI;EAAA;AAAA,CAAA,CAAA;AACxE,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAAQ,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,OAAA,EAAA;EAAA,UAAA,EAAA,IAAA;EAAA,GAAA,EAAA,eAAA;IAAA,OAAA,OAAA,CAAA,KAAK;EAAA;AAAA,CAAA,CAAA;AAAc,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA;EAAA,UAAA,EAAA,IAAA;EAAA,GAAA,EAAA,eAAA;IAAA,OAAA,OAAA,CAAA,UAAU;EAAA;AAAA,CAAA,CAAA;AAAE,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,gBAAA,EAAA;EAAA,UAAA,EAAA,IAAA;EAAA,GAAA,EAAA,eAAA;IAAA,OAAA,OAAA,CAAA,cAAc;EAAA;AAAA,CAAA,CAAA;AAAkB,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,UAAA,EAAA;EAAA,UAAA,EAAA,IAAA;EAAA,GAAA,EAAA,eAAA;IAAA,OAAA,OAAA,CAAA,QAAQ;EAAA;AAAA,CAAA,CAAA;AAQlE,OAAA,CAAA,SAAS,GAAG;EACvB,EAAE,EAAE,IAAI,MAAA,CAAA,KAAK,CAAC,GAAG,CAAC;EAClB,GAAG,EAAE,IAAI,MAAA,CAAA,KAAK,CAAC,IAAI,CAAC;EACpB,EAAE,EAAE,IAAI,MAAA,CAAA,KAAK,CAAC,GAAG,CAAC;EAClB,GAAG,EAAE,IAAI,MAAA,CAAA,KAAK,CAAC,IAAI,CAAC;EACpB,EAAE,EAAE,IAAI,MAAA,CAAA,KAAK,CAAC,KAAK,CAAC;EACpB,GAAG,EAAE,IAAI,MAAA,CAAA,KAAK,CAAC,KAAK,CAAC;EACrB,GAAG,EAAE,IAAI,MAAA,CAAA,KAAK,CAAC,GAAG,CAAC;EACnB,EAAE,EAAE,IAAI,MAAA,CAAA,KAAK,CAAC,IAAI,CAAC;EACnB,GAAG,EAAE,IAAI,MAAA,CAAA,KAAK,CAAC,IAAI,CAAC;EACpB,GAAG,EAAE,IAAI,MAAA,CAAA,KAAK,CAAC,GAAG;CACnB;AAAA,IAEc,IAAI;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAGjB,yBAAa;MACX,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,uBAAc,MAAiB,EAAE,UAAqB,EAAA;MACpD,OAAO,IAAI;IACb;EAAC;EAAA;AAAA;AAAA,IAOG,GAAI;EAAA;EAAA;EACR,aAA6B,OAAa,EAAmB,IAAU,EAAU,GAAc,EAAA;IAAA;IAAA;IAC7F;IAD2B,MAAA,OAAO,GAAP,OAAO;IAAyB,MAAA,IAAI,GAAJ,IAAI;IAAgB,MAAA,GAAG,GAAH,GAAG;IAAW;EAE/F;EAAC;IAAA;IAAA,OAED,sBAA2B;MAAA,IAAnB,GAAG,QAAH,GAAG;QAAE,EAAE,QAAF,EAAE;MACb,IAAM,OAAO,GAAG,GAAG,GAAG,OAAA,CAAA,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO;MACjD,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,KAAK,SAAS,GAAG,EAAE,gBAAS,IAAI,CAAC,GAAG,CAAE;MAC1D,OAAO,UAAG,OAAO,cAAI,IAAI,CAAC,IAAI,SAAG,GAAG,SAAM,EAAE;IAC9C;EAAC;IAAA;IAAA,OAED,uBAAc,KAAgB,EAAE,SAAoB,EAAA;MAClD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;MAC3B,IAAI,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,SAAS,CAAC;MACjE,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,KAED,eAAS;MACP,OAAO,IAAI,CAAC,GAAG,YAAY,MAAA,CAAA,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,CAAA,CAAE;IAC9D;EAAC;EAAA;AAAA,EAnBe,IAAI;AAAA,IAsBhB,MAAO;EAAA;EAAA;EACX,gBAAqB,GAAS,EAAS,GAAa,EAAmB,WAAqB,EAAA;IAAA;IAAA;IAC1F;IADmB,OAAA,GAAG,GAAH,GAAG;IAAe,OAAA,GAAG,GAAH,GAAG;IAA6B,OAAA,WAAW,GAAX,WAAW;IAAU;EAE5F;EAAC;IAAA;IAAA,OAED,uBAAsB;MAAA,IAAd,EAAE,SAAF,EAAE;MACR,OAAO,UAAG,IAAI,CAAC,GAAG,gBAAM,IAAI,CAAC,GAAG,SAAM,EAAE;IAC1C;EAAC;IAAA;IAAA,OAED,uBAAc,KAAgB,EAAE,SAAoB,EAAA;MAClD,IAAI,IAAI,CAAC,GAAG,YAAY,MAAA,CAAA,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;MAC3E,IAAI,CAAC,GAAG,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,SAAS,CAAC;MACnD,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,KAED,eAAS;MACP,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,YAAY,MAAA,CAAA,IAAI,GAAG,CAAA,CAAE,qBAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;MACjE,OAAO,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC;IACtC;EAAC;EAAA;AAAA,EAlBkB,IAAI;AAAA,IAqBnB,QAAS;EAAA;EAAA;EACb,kBAAY,GAAS,EAAmB,EAAQ,EAAE,GAAa,EAAE,WAAqB,EAAA;IAAA;IAAA;IACpF,4BAAM,GAAG,EAAE,GAAG,EAAE,WAAW;IADW,OAAA,EAAE,GAAF,EAAE;IAAM;EAEhD;EAAC;IAAA;IAAA,OAED,uBAAsB;MAAA,IAAd,EAAE,SAAF,EAAE;MACR,OAAO,UAAG,IAAI,CAAC,GAAG,cAAI,IAAI,CAAC,EAAE,eAAK,IAAI,CAAC,GAAG,SAAM,EAAE;IACpD;EAAC;EAAA;AAAA,EAPoB,MAAM;AAAA,IAUvB,KAAM;EAAA;EAAA;EAEV,eAAqB,KAAW,EAAA;IAAA;IAAA;IAC9B;IADmB,OAAA,KAAK,GAAL,KAAK;IADjB,OAAA,KAAK,GAAc,CAAA,CAAE;IAAA;EAG9B;EAAC;IAAA;IAAA,OAED,uBAAsB;MAAA,IAAd,EAAE,SAAF,EAAE;MACR,OAAO,UAAG,IAAI,CAAC,KAAK,SAAM,EAAE;IAC9B;EAAC;EAAA;AAAA,EARiB,IAAI;AAAA,IAWlB,KAAM;EAAA;EAAA;EAEV,eAAqB,KAAY,EAAA;IAAA;IAAA;IAC/B;IADmB,OAAA,KAAK,GAAL,KAAK;IADjB,OAAA,KAAK,GAAc,CAAA,CAAE;IAAA;EAG9B;EAAC;IAAA;IAAA,OAED,uBAAsB;MAAA,IAAd,EAAE,SAAF,EAAE;MACR,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,cAAO,IAAI,CAAC,KAAK,IAAK,EAAE;MAChD,OAAO,eAAQ,KAAK,SAAM,EAAE;IAC9B;EAAC;EAAA;AAAA,EATiB,IAAI;AAAA,IAYlB,KAAM;EAAA;EAAA;EACV,eAAqB,KAAW,EAAA;IAAA;IAAA;IAC9B;IADmB,OAAA,KAAK,GAAL,KAAK;IAAM;EAEhC;EAAC;IAAA;IAAA,OAED,uBAAsB;MAAA,IAAd,EAAE,SAAF,EAAE;MACR,OAAO,gBAAS,IAAI,CAAC,KAAK,SAAM,EAAE;IACpC;EAAC;IAAA;IAAA,KAED,eAAS;MACP,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK;IACzB;EAAC;EAAA;AAAA,EAXiB,IAAI;AAAA,IAclB,OAAQ;EAAA;EAAA;EACZ,iBAAoB,IAAc,EAAA;IAAA;IAAA;IAChC;IADkB,OAAA,IAAI,GAAJ,IAAI;IAAU;EAElC;EAAC;IAAA;IAAA,OAED,uBAAsB;MAAA,IAAd,EAAE,SAAF,EAAE;MACR,OAAO,UAAG,IAAI,CAAC,IAAI,SAAM,EAAE;IAC7B;EAAC;IAAA;IAAA,OAED,yBAAa;MACX,OAAO,UAAG,IAAI,CAAC,IAAI,IAAK,IAAI,GAAG,SAAS;IAC1C;EAAC;IAAA;IAAA,OAED,uBAAc,KAAgB,EAAE,SAAoB,EAAA;MAClD,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC;MACrD,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,KAED,eAAS;MACP,OAAO,IAAI,CAAC,IAAI,YAAY,MAAA,CAAA,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAAA,CAAE;IAChE;EAAC;EAAA;AAAA,EApBmB,IAAI;AAAA,IAuBX,UAAW;EAAA;EAAA;EACxB,sBAA4C;IAAA;IAAA,IAAvB,KAAA,uEAAqB,EAAE;IAAA;IAC1C;IADmB,OAAA,KAAK,GAAL,KAAK;IAAkB;EAE5C;EAAC;IAAA;IAAA,OAED,gBAAO,IAAe,EAAA;MACpB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,CAAC;QAAA,OAAK,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;MAAA,GAAE,EAAE,CAAC;IAClE;EAAC;IAAA;IAAA,OAED,yBAAa;MACX,IAAO,KAAK,GAAI,IAAI,CAAb,KAAK;MACZ,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM;MACpB,OAAO,CAAC,EAAE,EAAE;QACV,IAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE;QAClC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,OAAZ,KAAK,GAAQ,CAAC,EAAE,CAAC,4BAAK,CAAC,GAAC,CAAA,KACzC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA,KACnB,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;MACxB;MACD,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,GAAG,SAAS;IAC5C;EAAC;IAAA;IAAA,OAED,uBAAc,KAAgB,EAAE,SAAoB,EAAA;MAClD,IAAO,KAAK,GAAI,IAAI,CAAb,KAAK;MACZ,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM;MACpB,OAAO,CAAC,EAAE,EAAE;QACV;QACA,IAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;QAClB,IAAI,CAAC,CAAC,aAAa,CAAC,KAAK,EAAE,SAAS,CAAC,EAAE;QACvC,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC;QAC7B,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;MACnB;MACD,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,GAAG,SAAS;IAC5C;EAAC;IAAA;IAAA,KAED,eAAS;MACP,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,KAAgB,EAAE,CAAC;QAAA,OAAK,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC;MAAA,GAAE,CAAA,CAAE,CAAC;IACjF;EAAC;EAAA;AAAA,EApC+B,IAAI;AAAA,IA2CvB,SAAU;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACvB,gBAAO,IAAe,EAAA;MACpB,OAAO,GAAG,GAAG,IAAI,CAAC,EAAE,yEAAgB,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE;IAC3D;EAAC;EAAA;AAAA,EAH8B,UAAU;AAAA,IAMrC,IAAK;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;AAAA,EAAQ,UAAU;AAAA,IAEvB,IAAK;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;AAAA,EAAQ,SAAS;AACV,IAAA,CAAA,IAAI,GAAG,MAAM;AAAA,IAGzB,EAAG;EAAA;EAAA;EAGP,YAAoB,SAAyB,EAAE,KAAmB,EAAA;IAAA;IAAA;IAChE,6BAAM,KAAK;IADO,OAAA,SAAS,GAAT,SAAS;IAAgB;EAE7C;EAAC;IAAA;IAAA,OAED,gBAAO,IAAe,EAAA;MACpB,IAAI,IAAI,GAAG,aAAM,IAAI,CAAC,SAAS,wEAAmB,IAAI,CAAC;MACvD,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;MACvD,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,yBAAa;MACX;MACA,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS;MAC3B,IAAI,IAAI,KAAK,IAAI,EAAE,OAAO,IAAI,CAAC,KAAK,CAAA,CAAC;MACrC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI;MACjB,IAAI,CAAC,EAAE;QACL,IAAM,EAAE,GAAG,CAAC,CAAC,aAAa,EAAE;QAC5B,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,GAAI,EAAuB;MAC5E;MACD,IAAI,CAAC,EAAE;QACL,IAAI,IAAI,KAAK,KAAK,EAAE,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK;QACxD,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,IAAI;QAClC,OAAO,IAAI,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;MAC1D;MACD,IAAI,IAAI,KAAK,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,SAAS;MAC1D,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,uBAAc,KAAgB,EAAE,SAAoB,EAAA;;MAClD,IAAI,CAAC,IAAI,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,aAAa,CAAC,KAAK,EAAE,SAAS,CAAC;MACtD,IAAI,EAAE,sEAAoB,KAAK,EAAE,SAAS,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE;MAC3D,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;MAC/D,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,KAED,eAAS;MACP,IAAM,KAAK,qDAAc;MACzB,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC;MACnC,IAAI,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;MAC/C,OAAO,KAAK;IACd;EAAC;EAAA;AAAA,EA3Cc,SAAS;AACR,EAAA,CAAA,IAAI,GAAG,IAAI;AAAA,IAiDd,GAAI;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;AAAA,EAAQ,SAAS;AAClB,GAAA,CAAA,IAAI,GAAG,KAAK;AAAA,IAGxB,OAAQ;EAAA;EAAA;EACZ,iBAAoB,SAAe,EAAA;IAAA;IAAA;IACjC;IADkB,QAAA,SAAS,GAAT,SAAS;IAAM;EAEnC;EAAC;IAAA;IAAA,OAED,gBAAO,IAAe,EAAA;MACpB,OAAO,cAAO,IAAI,CAAC,SAAS,6EAAmB,IAAI,CAAC;IACtD;EAAC;IAAA;IAAA,OAED,uBAAc,KAAgB,EAAE,SAAoB,EAAA;MAClD,IAAI,4EAAqB,KAAK,EAAE,SAAS,CAAC,EAAE;MAC5C,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;MAC/D,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,KAED,eAAS;MACP,OAAO,QAAQ,0DAAc,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;IACpD;EAAC;EAAA;AAAA,EAjBmB,GAAG;AAAA,IAoBnB,QAAS;EAAA;EAAA;EACb,kBACmB,OAAa,EACb,IAAU,EACV,IAAc,EACd,EAAY,EAAA;IAAA;IAAA;IAE7B;IALiB,QAAA,OAAO,GAAP,OAAO;IACP,QAAA,IAAI,GAAJ,IAAI;IACJ,QAAA,IAAI,GAAJ,IAAI;IACJ,QAAA,EAAE,GAAF,EAAE;IAAU;EAG/B;EAAC;IAAA;IAAA,OAED,gBAAO,IAAe,EAAA;MACpB,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,GAAG,OAAA,CAAA,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO;MACtD,IAAO,IAAI,GAAc,IAAI,CAAtB,IAAI;QAAE,IAAI,GAAQ,IAAI,CAAhB,IAAI;QAAE,EAAE,GAAI,IAAI,CAAV,EAAE;MACrB,OAAO,cAAO,OAAO,cAAI,IAAI,cAAI,IAAI,eAAK,IAAI,cAAI,EAAE,eAAK,IAAI,gFAAqB,IAAI,CAAC;IACzF;EAAC;IAAA;IAAA,KAED,eAAS;MACP,IAAM,KAAK,GAAG,YAAY,2DAAc,IAAI,CAAC,IAAI,CAAC;MAClD,OAAO,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC;IACrC;EAAC;EAAA;AAAA,EAnBoB,GAAG;AAAA,IAsBpB,OAAQ;EAAA;EAAA;EACZ,iBACmB,IAAiB,EACjB,OAAa,EACb,IAAU,EACnB,QAAc,EAAA;IAAA;IAAA;IAEtB;IALiB,QAAA,IAAI,GAAJ,IAAI;IACJ,QAAA,OAAO,GAAP,OAAO;IACP,QAAA,IAAI,GAAJ,IAAI;IACb,QAAA,QAAQ,GAAR,QAAQ;IAAM;EAGxB;EAAC;IAAA;IAAA,OAED,gBAAO,IAAe,EAAA;MACpB,OAAO,cAAO,IAAI,CAAC,OAAO,cAAI,IAAI,CAAC,IAAI,cAAI,IAAI,CAAC,IAAI,cAAI,IAAI,CAAC,QAAQ,6EAAmB,IAAI,CAAC;IAC/F;EAAC;IAAA;IAAA,OAED,uBAAc,KAAgB,EAAE,SAAoB,EAAA;MAClD,IAAI,4EAAqB,KAAK,EAAE,SAAS,CAAC,EAAE;MAC5C,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,CAAC;MAC7D,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,KAED,eAAS;MACP,OAAO,QAAQ,0DAAc,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;IACnD;EAAC;EAAA;AAAA,EAtBmB,GAAG;AAAA,IAyBnB,IAAK;EAAA;EAAA;EAET,cAAmB,IAAU,EAAS,IAAU,EAAS,KAAe,EAAA;IAAA;IAAA;IACtE;IADiB,QAAA,IAAI,GAAJ,IAAI;IAAe,QAAA,IAAI,GAAJ,IAAI;IAAe,QAAA,KAAK,GAAL,KAAK;IAAU;EAExE;EAAC;IAAA;IAAA,OAED,gBAAO,IAAe,EAAA;MACpB,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,GAAG,QAAQ,GAAG,EAAE;MACzC,OAAO,UAAG,MAAM,sBAAY,IAAI,CAAC,IAAI,cAAI,IAAI,CAAC,IAAI,0EAAmB,IAAI,CAAC;IAC5E;EAAC;EAAA;AAAA,EATgB,SAAS;AACV,IAAA,CAAA,IAAI,GAAG,MAAM;AAAA,IAWzB,MAAO;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAGX,gBAAO,IAAe,EAAA;MACpB,OAAO,SAAS,sEAAgB,IAAI,CAAC;IACvC;EAAC;EAAA;AAAA,EALkB,UAAU;AACb,MAAA,CAAA,IAAI,GAAG,QAAQ;AAAA,IAO3B,GAAI;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAIR,gBAAO,IAAe,EAAA;MACpB,IAAI,IAAI,GAAG,KAAK,mEAAgB,IAAI,CAAC;MACrC,IAAI,IAAI,CAAC,KAAK,EAAE,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;MAC/C,IAAI,IAAI,CAAC,OAAO,EAAE,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC;MACnD,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,yBAAa;;MACX;MACA,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,aAAa,EAAuB;MAChD,CAAA,EAAA,GAAA,IAAI,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,aAAa,EAAyB;MACpD,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,uBAAc,KAAgB,EAAE,SAAoB,EAAA;;MAClD,uEAAoB,KAAK,EAAE,SAAS;MACpC,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,aAAa,CAAC,KAAK,EAAE,SAAS,CAAC;MAC3C,CAAA,EAAA,GAAA,IAAI,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,aAAa,CAAC,KAAK,EAAE,SAAS,CAAC;MAC7C,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,KAED,eAAS;MACP,IAAM,KAAK,sDAAc;MACzB,IAAI,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;MACjD,IAAI,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;MACrD,OAAO,KAAK;IACd;EAAC;EAAA;AAAA,EA9Be,SAAS;AAAA,IAqCrB,KAAM;EAAA;EAAA;EAEV,eAAqB,KAAW,EAAA;IAAA;IAAA;IAC9B;IADmB,QAAA,KAAK,GAAL,KAAK;IAAM;EAEhC;EAAC;IAAA;IAAA,OAED,gBAAO,IAAe,EAAA;MACpB,OAAO,gBAAS,IAAI,CAAC,KAAK,2EAAmB,IAAI,CAAC;IACpD;EAAC;EAAA;AAAA,EARiB,SAAS;AACX,KAAA,CAAA,IAAI,GAAG,OAAO;AAAA,IAU1B,OAAQ;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAEZ,gBAAO,IAAe,EAAA;MACpB,OAAO,SAAS,uEAAgB,IAAI,CAAC;IACvC;EAAC;EAAA;AAAA,EAJmB,SAAS;AACb,OAAA,CAAA,IAAI,GAAG,SAAS;AAAA,IAiCrB,OAAO;EASlB,iBAAY,QAAoB,EAA2B;IAAA,IAAzB,IAAA,uEAAuB,CAAA,CAAE;IAAA;IANlD,IAAA,CAAA,OAAO,GAAmB,CAAA,CAAE;IAEpB,IAAA,CAAA,YAAY,GAAa,EAAE;IAC3B,IAAA,CAAA,UAAU,GAAc,CAAA,CAAE;IAIzC,IAAI,CAAC,IAAI,mCAAO,IAAI;MAAE,EAAE,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG;IAAE,EAAC;IACjD,IAAI,CAAC,SAAS,GAAG,QAAQ;IACzB,IAAI,CAAC,MAAM,GAAG,IAAI,OAAA,CAAA,KAAK,CAAC;MAAC,MAAM,EAAE;IAAQ,CAAC,CAAC;IAC3C,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;EAC5B;EAAC;IAAA;IAAA,OAED,oBAAQ;MACN,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACrC;IAEA;EAAA;IAAA;IAAA,OACA,cAAK,MAAc,EAAA;MACjB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACjC;IAEA;EAAA;IAAA;IAAA,OACA,mBAAU,MAAc,EAAA;MACtB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;IACpC;IAEA;EAAA;IAAA;IAAA,OACA,oBAAW,YAAqC,EAAE,KAAgB,EAAA;MAChE,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC;MACtD,IAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;MAC/E,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC;MACZ,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,uBAAc,MAAc,EAAE,QAAiB,EAAA;MAC7C,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC;IAClD;IAEA;IACA;EAAA;IAAA;IAAA,OACA,mBAAU,SAAe,EAAA;MACvB,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC;IAC1D;EAAC;IAAA;IAAA,OAED,qBAAS;MACP,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC;IAC/C;EAAC;IAAA;IAAA,OAEO,cACN,OAAa,EACb,YAA2B,EAC3B,GAAc,EACd,QAAkB,EAAA;MAElB,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC;MAC7C,IAAI,GAAG,KAAK,SAAS,IAAI,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;MAClE,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;MAC3C,OAAO,IAAI;IACb;IAEA;EAAA;IAAA;IAAA,OACA,gBAAM,YAA2B,EAAE,GAAa,EAAE,SAAmB,EAAA;MACnE,OAAO,IAAI,CAAC,IAAI,CAAC,OAAA,CAAA,QAAQ,CAAC,KAAK,EAAE,YAAY,EAAE,GAAG,EAAE,SAAS,CAAC;IAChE;IAEA;EAAA;IAAA;IAAA,OACA,cAAI,YAA2B,EAAE,GAAc,EAAE,SAAmB,EAAA;MAClE,OAAO,IAAI,CAAC,IAAI,CAAC,OAAA,CAAA,QAAQ,CAAC,GAAG,EAAE,YAAY,EAAE,GAAG,EAAE,SAAS,CAAC;IAC9D;IAEA;EAAA;IAAA;IAAA,OACA,cAAI,YAA2B,EAAE,GAAc,EAAE,SAAmB,EAAA;MAClE,OAAO,IAAI,CAAC,IAAI,CAAC,OAAA,CAAA,QAAQ,CAAC,GAAG,EAAE,YAAY,EAAE,GAAG,EAAE,SAAS,CAAC;IAC9D;IAEA;EAAA;IAAA;IAAA,OACA,gBAAO,GAAS,EAAE,GAAa,EAAE,WAAqB,EAAA;MACpD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,WAAW,CAAC,CAAC;IAC1D;IAEA;EAAA;IAAA;IAAA,OACA,aAAI,GAAS,EAAE,GAAa,EAAA;MAC1B,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,QAAQ,CAAC,GAAG,EAAE,OAAA,CAAA,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC9D;IAEA;EAAA;IAAA;IAAA,OACA,cAAK,CAAmB,EAAA;MACtB,IAAI,OAAO,CAAC,IAAI,UAAU,EAAE,CAAC,EAAE,CAAA,KAC1B,IAAI,CAAC,KAAK,MAAA,CAAA,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;MAClD,OAAO,IAAI;IACb;IAEA;EAAA;IAAA;IAAA,OACA,kBAAyD;MACvD,IAAM,IAAI,GAAe,CAAC,GAAG,CAAC;MAAA,kCADtB,SAA+C;QAA/C,SAA+C;MAAA;MAEvD,8BAA2B,SAAS,gCAAE;QAAjC;UAAO,GAAG;UAAE,KAAK;QACpB,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;QACnC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;QACd,IAAI,GAAG,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;UAClC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;UACd,CAAA,CAAA,EAAA,MAAA,CAAA,UAAU,EAAC,IAAI,EAAE,KAAK,CAAC;QACxB;MACF;MACD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;MACd,OAAO,IAAI,MAAA,CAAA,KAAK,CAAC,IAAI,CAAC;IACxB;IAEA;EAAA;IAAA;IAAA,OACA,aAAG,SAAyB,EAAE,QAAgB,EAAE,QAAgB,EAAA;MAC9D,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,SAAS,CAAC,CAAC;MAElC,IAAI,QAAQ,IAAI,QAAQ,EAAE;QACxB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE;OAClD,MAAM,IAAI,QAAQ,EAAE;QACnB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE;OAC5B,MAAM,IAAI,QAAQ,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC;MAC5D;MACD,OAAO,IAAI;IACb;IAEA;EAAA;IAAA;IAAA,OACA,gBAAO,SAAyB,EAAA;MAC9B,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,SAAS,CAAC,CAAC;IAC1C;IAEA;EAAA;IAAA;IAAA,OACA,iBAAI;MACF,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE,CAAC;IACnC;IAEA;EAAA;IAAA;IAAA,OACA,iBAAK;MACH,OAAO,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,IAAI,CAAC;IACrC;EAAC;IAAA;IAAA,OAEO,cAAK,IAAS,EAAE,OAAe,EAAA;MACrC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;MACrB,IAAI,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE;MACxC,OAAO,IAAI;IACb;IAEA;EAAA;IAAA;IAAA,OACA,cAAI,SAAe,EAAE,OAAe,EAAA;MAClC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE,OAAO,CAAC;IACnD;IAEA;EAAA;IAAA;IAAA,OACA,kBACE,YAA2B,EAC3B,IAAc,EACd,EAAY,EACZ,OAA8B,EAC6B;MAAA,IAA3D,OAAA,uEAAgB,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,OAAA,CAAA,QAAQ,CAAC,GAAG,GAAG,OAAA,CAAA,QAAQ,CAAC,GAAG;MAE3D,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC;MAC7C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE;QAAA,OAAM,OAAO,CAAC,IAAI,CAAC;MAAA,EAAC;IAC9E;IAEA;EAAA;IAAA;IAAA,OACA,eACE,YAA2B,EAC3B,QAAc,EACd,OAA6B,EACC;MAAA;MAAA,IAA9B,OAAA,uEAAgB,OAAA,CAAA,QAAQ,CAAC,KAAK;MAE9B,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC;MAC7C,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;QACjB,IAAM,GAAG,GAAG,QAAQ,YAAY,MAAA,CAAA,IAAI,GAAG,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC;QAC5E,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,GAAE,CAAA,EAAA,MAAA,CAAA,CAAC,kFAAG,GAAG,GAAW,UAAC,CAAC,EAAI;UACpD,OAAI,CAAC,GAAG,CAAC,IAAI,GAAE,CAAA,EAAA,MAAA,CAAA,CAAC,mFAAG,GAAG,EAAI,CAAC,EAAI;UAC/B,OAAO,CAAC,IAAI,CAAC;QACf,CAAC,CAAC;MACH;MACD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAE;QAAA,OAAM,OAAO,CAAC,IAAI,CAAC;MAAA,EAAC;IACnF;IAEA;IACA;EAAA;IAAA;IAAA,OACA,eACE,YAA2B,EAC3B,GAAS,EACT,OAA6B,EACgC;MAAA,IAA7D,OAAA,uEAAgB,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,OAAA,CAAA,QAAQ,CAAC,GAAG,GAAG,OAAA,CAAA,QAAQ,CAAC,KAAK;MAE7D,IAAI,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;QAC3B,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,GAAE,CAAA,EAAA,MAAA,CAAA,CAAC,0FAAe,GAAG,GAAK,OAAO,CAAC;MACjE;MACD,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC;MAC7C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,CAAC,EAAE;QAAA,OAAM,OAAO,CAAC,IAAI,CAAC;MAAA,EAAC;IAC9E;IAEA;EAAA;IAAA;IAAA,OACA,kBAAM;MACJ,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC;IAChC;IAEA;EAAA;IAAA;IAAA,OACA,eAAM,MAAW,EAAA;MACf,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,MAAK,CAAC,CAAC;IACzC;IAEA;EAAA;IAAA;IAAA,OACA,gBAAM,KAAY,EAAA;MAChB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;IACzC;IAEA;EAAA;IAAA;IAAA,OACA,iBAAO,KAAuB,EAAA;MAC5B,IAAM,IAAI,GAAG,IAAI,MAAM,EAAE;MACzB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;MACrB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;MAChB,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC;MACtF,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;IACnC;IAEA;EAAA;IAAA;IAAA,OACA,cAAI,OAAc,EAAE,SAA6B,EAAE,WAAmB,EAAA;MACpE,IAAI,CAAC,SAAS,IAAI,CAAC,WAAW,EAAE,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC;MAC/F,IAAM,IAAI,GAAG,IAAI,GAAG,EAAE;MACtB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;MACrB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;MAClB,IAAI,SAAS,EAAE;QACb,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC;QAC9C,SAAS,CAAC,KAAK,CAAC;MACjB;MACD,IAAI,WAAW,EAAE;QACf,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,EAAE;QAC7C,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;MACvB;MACD,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC;IAC3C;IAEA;EAAA;IAAA;IAAA,OACA,gBAAM,KAAW,EAAA;MACf,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;IACzC;IAEA;EAAA;IAAA;IAAA,OACA,eAAM,IAAY,EAAE,SAAkB,EAAA;MACpC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;MAC1C,IAAI,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC;MAC7C,OAAO,IAAI;IACb;IAEA;EAAA;IAAA;IAAA,OACA,kBAAS,SAAkB,EAAA;MACzB,IAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE;MACnC,IAAI,GAAG,KAAK,SAAS,EAAE,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC;MAC9E,IAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,GAAG;MACxC,IAAI,OAAO,GAAG,CAAC,IAAK,SAAS,KAAK,SAAS,IAAI,OAAO,KAAK,SAAU,EAAE;QACrE,MAAM,IAAI,KAAK,2CAAoC,OAAO,iBAAO,SAAS,eAAY;MACvF;MACD,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,GAAG;MACxB,OAAO,IAAI;IACb;IAEA;EAAA;IAAA;IAAA,OACA,cAAK,IAAU,EAAqD;MAAA,IAAnD,IAAA,uEAAa,MAAA,CAAA,GAAG;MAAA,IAAE,KAAe;MAAA,IAAE,QAAgB;MAClE,IAAI,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;MAC5C,IAAI,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE;MAC3C,OAAO,IAAI;IACb;IAEA;EAAA;IAAA;IAAA,OACA,mBAAO;MACL,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;IACjC;EAAC;IAAA;IAAA,OAED,oBAAc;MAAA,IAAL,CAAC,uEAAG,CAAC;MACZ,OAAO,CAAC,EAAE,GAAG,CAAC,EAAE;QACd,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;QAC1B,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC;MAC5D;IACH;EAAC;IAAA;IAAA,OAEO,mBAAU,IAAc,EAAA;MAC9B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;MAC/B,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAEO,oBAAW,IAAoB,EAAA;MACrC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;MAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACxB;EAAC;IAAA;IAAA,OAEO,uBAAc,EAAoB,EAAE,EAAqB,EAAA;MAC/D,IAAM,CAAC,GAAG,IAAI,CAAC,SAAS;MACxB,IAAI,CAAC,YAAY,EAAE,IAAK,EAAE,IAAI,CAAC,YAAY,EAAG,EAAE;QAC9C,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;QACjB,OAAO,IAAI;MACZ;MACD,MAAM,IAAI,KAAK,mCAA2B,EAAE,aAAM,EAAE,CAAC,IAAI,cAAI,EAAE,CAAC,IAAI,IAAK,EAAE,CAAC,IAAI,QAAI;IACtF;EAAC;IAAA;IAAA,OAEO,mBAAU,IAAe,EAAA;MAC/B,IAAM,CAAC,GAAG,IAAI,CAAC,SAAS;MACxB,IAAI,EAAE,CAAC,YAAY,EAAE,CAAC,EAAE;QACtB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC;MAChD;MACD,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI;MAC9B,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,KAED,eAAiB;MACf,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAS;IAC/B;EAAC;IAAA;IAAA,KAED,eAAqB;MACnB,IAAM,EAAE,GAAG,IAAI,CAAC,MAAM;MACtB,OAAO,EAAE,CAAC,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC;IAC1B,CAAC;IAAA,KAED,aAAsB,IAAgB,EAAA;MACpC,IAAM,EAAE,GAAG,IAAI,CAAC,MAAM;MACtB,EAAE,CAAC,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;IAC1B;EAAC;EAAA;AAAA;AAjUH,OAAA,CAAA,OAAA,GAAA,OAAA;AAwUA,SAAS,QAAQ,CAAC,KAAgB,EAAE,IAAe,EAAA;EACjD,KAAK,IAAM,CAAC,IAAI,IAAI;IAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;EAAA;EACjE,OAAO,KAAK;AACd;AAEA,SAAS,YAAY,CAAC,KAAgB,EAAE,IAAc,EAAA;EACpD,OAAO,IAAI,YAAY,MAAA,CAAA,WAAW,GAAG,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK;AAC1E;AAGA,SAAS,YAAY,CAAC,IAAc,EAAE,KAAgB,EAAE,SAAoB,EAAA;EAC1E,IAAI,IAAI,YAAY,MAAA,CAAA,IAAI,EAAE,OAAO,WAAW,CAAC,IAAI,CAAC;EAClD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,OAAO,IAAI;EACnC,OAAO,IAAI,MAAA,CAAA,KAAK,CACd,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAC,KAAiB,EAAE,CAAoB,EAAI;IAC7D,IAAI,CAAC,YAAY,MAAA,CAAA,IAAI,EAAE,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC;IACzC,IAAI,CAAC,YAAY,MAAA,CAAA,KAAK,EAAE,KAAK,CAAC,IAAI,OAAV,KAAK,qBAAS,CAAC,CAAC,MAAM,EAAC,CAAA,KAC1C,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,OAAO,KAAK;EACd,CAAC,EAAE,EAAE,CAAC,CACP;EAED,SAAS,WAAW,CAAC,CAAO,EAAA;IAC1B,IAAM,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;IAC1B,IAAI,CAAC,KAAK,SAAS,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC;IACnD,OAAO,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;IACnB,OAAO,CAAC;EACV;EAEA,SAAS,WAAW,CAAC,CAAW,EAAA;IAC9B,OACE,CAAC,YAAY,MAAA,CAAA,KAAK,IAClB,CAAC,CAAC,MAAM,CAAC,IAAI,CACX,UAAC,CAAC;MAAA,OAAK,CAAC,YAAY,MAAA,CAAA,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS;IAAA,EACjF;EAEL;AACF;AAEA,SAAS,aAAa,CAAC,KAAgB,EAAE,IAAe,EAAA;EACtD,KAAK,IAAM,CAAC,IAAI,IAAI;IAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;EAAA;AACnE;AAGA,SAAgB,GAAG,CAAC,CAAkB,EAAA;EACpC,OAAO,OAAO,CAAC,IAAI,SAAS,IAAI,OAAO,CAAC,IAAI,QAAQ,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,IAAG,CAAA,EAAA,MAAA,CAAA,CAAC,8EAAI,GAAG,CAAC,CAAC,CAAC,CAAE;AACzF;AAFA,OAAA,CAAA,GAAA,GAAA,GAAA;AAIA,IAAM,OAAO,GAAG,OAAO,CAAC,OAAA,CAAA,SAAS,CAAC,GAAG,CAAC;AAEtC;AACA,SAAgB,GAAG,GAAgB;EAAA,mCAAZ,IAAY;IAAZ,IAAY;EAAA;EACjC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;AAC7B;AAFA,OAAA,CAAA,GAAA,GAAA,GAAA;AAIA,IAAM,MAAM,GAAG,OAAO,CAAC,OAAA,CAAA,SAAS,CAAC,EAAE,CAAC;AAEpC;AACA,SAAgB,EAAE,GAAgB;EAAA,mCAAZ,IAAY;IAAZ,IAAY;EAAA;EAChC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;AAC5B;AAFA,OAAA,CAAA,EAAA,GAAA,EAAA;AAMA,SAAS,OAAO,CAAC,EAAQ,EAAA;EACvB,OAAO,UAAC,CAAC,EAAE,CAAC;IAAA,OAAM,CAAC,KAAK,MAAA,CAAA,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,MAAA,CAAA,GAAG,GAAG,CAAC,IAAG,CAAA,EAAA,MAAA,CAAA,CAAC,uFAAG,GAAG,CAAC,CAAC,CAAC,EAAI,EAAE,EAAI,GAAG,CAAC,CAAC,CAAC,CAAE;EAAA,CAAC;AACjF;AAEA,SAAS,GAAG,CAAC,CAAO,EAAA;EAClB,OAAO,CAAC,YAAY,MAAA,CAAA,IAAI,GAAG,CAAC,IAAG,CAAA,EAAA,MAAA,CAAA,CAAC,+EAAI,CAAC,CAAG;AAC1C","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;\nconst code_1 = require(\"./code\");\nconst scope_1 = require(\"./scope\");\nvar code_2 = require(\"./code\");\nObject.defineProperty(exports, \"_\", { enumerable: true, get: function () { return code_2._; } });\nObject.defineProperty(exports, \"str\", { enumerable: true, get: function () { return code_2.str; } });\nObject.defineProperty(exports, \"strConcat\", { enumerable: true, get: function () { return code_2.strConcat; } });\nObject.defineProperty(exports, \"nil\", { enumerable: true, get: function () { return code_2.nil; } });\nObject.defineProperty(exports, \"getProperty\", { enumerable: true, get: function () { return code_2.getProperty; } });\nObject.defineProperty(exports, \"stringify\", { enumerable: true, get: function () { return code_2.stringify; } });\nObject.defineProperty(exports, \"regexpCode\", { enumerable: true, get: function () { return code_2.regexpCode; } });\nObject.defineProperty(exports, \"Name\", { enumerable: true, get: function () { return code_2.Name; } });\nvar scope_2 = require(\"./scope\");\nObject.defineProperty(exports, \"Scope\", { enumerable: true, get: function () { return scope_2.Scope; } });\nObject.defineProperty(exports, \"ValueScope\", { enumerable: true, get: function () { return scope_2.ValueScope; } });\nObject.defineProperty(exports, \"ValueScopeName\", { enumerable: true, get: function () { return scope_2.ValueScopeName; } });\nObject.defineProperty(exports, \"varKinds\", { enumerable: true, get: function () { return scope_2.varKinds; } });\nexports.operators = {\n    GT: new code_1._Code(\">\"),\n    GTE: new code_1._Code(\">=\"),\n    LT: new code_1._Code(\"<\"),\n    LTE: new code_1._Code(\"<=\"),\n    EQ: new code_1._Code(\"===\"),\n    NEQ: new code_1._Code(\"!==\"),\n    NOT: new code_1._Code(\"!\"),\n    OR: new code_1._Code(\"||\"),\n    AND: new code_1._Code(\"&&\"),\n    ADD: new code_1._Code(\"+\"),\n};\nclass Node {\n    optimizeNodes() {\n        return this;\n    }\n    optimizeNames(_names, _constants) {\n        return this;\n    }\n}\nclass Def extends Node {\n    constructor(varKind, name, rhs) {\n        super();\n        this.varKind = varKind;\n        this.name = name;\n        this.rhs = rhs;\n    }\n    render({ es5, _n }) {\n        const varKind = es5 ? scope_1.varKinds.var : this.varKind;\n        const rhs = this.rhs === undefined ? \"\" : ` = ${this.rhs}`;\n        return `${varKind} ${this.name}${rhs};` + _n;\n    }\n    optimizeNames(names, constants) {\n        if (!names[this.name.str])\n            return;\n        if (this.rhs)\n            this.rhs = optimizeExpr(this.rhs, names, constants);\n        return this;\n    }\n    get names() {\n        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};\n    }\n}\nclass Assign extends Node {\n    constructor(lhs, rhs, sideEffects) {\n        super();\n        this.lhs = lhs;\n        this.rhs = rhs;\n        this.sideEffects = sideEffects;\n    }\n    render({ _n }) {\n        return `${this.lhs} = ${this.rhs};` + _n;\n    }\n    optimizeNames(names, constants) {\n        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)\n            return;\n        this.rhs = optimizeExpr(this.rhs, names, constants);\n        return this;\n    }\n    get names() {\n        const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };\n        return addExprNames(names, this.rhs);\n    }\n}\nclass AssignOp extends Assign {\n    constructor(lhs, op, rhs, sideEffects) {\n        super(lhs, rhs, sideEffects);\n        this.op = op;\n    }\n    render({ _n }) {\n        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;\n    }\n}\nclass Label extends Node {\n    constructor(label) {\n        super();\n        this.label = label;\n        this.names = {};\n    }\n    render({ _n }) {\n        return `${this.label}:` + _n;\n    }\n}\nclass Break extends Node {\n    constructor(label) {\n        super();\n        this.label = label;\n        this.names = {};\n    }\n    render({ _n }) {\n        const label = this.label ? ` ${this.label}` : \"\";\n        return `break${label};` + _n;\n    }\n}\nclass Throw extends Node {\n    constructor(error) {\n        super();\n        this.error = error;\n    }\n    render({ _n }) {\n        return `throw ${this.error};` + _n;\n    }\n    get names() {\n        return this.error.names;\n    }\n}\nclass AnyCode extends Node {\n    constructor(code) {\n        super();\n        this.code = code;\n    }\n    render({ _n }) {\n        return `${this.code};` + _n;\n    }\n    optimizeNodes() {\n        return `${this.code}` ? this : undefined;\n    }\n    optimizeNames(names, constants) {\n        this.code = optimizeExpr(this.code, names, constants);\n        return this;\n    }\n    get names() {\n        return this.code instanceof code_1._CodeOrName ? this.code.names : {};\n    }\n}\nclass ParentNode extends Node {\n    constructor(nodes = []) {\n        super();\n        this.nodes = nodes;\n    }\n    render(opts) {\n        return this.nodes.reduce((code, n) => code + n.render(opts), \"\");\n    }\n    optimizeNodes() {\n        const { nodes } = this;\n        let i = nodes.length;\n        while (i--) {\n            const n = nodes[i].optimizeNodes();\n            if (Array.isArray(n))\n                nodes.splice(i, 1, ...n);\n            else if (n)\n                nodes[i] = n;\n            else\n                nodes.splice(i, 1);\n        }\n        return nodes.length > 0 ? this : undefined;\n    }\n    optimizeNames(names, constants) {\n        const { nodes } = this;\n        let i = nodes.length;\n        while (i--) {\n            // iterating backwards improves 1-pass optimization\n            const n = nodes[i];\n            if (n.optimizeNames(names, constants))\n                continue;\n            subtractNames(names, n.names);\n            nodes.splice(i, 1);\n        }\n        return nodes.length > 0 ? this : undefined;\n    }\n    get names() {\n        return this.nodes.reduce((names, n) => addNames(names, n.names), {});\n    }\n}\nclass BlockNode extends ParentNode {\n    render(opts) {\n        return \"{\" + opts._n + super.render(opts) + \"}\" + opts._n;\n    }\n}\nclass Root extends ParentNode {\n}\nclass Else extends BlockNode {\n}\nElse.kind = \"else\";\nclass If extends BlockNode {\n    constructor(condition, nodes) {\n        super(nodes);\n        this.condition = condition;\n    }\n    render(opts) {\n        let code = `if(${this.condition})` + super.render(opts);\n        if (this.else)\n            code += \"else \" + this.else.render(opts);\n        return code;\n    }\n    optimizeNodes() {\n        super.optimizeNodes();\n        const cond = this.condition;\n        if (cond === true)\n            return this.nodes; // else is ignored here\n        let e = this.else;\n        if (e) {\n            const ns = e.optimizeNodes();\n            e = this.else = Array.isArray(ns) ? new Else(ns) : ns;\n        }\n        if (e) {\n            if (cond === false)\n                return e instanceof If ? e : e.nodes;\n            if (this.nodes.length)\n                return this;\n            return new If(not(cond), e instanceof If ? [e] : e.nodes);\n        }\n        if (cond === false || !this.nodes.length)\n            return undefined;\n        return this;\n    }\n    optimizeNames(names, constants) {\n        var _a;\n        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n        if (!(super.optimizeNames(names, constants) || this.else))\n            return;\n        this.condition = optimizeExpr(this.condition, names, constants);\n        return this;\n    }\n    get names() {\n        const names = super.names;\n        addExprNames(names, this.condition);\n        if (this.else)\n            addNames(names, this.else.names);\n        return names;\n    }\n}\nIf.kind = \"if\";\nclass For extends BlockNode {\n}\nFor.kind = \"for\";\nclass ForLoop extends For {\n    constructor(iteration) {\n        super();\n        this.iteration = iteration;\n    }\n    render(opts) {\n        return `for(${this.iteration})` + super.render(opts);\n    }\n    optimizeNames(names, constants) {\n        if (!super.optimizeNames(names, constants))\n            return;\n        this.iteration = optimizeExpr(this.iteration, names, constants);\n        return this;\n    }\n    get names() {\n        return addNames(super.names, this.iteration.names);\n    }\n}\nclass ForRange extends For {\n    constructor(varKind, name, from, to) {\n        super();\n        this.varKind = varKind;\n        this.name = name;\n        this.from = from;\n        this.to = to;\n    }\n    render(opts) {\n        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;\n        const { name, from, to } = this;\n        return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);\n    }\n    get names() {\n        const names = addExprNames(super.names, this.from);\n        return addExprNames(names, this.to);\n    }\n}\nclass ForIter extends For {\n    constructor(loop, varKind, name, iterable) {\n        super();\n        this.loop = loop;\n        this.varKind = varKind;\n        this.name = name;\n        this.iterable = iterable;\n    }\n    render(opts) {\n        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);\n    }\n    optimizeNames(names, constants) {\n        if (!super.optimizeNames(names, constants))\n            return;\n        this.iterable = optimizeExpr(this.iterable, names, constants);\n        return this;\n    }\n    get names() {\n        return addNames(super.names, this.iterable.names);\n    }\n}\nclass Func extends BlockNode {\n    constructor(name, args, async) {\n        super();\n        this.name = name;\n        this.args = args;\n        this.async = async;\n    }\n    render(opts) {\n        const _async = this.async ? \"async \" : \"\";\n        return `${_async}function ${this.name}(${this.args})` + super.render(opts);\n    }\n}\nFunc.kind = \"func\";\nclass Return extends ParentNode {\n    render(opts) {\n        return \"return \" + super.render(opts);\n    }\n}\nReturn.kind = \"return\";\nclass Try extends BlockNode {\n    render(opts) {\n        let code = \"try\" + super.render(opts);\n        if (this.catch)\n            code += this.catch.render(opts);\n        if (this.finally)\n            code += this.finally.render(opts);\n        return code;\n    }\n    optimizeNodes() {\n        var _a, _b;\n        super.optimizeNodes();\n        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();\n        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();\n        return this;\n    }\n    optimizeNames(names, constants) {\n        var _a, _b;\n        super.optimizeNames(names, constants);\n        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);\n        return this;\n    }\n    get names() {\n        const names = super.names;\n        if (this.catch)\n            addNames(names, this.catch.names);\n        if (this.finally)\n            addNames(names, this.finally.names);\n        return names;\n    }\n}\nclass Catch extends BlockNode {\n    constructor(error) {\n        super();\n        this.error = error;\n    }\n    render(opts) {\n        return `catch(${this.error})` + super.render(opts);\n    }\n}\nCatch.kind = \"catch\";\nclass Finally extends BlockNode {\n    render(opts) {\n        return \"finally\" + super.render(opts);\n    }\n}\nFinally.kind = \"finally\";\nclass CodeGen {\n    constructor(extScope, opts = {}) {\n        this._values = {};\n        this._blockStarts = [];\n        this._constants = {};\n        this.opts = { ...opts, _n: opts.lines ? \"\\n\" : \"\" };\n        this._extScope = extScope;\n        this._scope = new scope_1.Scope({ parent: extScope });\n        this._nodes = [new Root()];\n    }\n    toString() {\n        return this._root.render(this.opts);\n    }\n    // returns unique name in the internal scope\n    name(prefix) {\n        return this._scope.name(prefix);\n    }\n    // reserves unique name in the external scope\n    scopeName(prefix) {\n        return this._extScope.name(prefix);\n    }\n    // reserves unique name in the external scope and assigns value to it\n    scopeValue(prefixOrName, value) {\n        const name = this._extScope.value(prefixOrName, value);\n        const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());\n        vs.add(name);\n        return name;\n    }\n    getScopeValue(prefix, keyOrRef) {\n        return this._extScope.getValue(prefix, keyOrRef);\n    }\n    // return code that assigns values in the external scope to the names that are used internally\n    // (same names that were returned by gen.scopeName or gen.scopeValue)\n    scopeRefs(scopeName) {\n        return this._extScope.scopeRefs(scopeName, this._values);\n    }\n    scopeCode() {\n        return this._extScope.scopeCode(this._values);\n    }\n    _def(varKind, nameOrPrefix, rhs, constant) {\n        const name = this._scope.toName(nameOrPrefix);\n        if (rhs !== undefined && constant)\n            this._constants[name.str] = rhs;\n        this._leafNode(new Def(varKind, name, rhs));\n        return name;\n    }\n    // `const` declaration (`var` in es5 mode)\n    const(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);\n    }\n    // `let` declaration with optional assignment (`var` in es5 mode)\n    let(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);\n    }\n    // `var` declaration with optional assignment\n    var(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);\n    }\n    // assignment code\n    assign(lhs, rhs, sideEffects) {\n        return this._leafNode(new Assign(lhs, rhs, sideEffects));\n    }\n    // `+=` code\n    add(lhs, rhs) {\n        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));\n    }\n    // appends passed SafeExpr to code or executes Block\n    code(c) {\n        if (typeof c == \"function\")\n            c();\n        else if (c !== code_1.nil)\n            this._leafNode(new AnyCode(c));\n        return this;\n    }\n    // returns code for object literal for the passed argument list of key-value pairs\n    object(...keyValues) {\n        const code = [\"{\"];\n        for (const [key, value] of keyValues) {\n            if (code.length > 1)\n                code.push(\",\");\n            code.push(key);\n            if (key !== value || this.opts.es5) {\n                code.push(\":\");\n                (0, code_1.addCodeArg)(code, value);\n            }\n        }\n        code.push(\"}\");\n        return new code_1._Code(code);\n    }\n    // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n    if(condition, thenBody, elseBody) {\n        this._blockNode(new If(condition));\n        if (thenBody && elseBody) {\n            this.code(thenBody).else().code(elseBody).endIf();\n        }\n        else if (thenBody) {\n            this.code(thenBody).endIf();\n        }\n        else if (elseBody) {\n            throw new Error('CodeGen: \"else\" body without \"then\" body');\n        }\n        return this;\n    }\n    // `else if` clause - invalid without `if` or after `else` clauses\n    elseIf(condition) {\n        return this._elseNode(new If(condition));\n    }\n    // `else` clause - only valid after `if` or `else if` clauses\n    else() {\n        return this._elseNode(new Else());\n    }\n    // end `if` statement (needed if gen.if was used only with condition)\n    endIf() {\n        return this._endBlockNode(If, Else);\n    }\n    _for(node, forBody) {\n        this._blockNode(node);\n        if (forBody)\n            this.code(forBody).endFor();\n        return this;\n    }\n    // a generic `for` clause (or statement if `forBody` is passed)\n    for(iteration, forBody) {\n        return this._for(new ForLoop(iteration), forBody);\n    }\n    // `for` statement for a range of values\n    forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {\n        const name = this._scope.toName(nameOrPrefix);\n        return this._for(new ForRange(varKind, name, from, to), () => forBody(name));\n    }\n    // `for-of` statement (in es5 mode replace with a normal for loop)\n    forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {\n        const name = this._scope.toName(nameOrPrefix);\n        if (this.opts.es5) {\n            const arr = iterable instanceof code_1.Name ? iterable : this.var(\"_arr\", iterable);\n            return this.forRange(\"_i\", 0, (0, code_1._) `${arr}.length`, (i) => {\n                this.var(name, (0, code_1._) `${arr}[${i}]`);\n                forBody(name);\n            });\n        }\n        return this._for(new ForIter(\"of\", varKind, name, iterable), () => forBody(name));\n    }\n    // `for-in` statement.\n    // With option `ownProperties` replaced with a `for-of` loop for object keys\n    forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {\n        if (this.opts.ownProperties) {\n            return this.forOf(nameOrPrefix, (0, code_1._) `Object.keys(${obj})`, forBody);\n        }\n        const name = this._scope.toName(nameOrPrefix);\n        return this._for(new ForIter(\"in\", varKind, name, obj), () => forBody(name));\n    }\n    // end `for` loop\n    endFor() {\n        return this._endBlockNode(For);\n    }\n    // `label` statement\n    label(label) {\n        return this._leafNode(new Label(label));\n    }\n    // `break` statement\n    break(label) {\n        return this._leafNode(new Break(label));\n    }\n    // `return` statement\n    return(value) {\n        const node = new Return();\n        this._blockNode(node);\n        this.code(value);\n        if (node.nodes.length !== 1)\n            throw new Error('CodeGen: \"return\" should have one node');\n        return this._endBlockNode(Return);\n    }\n    // `try` statement\n    try(tryBody, catchCode, finallyCode) {\n        if (!catchCode && !finallyCode)\n            throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"');\n        const node = new Try();\n        this._blockNode(node);\n        this.code(tryBody);\n        if (catchCode) {\n            const error = this.name(\"e\");\n            this._currNode = node.catch = new Catch(error);\n            catchCode(error);\n        }\n        if (finallyCode) {\n            this._currNode = node.finally = new Finally();\n            this.code(finallyCode);\n        }\n        return this._endBlockNode(Catch, Finally);\n    }\n    // `throw` statement\n    throw(error) {\n        return this._leafNode(new Throw(error));\n    }\n    // start self-balancing block\n    block(body, nodeCount) {\n        this._blockStarts.push(this._nodes.length);\n        if (body)\n            this.code(body).endBlock(nodeCount);\n        return this;\n    }\n    // end the current self-balancing block\n    endBlock(nodeCount) {\n        const len = this._blockStarts.pop();\n        if (len === undefined)\n            throw new Error(\"CodeGen: not in self-balancing block\");\n        const toClose = this._nodes.length - len;\n        if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {\n            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);\n        }\n        this._nodes.length = len;\n        return this;\n    }\n    // `function` heading (or definition if funcBody is passed)\n    func(name, args = code_1.nil, async, funcBody) {\n        this._blockNode(new Func(name, args, async));\n        if (funcBody)\n            this.code(funcBody).endFunc();\n        return this;\n    }\n    // end function definition\n    endFunc() {\n        return this._endBlockNode(Func);\n    }\n    optimize(n = 1) {\n        while (n-- > 0) {\n            this._root.optimizeNodes();\n            this._root.optimizeNames(this._root.names, this._constants);\n        }\n    }\n    _leafNode(node) {\n        this._currNode.nodes.push(node);\n        return this;\n    }\n    _blockNode(node) {\n        this._currNode.nodes.push(node);\n        this._nodes.push(node);\n    }\n    _endBlockNode(N1, N2) {\n        const n = this._currNode;\n        if (n instanceof N1 || (N2 && n instanceof N2)) {\n            this._nodes.pop();\n            return this;\n        }\n        throw new Error(`CodeGen: not in block \"${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}\"`);\n    }\n    _elseNode(node) {\n        const n = this._currNode;\n        if (!(n instanceof If)) {\n            throw new Error('CodeGen: \"else\" without \"if\"');\n        }\n        this._currNode = n.else = node;\n        return this;\n    }\n    get _root() {\n        return this._nodes[0];\n    }\n    get _currNode() {\n        const ns = this._nodes;\n        return ns[ns.length - 1];\n    }\n    set _currNode(node) {\n        const ns = this._nodes;\n        ns[ns.length - 1] = node;\n    }\n}\nexports.CodeGen = CodeGen;\nfunction addNames(names, from) {\n    for (const n in from)\n        names[n] = (names[n] || 0) + (from[n] || 0);\n    return names;\n}\nfunction addExprNames(names, from) {\n    return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;\n}\nfunction optimizeExpr(expr, names, constants) {\n    if (expr instanceof code_1.Name)\n        return replaceName(expr);\n    if (!canOptimize(expr))\n        return expr;\n    return new code_1._Code(expr._items.reduce((items, c) => {\n        if (c instanceof code_1.Name)\n            c = replaceName(c);\n        if (c instanceof code_1._Code)\n            items.push(...c._items);\n        else\n            items.push(c);\n        return items;\n    }, []));\n    function replaceName(n) {\n        const c = constants[n.str];\n        if (c === undefined || names[n.str] !== 1)\n            return n;\n        delete names[n.str];\n        return c;\n    }\n    function canOptimize(e) {\n        return (e instanceof code_1._Code &&\n            e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined));\n    }\n}\nfunction subtractNames(names, from) {\n    for (const n in from)\n        names[n] = (names[n] || 0) - (from[n] || 0);\n}\nfunction not(x) {\n    return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : (0, code_1._) `!${par(x)}`;\n}\nexports.not = not;\nconst andCode = mappend(exports.operators.AND);\n// boolean AND (&&) expression with the passed arguments\nfunction and(...args) {\n    return args.reduce(andCode);\n}\nexports.and = and;\nconst orCode = mappend(exports.operators.OR);\n// boolean OR (||) expression with the passed arguments\nfunction or(...args) {\n    return args.reduce(orCode);\n}\nexports.or = or;\nfunction mappend(op) {\n    return (x, y) => (x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._) `${par(x)} ${op} ${par(y)}`);\n}\nfunction par(x) {\n    return x instanceof code_1.Name ? x : (0, code_1._) `(${x})`;\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}