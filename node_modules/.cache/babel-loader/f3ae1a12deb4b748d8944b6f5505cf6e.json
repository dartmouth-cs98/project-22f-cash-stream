{"ast":null,"code":"import _objectSpread from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _a;\nimport { ethers } from \"ethers\";\nimport ConstantFlowAgreementV1 from \"./ConstantFlowAgreementV1\";\nimport ERC20Token from \"./ERC20Token\";\nimport Governance from \"./Governance\";\nimport InstantDistributionAgreementV1 from \"./InstantDistributionAgreementV1\";\nimport Operation from \"./Operation\";\nimport { SFError } from \"./SFError\";\nimport ISETHABI from \"./abi/ISETH.json\";\nimport SuperTokenABI from \"./abi/SuperToken.json\";\nimport { chainIdToResolverDataMap, networkNameToChainIdMap } from \"./constants\";\nimport { getNetworkName } from \"./frameworkHelpers\";\nimport { getSanitizedTimestamp, getStringCurrentTimeInSeconds, normalizeAddress } from \"./utils\";\n/**\n * SuperToken Helper Class\n * @description A helper class to create `SuperToken` objects which can interact with the `SuperToken` contract as well as the CFAV1 and IDAV1 contracts of the desired `SuperToken`.\n * @see https://www.notion.so/superfluidhq/Classification-of-Super-Tokens-5beace780b5c4d09a5752a3677da3dc0 for further details on naming classification and underlying implementation.\n */\nvar SuperToken = /*#__PURE__*/function (_ERC20Token) {\n  _inherits(SuperToken, _ERC20Token);\n  var _super = _createSuper(SuperToken);\n  function SuperToken(options, settings) {\n    var _this;\n    _classCallCheck(this, SuperToken);\n    // initialize ERC20 token functions here\n    _this = _super.call(this, settings.address);\n    /** ### SuperToken Contract Read Functions ### */\n    /**\n     * Returns the real time balance of `address`.\n     * @param account the target address\n     * @param timestamp the timestamp you'd like to see the data\n     * @param providerOrSigner a provider or signer for executing a web3 call\n     * @returns {Promise<IWeb3RealTimeBalanceOf>} real time balance of data\n     */\n    _this.realtimeBalanceOf = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n        var providerOrSigner, account, _ref$timestamp, timestamp, normalizedAccount, realtimeBalanceOf;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                providerOrSigner = _ref.providerOrSigner, account = _ref.account, _ref$timestamp = _ref.timestamp, timestamp = _ref$timestamp === void 0 ? getStringCurrentTimeInSeconds() : _ref$timestamp;\n                normalizedAccount = normalizeAddress(account);\n                _context.prev = 2;\n                _context.next = 5;\n                return _this.contract.connect(providerOrSigner).realtimeBalanceOf(normalizedAccount, timestamp);\n              case 5:\n                realtimeBalanceOf = _context.sent;\n                return _context.abrupt(\"return\", {\n                  availableBalance: realtimeBalanceOf.availableBalance.toString(),\n                  deposit: realtimeBalanceOf.deposit.toString(),\n                  owedDeposit: realtimeBalanceOf.owedDeposit.toString(),\n                  timestamp: getSanitizedTimestamp(timestamp)\n                });\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n                throw new SFError({\n                  type: \"SUPERTOKEN_READ\",\n                  customMessage: \"There was an error getting realtimeBalanceOf\",\n                  errorObject: _context.t0\n                });\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 9]]);\n      }));\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    /** ### CFA Read Functions ### */\n    /**\n     * Get the details of a flow.\n     * @param sender the sender of the flow\n     * @param receiver the receiver of the flow\n     * @param providerOrSigner a provider or signer object\n     * @returns {Promise<IWeb3FlowInfo>} Web3 Flow info object\n     */\n    _this.getFlow = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.cfaV1.getFlow({\n                  superToken: _this.settings.address,\n                  sender: params.sender,\n                  receiver: params.receiver,\n                  providerOrSigner: params.providerOrSigner\n                });\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    /**\n     * Get the flow info of an account (net flow).\n     * @param account the account we're querying\n     * @param providerOrSigner a provider or signer object\n     * @returns {Promise<IWeb3FlowInfo>} Web3 Flow info object\n     */\n    _this.getAccountFlowInfo = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(params) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _this.cfaV1.getAccountFlowInfo({\n                  superToken: _this.settings.address,\n                  account: params.account,\n                  providerOrSigner: params.providerOrSigner\n                });\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    /**\n     * Get the net flow of an account.\n     * @param account the account we're querying\n     * @param providerOrSigner a provider or signer object\n     * @returns {Promise<string>} Web3 Flow info object\n     */\n    _this.getNetFlow = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(params) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _this.cfaV1.getNetFlow({\n                  superToken: _this.settings.address,\n                  account: params.account,\n                  providerOrSigner: params.providerOrSigner\n                });\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent);\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n    /**\n     * Get flow operator data.\n     * @param sender the sender\n     * @param flowOperator the flowOperator\n     * @param providerOrSigner a provider or signer object\n     * @returns {Promise<IWeb3FlowOperatorData>} Web3 Flow info object\n     */\n    _this.getFlowOperatorData = /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(params) {\n        var normalizedSender, normalizedFlowOperator;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                normalizedSender = normalizeAddress(params.sender);\n                normalizedFlowOperator = normalizeAddress(params.flowOperator);\n                _context5.next = 4;\n                return _this.cfaV1.getFlowOperatorData({\n                  superToken: _this.settings.address,\n                  sender: normalizedSender,\n                  flowOperator: normalizedFlowOperator,\n                  providerOrSigner: params.providerOrSigner\n                });\n              case 4:\n                return _context5.abrupt(\"return\", _context5.sent);\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n    /**\n     * Get flow operator data using the flowOperatorId.\n     * @param flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n     * @param providerOrSigner a provider or signer object\n     * @returns {Promise<IWeb3FlowOperatorData>} Web3 Flow info object\n     */\n    _this.getFlowOperatorDataByID = /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(params) {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _this.cfaV1.getFlowOperatorDataByID({\n                  superToken: _this.settings.address,\n                  flowOperatorId: params.flowOperatorId,\n                  providerOrSigner: params.providerOrSigner\n                });\n              case 2:\n                return _context6.abrupt(\"return\", _context6.sent);\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n    /** ### CFA Write Functions ### */\n    /**\n     * Create a flow of the token of this class.\n     * @param receiver The receiver of the flow.\n     * @param flowRate The specified flow rate.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    _this.createFlow = function (params) {\n      return _this.cfaV1.createFlow(_objectSpread({\n        superToken: _this.settings.address\n      }, params));\n    };\n    /**\n     * Update a flow of the token of this class.\n     * @param receiver The receiver of the flow.\n     * @param flowRate The specified flow rate.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    _this.updateFlow = function (params) {\n      return _this.cfaV1.updateFlow(_objectSpread({\n        superToken: _this.settings.address\n      }, params));\n    };\n    /**\n     * Delete a flow of the token of this class.\n     * @param sender The sender of the flow.\n     * @param receiver The receiver of the flow.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    _this.deleteFlow = function (params) {\n      return _this.cfaV1.deleteFlow(_objectSpread({\n        superToken: _this.settings.address\n      }, params));\n    };\n    /**\n     * Create a flow as an operator\n     * @param flowRate The specified flow rate.\n     * @param sender The sender of the flow.\n     * @param receiver The receiver of the flow.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    _this.createFlowByOperator = function (params) {\n      return _this.cfaV1.createFlowByOperator(_objectSpread({\n        superToken: _this.settings.address\n      }, params));\n    };\n    /**\n     * Update a flow as an operator.\n     * @param flowRate The specified flow rate.\n     * @param sender The sender of the flow.\n     * @param receiver The receiver of the flow.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    _this.updateFlowByOperator = function (params) {\n      return _this.cfaV1.updateFlowByOperator(_objectSpread({\n        superToken: _this.settings.address\n      }, params));\n    };\n    /**\n     * Delete a flow as an operator.\n     * @param sender The sender of the flow.\n     * @param receiver The receiver of the flow.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    _this.deleteFlowByOperator = function (params) {\n      return _this.cfaV1.deleteFlowByOperator(_objectSpread({\n        superToken: _this.settings.address\n      }, params));\n    };\n    /** ### IDA Read Functions ### */\n    /**\n     * Get the details of a `Subscription`.\n     * @param publisher the address of the publisher of the index\n     * @param indexId the index id\n     * @param subscriber the subscriber's address\n     * @param providerOrSigner a provider or signer object\n     * @returns {Promise<IWeb3Subscription>} Web3 Subscription object\n     */\n    _this.getSubscription = /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(params) {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return _this.idaV1.getSubscription(_objectSpread({\n                  superToken: _this.settings.address\n                }, params));\n              case 2:\n                return _context7.abrupt(\"return\", _context7.sent);\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }();\n    /**\n     * Get the details of an `Index`.\n     * @param publisher the address of the publisher of the index\n     * @param indexId the index id\n     * @param providerOrSigner a provider or signer object\n     * @returns {Promise<IWeb3Index>} Web3 Index object\n     */\n    _this.getIndex = /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(params) {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return _this.idaV1.getIndex(_objectSpread({\n                  superToken: _this.settings.address\n                }, params));\n              case 2:\n                return _context8.abrupt(\"return\", _context8.sent);\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n    /** ### IDA Write Functions ### */\n    /**\n     * Creates an IDA Index.\n     * @param indexId The id of the index.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    _this.createIndex = function (params) {\n      return _this.idaV1.createIndex(_objectSpread({\n        superToken: _this.settings.address\n      }, params));\n    };\n    /**\n     * Distributes `amount` of token to an index\n     * @param indexId The id of the index.\n     * @param amount The amount of tokens to be distributed.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    _this.distribute = function (params) {\n      return _this.idaV1.distribute(_objectSpread({\n        superToken: _this.settings.address\n      }, params));\n    };\n    /**\n     * Updates the `IndexValue` field of an index.\n     * @param indexId The id of the index.\n     * @param indexValue The new indexValue.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     *\n     * NOTE: It has the same effect as `distribute`, but is closer to the low level data structure of the index.\n     */\n    _this.updateIndexValue = function (params) {\n      return _this.idaV1.updateIndexValue(_objectSpread({\n        superToken: _this.settings.address\n      }, params));\n    };\n    /**\n     * Updates the `units` allocated to a Subscription.\n     * @param indexId The id of the index.\n     * @param subscriber The subscriber address whose units you want to update.\n     * @param units The amount of units you want to update to.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    _this.updateSubscriptionUnits = function (params) {\n      return _this.idaV1.updateSubscriptionUnits(_objectSpread({\n        superToken: _this.settings.address\n      }, params));\n    };\n    /**\n     * Approves a Subscription, so the Subscriber won't need to claim tokens when the Publisher distributes.\n     * @param indexId The id of the index.\n     * @param publisher The publisher address whose subscription you want to approve.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    _this.approveSubscription = function (params) {\n      return _this.idaV1.approveSubscription(_objectSpread({\n        superToken: _this.settings.address\n      }, params));\n    };\n    /**\n     * Revokes a Subscription, so the Subscriber will need to claim tokens when the Publisher distributes.\n     * @param indexId The id of the index.\n     * @param publisher The index publisher address you want to revoke for the subscriber.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    _this.revokeSubscription = function (params) {\n      return _this.idaV1.revokeSubscription(_objectSpread({\n        superToken: _this.settings.address\n      }, params));\n    };\n    /**\n     * Deletes a Subscription by setting the `units` allocated to the Subscriber to 0.\n     * @param indexId The id of the index.\n     * @param subscriber The subscriber address whose subscription you want to delete.\n     * @param publisher The publisher address of the index you are targeting.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    _this.deleteSubscription = function (params) {\n      return _this.idaV1.deleteSubscription(_objectSpread({\n        superToken: _this.settings.address\n      }, params));\n    };\n    /**\n     * Claims any pending tokens allocated to the Subscription (unapproved).\n     * @param indexId The id of the index.\n     * @param subscriber The subscriber address who you are claiming for.\n     * @param publisher The publisher address of the index you are targeting.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    _this.claim = function (params) {\n      return _this.idaV1.claim(_objectSpread({\n        superToken: _this.settings.address\n      }, params));\n    };\n    /** ### Governance Read Functions ### */\n    _this.getGovernanceParameters = /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(providerOrSigner) {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", _this.governance.getGovernanceParameters({\n                  providerOrSigner: providerOrSigner,\n                  token: _this.settings.address\n                }));\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }();\n    _this.options = options;\n    _this.settings = settings;\n    _this.cfaV1 = new ConstantFlowAgreementV1({\n      config: _this.settings.config\n    });\n    _this.idaV1 = new InstantDistributionAgreementV1({\n      config: _this.settings.config\n    });\n    _this.governance = new Governance(_this.settings.config.governanceAddress, _this.settings.config.hostAddress);\n    _this.contract = new ethers.Contract(_this.settings.address, SuperTokenABI.abi);\n    return _this;\n  }\n  /** ### CFA ACL Write Functions (byOperator) ### */\n  /**\n   * Update permissions for a flow operator as a sender.\n   * @param sender The sender of the flow.\n   * @param flowOperator The permission grantee address\n   * @param permission The permissions to set.\n   * @param flowRateAllowance The flowRateAllowance granted to the flow operator.\n   * @param userData Extra user data provided.\n   * @param overrides ethers overrides object for more control over the transaction sent.\n   * @returns {Operation} An instance of Operation which can be executed or batched.\n   */\n  _createClass(SuperToken, [{\n    key: \"updateFlowOperatorPermissions\",\n    value: function updateFlowOperatorPermissions(params) {\n      return this.cfaV1.updateFlowOperatorPermissions(_objectSpread({\n        superToken: this.settings.address\n      }, params));\n    }\n    /**\n     * Give flow operator full control - max flow rate and create/update/delete permissions.\n     * @param sender The sender of the flow.\n     * @param flowOperator The permission grantee address\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     */\n  }, {\n    key: \"authorizeFlowOperatorWithFullControl\",\n    value: function authorizeFlowOperatorWithFullControl(params) {\n      return this.cfaV1.authorizeFlowOperatorWithFullControl(_objectSpread({\n        superToken: this.settings.address\n      }, params));\n    }\n    /**\n     * Revoke flow operator control - set flow rate to 0 with no permissions.\n     * @param sender The sender of the flow.\n     * @param flowOperator The permission grantee address\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     */\n  }, {\n    key: \"revokeFlowOperatorWithFullControl\",\n    value: function revokeFlowOperatorWithFullControl(params) {\n      return this.cfaV1.revokeFlowOperatorWithFullControl(_objectSpread({\n        superToken: this.settings.address\n      }, params));\n    }\n  }]);\n  return SuperToken;\n}(ERC20Token);\nexport { SuperToken as default };\n_a = SuperToken;\nSuperToken.create = /*#__PURE__*/function () {\n  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(options) {\n    var networkName, chainId, superToken, underlyingTokenAddress, settings, tokenSymbol, resolverData, nativeTokenSymbol, nativeSuperTokenSymbol;\n    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            if (!(!options.chainId && !options.networkName)) {\n              _context10.next = 2;\n              break;\n            }\n            throw new SFError({\n              type: \"SUPERTOKEN_INITIALIZATION\",\n              customMessage: \"You must input chainId or networkName.\"\n            });\n          case 2:\n            networkName = getNetworkName(options);\n            chainId = options.chainId || networkNameToChainIdMap.get(networkName);\n            _context10.prev = 4;\n            superToken = new ethers.Contract(options.address, SuperTokenABI.abi);\n            _context10.next = 8;\n            return superToken.connect(options.provider).getUnderlyingToken();\n          case 8:\n            underlyingTokenAddress = _context10.sent;\n            settings = {\n              address: options.address,\n              config: options.config,\n              chainId: chainId,\n              networkName: networkName\n            };\n            _context10.next = 12;\n            return superToken.connect(options.provider).symbol();\n          case 12:\n            tokenSymbol = _context10.sent;\n            resolverData = chainIdToResolverDataMap.get(chainId) || {\n              subgraphAPIEndpoint: \"\",\n              resolverAddress: \"\",\n              networkName: \"\",\n              nativeTokenSymbol: \"\"\n            };\n            nativeTokenSymbol = resolverData.nativeTokenSymbol || \"ETH\";\n            nativeSuperTokenSymbol = nativeTokenSymbol + \"x\";\n            if (!(nativeSuperTokenSymbol === tokenSymbol)) {\n              _context10.next = 18;\n              break;\n            }\n            return _context10.abrupt(\"return\", new NativeAssetSuperToken(options, settings, nativeTokenSymbol));\n          case 18:\n            if (!(underlyingTokenAddress !== ethers.constants.AddressZero)) {\n              _context10.next = 20;\n              break;\n            }\n            return _context10.abrupt(\"return\", new WrapperSuperToken(options, _objectSpread(_objectSpread({}, settings), {}, {\n              underlyingTokenAddress: underlyingTokenAddress\n            })));\n          case 20:\n            return _context10.abrupt(\"return\", new PureSuperToken(options, settings));\n          case 23:\n            _context10.prev = 23;\n            _context10.t0 = _context10[\"catch\"](4);\n            throw new SFError({\n              type: \"SUPERTOKEN_INITIALIZATION\",\n              customMessage: \"There was an error initializing the SuperToken\",\n              errorObject: _context10.t0\n            });\n          case 26:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, null, [[4, 23]]);\n  }));\n  return function (_x10) {\n    return _ref11.apply(this, arguments);\n  };\n}();\n/**\n * WrapperSuperToken has an underlying ERC20 token.\n */\nexport var WrapperSuperToken = /*#__PURE__*/function (_SuperToken) {\n  _inherits(WrapperSuperToken, _SuperToken);\n  var _super2 = _createSuper(WrapperSuperToken);\n  function WrapperSuperToken(options, settings) {\n    var _this2;\n    _classCallCheck(this, WrapperSuperToken);\n    _this2 = _super2.call(this, options, settings);\n    /** ### WrapperSuperToken Contract Write Functions ### */\n    /**\n     * Downgrade `amount` SuperToken's.\n     * @param amount The amount to be downgraded.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    _this2.downgrade = function (_ref12) {\n      var amount = _ref12.amount,\n        overrides = _ref12.overrides;\n      var txn = _this2.contract.populateTransaction.downgrade(amount, overrides || {});\n      return new Operation(txn, \"SUPERTOKEN_DOWNGRADE\");\n    };\n    /**\n     * Upgrade `amount` SuperToken's.\n     * @param amount The amount to be upgraded.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    _this2.upgrade = function (_ref13) {\n      var amount = _ref13.amount,\n        overrides = _ref13.overrides;\n      var txn = _this2.contract.populateTransaction.upgrade(amount, overrides || {});\n      return new Operation(txn, \"SUPERTOKEN_UPGRADE\");\n    };\n    /**\n     * Upgrade `amount` of an ERC20 token to its SuperToken to `to` address.\n     * @param amount The amount to be upgraded.\n     * @param to The destination of the upgraded native asset super tokens.\n     * @param data Bytes operatorData\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed.\n     */\n    _this2.upgradeTo = function (_ref14) {\n      var amount = _ref14.amount,\n        to = _ref14.to,\n        _ref14$data = _ref14.data,\n        data = _ref14$data === void 0 ? \"0x\" : _ref14$data,\n        overrides = _ref14.overrides;\n      var txn = _this2.contract.populateTransaction.upgradeTo(to, amount, data, _objectSpread({}, overrides));\n      return new Operation(txn, \"UNSUPPORTED\");\n    };\n    _this2.underlyingToken = new ERC20Token(settings.underlyingTokenAddress);\n    return _this2;\n  }\n  return _createClass(WrapperSuperToken);\n}(SuperToken);\n/**\n * PureSuperToken doesn't have any underlying ERC20 token.\n */\nexport var PureSuperToken = /*#__PURE__*/function (_SuperToken2) {\n  _inherits(PureSuperToken, _SuperToken2);\n  var _super3 = _createSuper(PureSuperToken);\n  function PureSuperToken(options, settings) {\n    _classCallCheck(this, PureSuperToken);\n    return _super3.call(this, options, settings);\n  }\n  return _createClass(PureSuperToken);\n}(SuperToken);\n/**\n * NativeAssetSuperToken wraps the native asset of the network.\n */\nexport var NativeAssetSuperToken = /*#__PURE__*/function (_SuperToken3) {\n  _inherits(NativeAssetSuperToken, _SuperToken3);\n  var _super4 = _createSuper(NativeAssetSuperToken);\n  function NativeAssetSuperToken(options, settings, nativeTokenSymbol) {\n    var _this3;\n    _classCallCheck(this, NativeAssetSuperToken);\n    _this3 = _super4.call(this, options, settings);\n    /**\n     * Upgrade `amount` of a network's native asset to its SuperToken.\n     * @param amount The amount to be upgraded.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed.\n     */\n    _this3.upgrade = function (_ref15) {\n      var amount = _ref15.amount,\n        overrides = _ref15.overrides;\n      var txn = _this3.nativeAssetContract.populateTransaction.upgradeByETH(_objectSpread(_objectSpread({}, overrides), {}, {\n        value: amount\n      }));\n      return new Operation(txn, \"UNSUPPORTED\");\n    };\n    /**\n     * Upgrade `amount` of a network's native asset to its SuperToken to `to` address.\n     * @param amount The amount to be upgraded.\n     * @param to The destination of the upgraded native asset super tokens.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed.\n     */\n    _this3.upgradeTo = function (_ref16) {\n      var amount = _ref16.amount,\n        to = _ref16.to,\n        overrides = _ref16.overrides;\n      var txn = _this3.nativeAssetContract.populateTransaction.upgradeByETHTo(to, _objectSpread(_objectSpread({}, overrides), {}, {\n        value: amount\n      }));\n      return new Operation(txn, \"UNSUPPORTED\");\n    };\n    /**\n     * Downgrade `amount` of a native asset super token to the underlying native asset.\n     * @param amount The amount to be upgraded.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed.\n     */\n    _this3.downgrade = function (_ref17) {\n      var amount = _ref17.amount,\n        overrides = _ref17.overrides;\n      var txn = _this3.nativeAssetContract.populateTransaction.downgradeToETH(amount, _objectSpread({}, overrides));\n      return new Operation(txn, \"UNSUPPORTED\");\n    };\n    _this3.nativeTokenSymbol = nativeTokenSymbol;\n    return _this3;\n  }\n  _createClass(NativeAssetSuperToken, [{\n    key: \"nativeAssetContract\",\n    get: function get() {\n      return new ethers.Contract(this.settings.address, ISETHABI.abi);\n    }\n  }]);\n  return NativeAssetSuperToken;\n}(SuperToken);","map":{"version":3,"sources":["../../src/SuperToken.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var _a;\nimport { ethers } from \"ethers\";\nimport ConstantFlowAgreementV1 from \"./ConstantFlowAgreementV1\";\nimport ERC20Token from \"./ERC20Token\";\nimport Governance from \"./Governance\";\nimport InstantDistributionAgreementV1 from \"./InstantDistributionAgreementV1\";\nimport Operation from \"./Operation\";\nimport { SFError } from \"./SFError\";\nimport ISETHABI from \"./abi/ISETH.json\";\nimport SuperTokenABI from \"./abi/SuperToken.json\";\nimport { chainIdToResolverDataMap, networkNameToChainIdMap } from \"./constants\";\nimport { getNetworkName } from \"./frameworkHelpers\";\nimport { getSanitizedTimestamp, getStringCurrentTimeInSeconds, normalizeAddress, } from \"./utils\";\n/**\n * SuperToken Helper Class\n * @description A helper class to create `SuperToken` objects which can interact with the `SuperToken` contract as well as the CFAV1 and IDAV1 contracts of the desired `SuperToken`.\n * @see https://www.notion.so/superfluidhq/Classification-of-Super-Tokens-5beace780b5c4d09a5752a3677da3dc0 for further details on naming classification and underlying implementation.\n */\nexport default class SuperToken extends ERC20Token {\n    constructor(options, settings) {\n        // initialize ERC20 token functions here\n        super(settings.address);\n        /** ### SuperToken Contract Read Functions ### */\n        /**\n         * Returns the real time balance of `address`.\n         * @param account the target address\n         * @param timestamp the timestamp you'd like to see the data\n         * @param providerOrSigner a provider or signer for executing a web3 call\n         * @returns {Promise<IWeb3RealTimeBalanceOf>} real time balance of data\n         */\n        this.realtimeBalanceOf = async ({ providerOrSigner, account, timestamp = getStringCurrentTimeInSeconds(), }) => {\n            const normalizedAccount = normalizeAddress(account);\n            try {\n                const realtimeBalanceOf = await this.contract\n                    .connect(providerOrSigner)\n                    .realtimeBalanceOf(normalizedAccount, timestamp);\n                return {\n                    availableBalance: realtimeBalanceOf.availableBalance.toString(),\n                    deposit: realtimeBalanceOf.deposit.toString(),\n                    owedDeposit: realtimeBalanceOf.owedDeposit.toString(),\n                    timestamp: getSanitizedTimestamp(timestamp),\n                };\n            }\n            catch (err) {\n                throw new SFError({\n                    type: \"SUPERTOKEN_READ\",\n                    customMessage: \"There was an error getting realtimeBalanceOf\",\n                    errorObject: err,\n                });\n            }\n        };\n        /** ### CFA Read Functions ### */\n        /**\n         * Get the details of a flow.\n         * @param sender the sender of the flow\n         * @param receiver the receiver of the flow\n         * @param providerOrSigner a provider or signer object\n         * @returns {Promise<IWeb3FlowInfo>} Web3 Flow info object\n         */\n        this.getFlow = async (params) => {\n            return await this.cfaV1.getFlow({\n                superToken: this.settings.address,\n                sender: params.sender,\n                receiver: params.receiver,\n                providerOrSigner: params.providerOrSigner,\n            });\n        };\n        /**\n         * Get the flow info of an account (net flow).\n         * @param account the account we're querying\n         * @param providerOrSigner a provider or signer object\n         * @returns {Promise<IWeb3FlowInfo>} Web3 Flow info object\n         */\n        this.getAccountFlowInfo = async (params) => {\n            return await this.cfaV1.getAccountFlowInfo({\n                superToken: this.settings.address,\n                account: params.account,\n                providerOrSigner: params.providerOrSigner,\n            });\n        };\n        /**\n         * Get the net flow of an account.\n         * @param account the account we're querying\n         * @param providerOrSigner a provider or signer object\n         * @returns {Promise<string>} Web3 Flow info object\n         */\n        this.getNetFlow = async (params) => {\n            return await this.cfaV1.getNetFlow({\n                superToken: this.settings.address,\n                account: params.account,\n                providerOrSigner: params.providerOrSigner,\n            });\n        };\n        /**\n         * Get flow operator data.\n         * @param sender the sender\n         * @param flowOperator the flowOperator\n         * @param providerOrSigner a provider or signer object\n         * @returns {Promise<IWeb3FlowOperatorData>} Web3 Flow info object\n         */\n        this.getFlowOperatorData = async (params) => {\n            const normalizedSender = normalizeAddress(params.sender);\n            const normalizedFlowOperator = normalizeAddress(params.flowOperator);\n            return await this.cfaV1.getFlowOperatorData({\n                superToken: this.settings.address,\n                sender: normalizedSender,\n                flowOperator: normalizedFlowOperator,\n                providerOrSigner: params.providerOrSigner,\n            });\n        };\n        /**\n         * Get flow operator data using the flowOperatorId.\n         * @param flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n         * @param providerOrSigner a provider or signer object\n         * @returns {Promise<IWeb3FlowOperatorData>} Web3 Flow info object\n         */\n        this.getFlowOperatorDataByID = async (params) => {\n            return await this.cfaV1.getFlowOperatorDataByID({\n                superToken: this.settings.address,\n                flowOperatorId: params.flowOperatorId,\n                providerOrSigner: params.providerOrSigner,\n            });\n        };\n        /** ### CFA Write Functions ### */\n        /**\n         * Create a flow of the token of this class.\n         * @param receiver The receiver of the flow.\n         * @param flowRate The specified flow rate.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.createFlow = (params) => {\n            return this.cfaV1.createFlow({\n                superToken: this.settings.address,\n                ...params,\n            });\n        };\n        /**\n         * Update a flow of the token of this class.\n         * @param receiver The receiver of the flow.\n         * @param flowRate The specified flow rate.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.updateFlow = (params) => {\n            return this.cfaV1.updateFlow({\n                superToken: this.settings.address,\n                ...params,\n            });\n        };\n        /**\n         * Delete a flow of the token of this class.\n         * @param sender The sender of the flow.\n         * @param receiver The receiver of the flow.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.deleteFlow = (params) => {\n            return this.cfaV1.deleteFlow({\n                superToken: this.settings.address,\n                ...params,\n            });\n        };\n        /**\n         * Create a flow as an operator\n         * @param flowRate The specified flow rate.\n         * @param sender The sender of the flow.\n         * @param receiver The receiver of the flow.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.createFlowByOperator = (params) => {\n            return this.cfaV1.createFlowByOperator({\n                superToken: this.settings.address,\n                ...params,\n            });\n        };\n        /**\n         * Update a flow as an operator.\n         * @param flowRate The specified flow rate.\n         * @param sender The sender of the flow.\n         * @param receiver The receiver of the flow.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.updateFlowByOperator = (params) => {\n            return this.cfaV1.updateFlowByOperator({\n                superToken: this.settings.address,\n                ...params,\n            });\n        };\n        /**\n         * Delete a flow as an operator.\n         * @param sender The sender of the flow.\n         * @param receiver The receiver of the flow.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.deleteFlowByOperator = (params) => {\n            return this.cfaV1.deleteFlowByOperator({\n                superToken: this.settings.address,\n                ...params,\n            });\n        };\n        /** ### IDA Read Functions ### */\n        /**\n         * Get the details of a `Subscription`.\n         * @param publisher the address of the publisher of the index\n         * @param indexId the index id\n         * @param subscriber the subscriber's address\n         * @param providerOrSigner a provider or signer object\n         * @returns {Promise<IWeb3Subscription>} Web3 Subscription object\n         */\n        this.getSubscription = async (params) => {\n            return await this.idaV1.getSubscription({\n                superToken: this.settings.address,\n                ...params,\n            });\n        };\n        /**\n         * Get the details of an `Index`.\n         * @param publisher the address of the publisher of the index\n         * @param indexId the index id\n         * @param providerOrSigner a provider or signer object\n         * @returns {Promise<IWeb3Index>} Web3 Index object\n         */\n        this.getIndex = async (params) => {\n            return await this.idaV1.getIndex({\n                superToken: this.settings.address,\n                ...params,\n            });\n        };\n        /** ### IDA Write Functions ### */\n        /**\n         * Creates an IDA Index.\n         * @param indexId The id of the index.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.createIndex = (params) => {\n            return this.idaV1.createIndex({\n                superToken: this.settings.address,\n                ...params,\n            });\n        };\n        /**\n         * Distributes `amount` of token to an index\n         * @param indexId The id of the index.\n         * @param amount The amount of tokens to be distributed.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.distribute = (params) => {\n            return this.idaV1.distribute({\n                superToken: this.settings.address,\n                ...params,\n            });\n        };\n        /**\n         * Updates the `IndexValue` field of an index.\n         * @param indexId The id of the index.\n         * @param indexValue The new indexValue.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         *\n         * NOTE: It has the same effect as `distribute`, but is closer to the low level data structure of the index.\n         */\n        this.updateIndexValue = (params) => {\n            return this.idaV1.updateIndexValue({\n                superToken: this.settings.address,\n                ...params,\n            });\n        };\n        /**\n         * Updates the `units` allocated to a Subscription.\n         * @param indexId The id of the index.\n         * @param subscriber The subscriber address whose units you want to update.\n         * @param units The amount of units you want to update to.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.updateSubscriptionUnits = (params) => {\n            return this.idaV1.updateSubscriptionUnits({\n                superToken: this.settings.address,\n                ...params,\n            });\n        };\n        /**\n         * Approves a Subscription, so the Subscriber won't need to claim tokens when the Publisher distributes.\n         * @param indexId The id of the index.\n         * @param publisher The publisher address whose subscription you want to approve.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.approveSubscription = (params) => {\n            return this.idaV1.approveSubscription({\n                superToken: this.settings.address,\n                ...params,\n            });\n        };\n        /**\n         * Revokes a Subscription, so the Subscriber will need to claim tokens when the Publisher distributes.\n         * @param indexId The id of the index.\n         * @param publisher The index publisher address you want to revoke for the subscriber.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.revokeSubscription = (params) => {\n            return this.idaV1.revokeSubscription({\n                superToken: this.settings.address,\n                ...params,\n            });\n        };\n        /**\n         * Deletes a Subscription by setting the `units` allocated to the Subscriber to 0.\n         * @param indexId The id of the index.\n         * @param subscriber The subscriber address whose subscription you want to delete.\n         * @param publisher The publisher address of the index you are targeting.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.deleteSubscription = (params) => {\n            return this.idaV1.deleteSubscription({\n                superToken: this.settings.address,\n                ...params,\n            });\n        };\n        /**\n         * Claims any pending tokens allocated to the Subscription (unapproved).\n         * @param indexId The id of the index.\n         * @param subscriber The subscriber address who you are claiming for.\n         * @param publisher The publisher address of the index you are targeting.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.claim = (params) => {\n            return this.idaV1.claim({\n                superToken: this.settings.address,\n                ...params,\n            });\n        };\n        /** ### Governance Read Functions ### */\n        this.getGovernanceParameters = async (providerOrSigner) => {\n            return this.governance.getGovernanceParameters({\n                providerOrSigner,\n                token: this.settings.address,\n            });\n        };\n        this.options = options;\n        this.settings = settings;\n        this.cfaV1 = new ConstantFlowAgreementV1({\n            config: this.settings.config,\n        });\n        this.idaV1 = new InstantDistributionAgreementV1({\n            config: this.settings.config,\n        });\n        this.governance = new Governance(this.settings.config.governanceAddress, this.settings.config.hostAddress);\n        this.contract = new ethers.Contract(this.settings.address, SuperTokenABI.abi);\n    }\n    /** ### CFA ACL Write Functions (byOperator) ### */\n    /**\n     * Update permissions for a flow operator as a sender.\n     * @param sender The sender of the flow.\n     * @param flowOperator The permission grantee address\n     * @param permission The permissions to set.\n     * @param flowRateAllowance The flowRateAllowance granted to the flow operator.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    updateFlowOperatorPermissions(params) {\n        return this.cfaV1.updateFlowOperatorPermissions({\n            superToken: this.settings.address,\n            ...params,\n        });\n    }\n    /**\n     * Give flow operator full control - max flow rate and create/update/delete permissions.\n     * @param sender The sender of the flow.\n     * @param flowOperator The permission grantee address\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     */\n    authorizeFlowOperatorWithFullControl(params) {\n        return this.cfaV1.authorizeFlowOperatorWithFullControl({\n            superToken: this.settings.address,\n            ...params,\n        });\n    }\n    /**\n     * Revoke flow operator control - set flow rate to 0 with no permissions.\n     * @param sender The sender of the flow.\n     * @param flowOperator The permission grantee address\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     */\n    revokeFlowOperatorWithFullControl(params) {\n        return this.cfaV1.revokeFlowOperatorWithFullControl({\n            superToken: this.settings.address,\n            ...params,\n        });\n    }\n}\n_a = SuperToken;\nSuperToken.create = async (options) => {\n    if (!options.chainId && !options.networkName) {\n        throw new SFError({\n            type: \"SUPERTOKEN_INITIALIZATION\",\n            customMessage: \"You must input chainId or networkName.\",\n        });\n    }\n    const networkName = getNetworkName(options);\n    const chainId = options.chainId || networkNameToChainIdMap.get(networkName);\n    try {\n        const superToken = new ethers.Contract(options.address, SuperTokenABI.abi);\n        const underlyingTokenAddress = await superToken\n            .connect(options.provider)\n            .getUnderlyingToken();\n        const settings = {\n            address: options.address,\n            config: options.config,\n            chainId,\n            networkName,\n        };\n        const tokenSymbol = await superToken\n            .connect(options.provider)\n            .symbol();\n        const resolverData = chainIdToResolverDataMap.get(chainId) || {\n            subgraphAPIEndpoint: \"\",\n            resolverAddress: \"\",\n            networkName: \"\",\n            nativeTokenSymbol: \"\",\n        };\n        const nativeTokenSymbol = resolverData.nativeTokenSymbol || \"ETH\";\n        const nativeSuperTokenSymbol = nativeTokenSymbol + \"x\";\n        if (nativeSuperTokenSymbol === tokenSymbol) {\n            return new NativeAssetSuperToken(options, settings, nativeTokenSymbol);\n        }\n        if (underlyingTokenAddress !== ethers.constants.AddressZero) {\n            return new WrapperSuperToken(options, {\n                ...settings,\n                underlyingTokenAddress,\n            });\n        }\n        return new PureSuperToken(options, settings);\n    }\n    catch (err) {\n        throw new SFError({\n            type: \"SUPERTOKEN_INITIALIZATION\",\n            customMessage: \"There was an error initializing the SuperToken\",\n            errorObject: err,\n        });\n    }\n};\n/**\n * WrapperSuperToken has an underlying ERC20 token.\n */\nexport class WrapperSuperToken extends SuperToken {\n    constructor(options, settings) {\n        super(options, settings);\n        /** ### WrapperSuperToken Contract Write Functions ### */\n        /**\n         * Downgrade `amount` SuperToken's.\n         * @param amount The amount to be downgraded.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.downgrade = ({ amount, overrides, }) => {\n            const txn = this.contract.populateTransaction.downgrade(amount, overrides || {});\n            return new Operation(txn, \"SUPERTOKEN_DOWNGRADE\");\n        };\n        /**\n         * Upgrade `amount` SuperToken's.\n         * @param amount The amount to be upgraded.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.upgrade = ({ amount, overrides, }) => {\n            const txn = this.contract.populateTransaction.upgrade(amount, overrides || {});\n            return new Operation(txn, \"SUPERTOKEN_UPGRADE\");\n        };\n        /**\n         * Upgrade `amount` of an ERC20 token to its SuperToken to `to` address.\n         * @param amount The amount to be upgraded.\n         * @param to The destination of the upgraded native asset super tokens.\n         * @param data Bytes operatorData\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed.\n         */\n        this.upgradeTo = ({ amount, to, data = \"0x\", overrides, }) => {\n            const txn = this.contract.populateTransaction.upgradeTo(to, amount, data, {\n                ...overrides,\n            });\n            return new Operation(txn, \"UNSUPPORTED\");\n        };\n        this.underlyingToken = new ERC20Token(settings.underlyingTokenAddress);\n    }\n}\n/**\n * PureSuperToken doesn't have any underlying ERC20 token.\n */\nexport class PureSuperToken extends SuperToken {\n    constructor(options, settings) {\n        super(options, settings);\n    }\n}\n/**\n * NativeAssetSuperToken wraps the native asset of the network.\n */\nexport class NativeAssetSuperToken extends SuperToken {\n    constructor(options, settings, nativeTokenSymbol) {\n        super(options, settings);\n        /**\n         * Upgrade `amount` of a network's native asset to its SuperToken.\n         * @param amount The amount to be upgraded.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed.\n         */\n        this.upgrade = ({ amount, overrides, }) => {\n            const txn = this.nativeAssetContract.populateTransaction.upgradeByETH({\n                ...overrides,\n                value: amount,\n            });\n            return new Operation(txn, \"UNSUPPORTED\");\n        };\n        /**\n         * Upgrade `amount` of a network's native asset to its SuperToken to `to` address.\n         * @param amount The amount to be upgraded.\n         * @param to The destination of the upgraded native asset super tokens.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed.\n         */\n        this.upgradeTo = ({ amount, to, overrides, }) => {\n            const txn = this.nativeAssetContract.populateTransaction.upgradeByETHTo(to, {\n                ...overrides,\n                value: amount,\n            });\n            return new Operation(txn, \"UNSUPPORTED\");\n        };\n        /**\n         * Downgrade `amount` of a native asset super token to the underlying native asset.\n         * @param amount The amount to be upgraded.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed.\n         */\n        this.downgrade = ({ amount, overrides, }) => {\n            const txn = this.nativeAssetContract.populateTransaction.downgradeToETH(amount, {\n                ...overrides,\n            });\n            return new Operation(txn, \"UNSUPPORTED\");\n        };\n        this.nativeTokenSymbol = nativeTokenSymbol;\n    }\n    get nativeAssetContract() {\n        return new ethers.Contract(this.settings.address, ISETHABI.abi);\n    }\n}\n//# sourceMappingURL=SuperToken.js.map"]},"metadata":{},"sourceType":"module"}