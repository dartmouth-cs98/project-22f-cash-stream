{"ast":null,"code":"\"use strict\";\n\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { BaseProvider, Resolver } from \"./base-provider\";\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { AnkrProvider } from \"./ankr-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n////////////////////////\n// Helper Functions\nfunction getDefaultProvider(network, options) {\n  if (network == null) {\n    network = \"homestead\";\n  }\n  // If passed a URL, figure out the right type of provider based on the scheme\n  if (typeof network === \"string\") {\n    // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n    // Handle http and ws (and their secure variants)\n    var match = network.match(/^(ws|http)s?:/i);\n    if (match) {\n      switch (match[1].toLowerCase()) {\n        case \"http\":\n        case \"https\":\n          return new JsonRpcProvider(network);\n        case \"ws\":\n        case \"wss\":\n          return new WebSocketProvider(network);\n        default:\n          logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n      }\n    }\n  }\n  var n = getNetwork(network);\n  if (!n || !n._defaultProvider) {\n    logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n      operation: \"getDefaultProvider\",\n      network: network\n    });\n  }\n  return n._defaultProvider({\n    FallbackProvider: FallbackProvider,\n    AlchemyProvider: AlchemyProvider,\n    AnkrProvider: AnkrProvider,\n    CloudflareProvider: CloudflareProvider,\n    EtherscanProvider: EtherscanProvider,\n    InfuraProvider: InfuraProvider,\n    JsonRpcProvider: JsonRpcProvider,\n    NodesmithProvider: NodesmithProvider,\n    PocketProvider: PocketProvider,\n    Web3Provider: Web3Provider,\n    IpcProvider: IpcProvider\n  }, options);\n}\n////////////////////////\n// Exports\nexport {\n// Abstract Providers (or Abstract-ish)\nProvider, BaseProvider, Resolver, UrlJsonRpcProvider,\n///////////////////////\n// Concrete Providers\nFallbackProvider, AlchemyProvider, AlchemyWebSocketProvider, AnkrProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, InfuraWebSocketProvider, JsonRpcProvider, JsonRpcBatchProvider, NodesmithProvider, PocketProvider, StaticJsonRpcProvider, Web3Provider, WebSocketProvider, IpcProvider,\n///////////////////////\n// Signer\nJsonRpcSigner,\n///////////////////////\n// Functions\ngetDefaultProvider, getNetwork, isCommunityResource, isCommunityResourcable, showThrottleMessage,\n///////////////////////\n// Objects\nFormatter };","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { BaseProvider, Resolver } from \"./base-provider\";\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { AnkrProvider } from \"./ankr-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n////////////////////////\n// Helper Functions\nfunction getDefaultProvider(network, options) {\n    if (network == null) {\n        network = \"homestead\";\n    }\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof (network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1].toLowerCase()) {\n                case \"http\":\n                case \"https\":\n                    return new JsonRpcProvider(network);\n                case \"ws\":\n                case \"wss\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n    return n._defaultProvider({\n        FallbackProvider,\n        AlchemyProvider,\n        AnkrProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        PocketProvider,\n        Web3Provider,\n        IpcProvider,\n    }, options);\n}\n////////////////////////\n// Exports\nexport { \n// Abstract Providers (or Abstract-ish)\nProvider, BaseProvider, Resolver, UrlJsonRpcProvider, \n///////////////////////\n// Concrete Providers\nFallbackProvider, AlchemyProvider, AlchemyWebSocketProvider, AnkrProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, InfuraWebSocketProvider, JsonRpcProvider, JsonRpcBatchProvider, NodesmithProvider, PocketProvider, StaticJsonRpcProvider, Web3Provider, WebSocketProvider, IpcProvider, \n///////////////////////\n// Signer\nJsonRpcSigner, \n///////////////////////\n// Functions\ngetDefaultProvider, getNetwork, isCommunityResource, isCommunityResourcable, showThrottleMessage, \n///////////////////////\n// Objects\nFormatter };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}