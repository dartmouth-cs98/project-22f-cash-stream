{"ast":null,"code":"import { concat, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { ens_normalize } from \"./ens-normalize/lib\";\nvar Zeros = new Uint8Array(32);\nZeros.fill(0);\nfunction checkComponent(comp) {\n  if (comp.length === 0) {\n    throw new Error(\"invalid ENS name; empty component\");\n  }\n  return comp;\n}\nfunction ensNameSplit(name) {\n  var bytes = toUtf8Bytes(ens_normalize(name));\n  var comps = [];\n  if (name.length === 0) {\n    return comps;\n  }\n  var last = 0;\n  for (var i = 0; i < bytes.length; i++) {\n    var d = bytes[i];\n    // A separator (i.e. \".\"); copy this component\n    if (d === 0x2e) {\n      comps.push(checkComponent(bytes.slice(last, i)));\n      last = i + 1;\n    }\n  }\n  // There was a stray separator at the end of the name\n  if (last >= bytes.length) {\n    throw new Error(\"invalid ENS name; empty component\");\n  }\n  comps.push(checkComponent(bytes.slice(last)));\n  return comps;\n}\nexport function ensNormalize(name) {\n  return ensNameSplit(name).map(function (comp) {\n    return toUtf8String(comp);\n  }).join(\".\");\n}\nexport function isValidName(name) {\n  try {\n    return ensNameSplit(name).length !== 0;\n  } catch (error) {}\n  return false;\n}\nexport function namehash(name) {\n  /* istanbul ignore if */\n  if (typeof name !== \"string\") {\n    logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n  }\n  var result = Zeros;\n  var comps = ensNameSplit(name);\n  while (comps.length) {\n    result = keccak256(concat([result, keccak256(comps.pop())]));\n  }\n  return hexlify(result);\n}\nexport function dnsEncode(name) {\n  return hexlify(concat(ensNameSplit(name).map(function (comp) {\n    // DNS does not allow components over 63 bytes in length\n    if (comp.length > 63) {\n      throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n    }\n    var bytes = new Uint8Array(comp.length + 1);\n    bytes.set(comp, 1);\n    bytes[0] = bytes.length - 1;\n    return bytes;\n  }))) + \"00\";\n}","map":{"version":3,"sources":["../src.ts/namehash.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { concat, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { ens_normalize } from \"./ens-normalize/lib\";\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\nfunction checkComponent(comp) {\n    if (comp.length === 0) {\n        throw new Error(\"invalid ENS name; empty component\");\n    }\n    return comp;\n}\nfunction ensNameSplit(name) {\n    const bytes = toUtf8Bytes(ens_normalize(name));\n    const comps = [];\n    if (name.length === 0) {\n        return comps;\n    }\n    let last = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const d = bytes[i];\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n    // There was a stray separator at the end of the name\n    if (last >= bytes.length) {\n        throw new Error(\"invalid ENS name; empty component\");\n    }\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\nexport function ensNormalize(name) {\n    return ensNameSplit(name).map((comp) => toUtf8String(comp)).join(\".\");\n}\nexport function isValidName(name) {\n    try {\n        return (ensNameSplit(name).length !== 0);\n    }\n    catch (error) { }\n    return false;\n}\nexport function namehash(name) {\n    /* istanbul ignore if */\n    if (typeof (name) !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n    }\n    let result = Zeros;\n    const comps = ensNameSplit(name);\n    while (comps.length) {\n        result = keccak256(concat([result, keccak256(comps.pop())]));\n    }\n    return hexlify(result);\n}\nexport function dnsEncode(name) {\n    return hexlify(concat(ensNameSplit(name).map((comp) => {\n        // DNS does not allow components over 63 bytes in length\n        if (comp.length > 63) {\n            throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n        }\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n    }))) + \"00\";\n}\n//# sourceMappingURL=namehash.js.map"]},"metadata":{},"sourceType":"module"}