{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Description, defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n;\n;\n//export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\nexport var ForkEvent = /*#__PURE__*/function (_Description) {\n  _inherits(ForkEvent, _Description);\n  var _super = _createSuper(ForkEvent);\n  function ForkEvent() {\n    _classCallCheck(this, ForkEvent);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ForkEvent, null, [{\n    key: \"isForkEvent\",\n    value: function isForkEvent(value) {\n      return !!(value && value._isForkEvent);\n    }\n  }]);\n  return ForkEvent;\n}(Description);\nexport var BlockForkEvent = /*#__PURE__*/function (_ForkEvent) {\n  _inherits(BlockForkEvent, _ForkEvent);\n  var _super2 = _createSuper(BlockForkEvent);\n  function BlockForkEvent(blockHash, expiry) {\n    _classCallCheck(this, BlockForkEvent);\n    if (!isHexString(blockHash, 32)) {\n      logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n    }\n    return _super2.call(this, {\n      _isForkEvent: true,\n      _isBlockForkEvent: true,\n      expiry: expiry || 0,\n      blockHash: blockHash\n    });\n  }\n  return _createClass(BlockForkEvent);\n}(ForkEvent);\nexport var TransactionForkEvent = /*#__PURE__*/function (_ForkEvent2) {\n  _inherits(TransactionForkEvent, _ForkEvent2);\n  var _super3 = _createSuper(TransactionForkEvent);\n  function TransactionForkEvent(hash, expiry) {\n    _classCallCheck(this, TransactionForkEvent);\n    if (!isHexString(hash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n    }\n    return _super3.call(this, {\n      _isForkEvent: true,\n      _isTransactionForkEvent: true,\n      expiry: expiry || 0,\n      hash: hash\n    });\n  }\n  return _createClass(TransactionForkEvent);\n}(ForkEvent);\nexport var TransactionOrderForkEvent = /*#__PURE__*/function (_ForkEvent3) {\n  _inherits(TransactionOrderForkEvent, _ForkEvent3);\n  var _super4 = _createSuper(TransactionOrderForkEvent);\n  function TransactionOrderForkEvent(beforeHash, afterHash, expiry) {\n    _classCallCheck(this, TransactionOrderForkEvent);\n    if (!isHexString(beforeHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n    }\n    if (!isHexString(afterHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n    }\n    return _super4.call(this, {\n      _isForkEvent: true,\n      _isTransactionOrderForkEvent: true,\n      expiry: expiry || 0,\n      beforeHash: beforeHash,\n      afterHash: afterHash\n    });\n  }\n  return _createClass(TransactionOrderForkEvent);\n}(ForkEvent);\n///////////////////////////////\n// Exported Abstracts\nexport var Provider = /*#__PURE__*/function () {\n  function Provider() {\n    _classCallCheck(this, Provider);\n    logger.checkAbstract(this instanceof Provider ? this.constructor : void 0, Provider);\n    defineReadOnly(this, \"_isProvider\", true);\n  }\n  _createClass(Provider, [{\n    key: \"getFeeData\",\n    value: function getFeeData() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$resolvePropert, block, gasPrice, lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return resolveProperties({\n                  block: this.getBlock(\"latest\"),\n                  gasPrice: this.getGasPrice().catch(function (error) {\n                    // @TODO: Why is this now failing on Calaveras?\n                    //console.log(error);\n                    return null;\n                  })\n                });\n              case 2:\n                _yield$resolvePropert = _context.sent;\n                block = _yield$resolvePropert.block;\n                gasPrice = _yield$resolvePropert.gasPrice;\n                lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;\n                if (block && block.baseFeePerGas) {\n                  // We may want to compute this more accurately in the future,\n                  // using the formula \"check if the base fee is correct\".\n                  // See: https://eips.ethereum.org/EIPS/eip-1559\n                  lastBaseFeePerGas = block.baseFeePerGas;\n                  maxPriorityFeePerGas = BigNumber.from(\"1500000000\");\n                  maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n                }\n                return _context.abrupt(\"return\", {\n                  lastBaseFeePerGas: lastBaseFeePerGas,\n                  maxFeePerGas: maxFeePerGas,\n                  maxPriorityFeePerGas: maxPriorityFeePerGas,\n                  gasPrice: gasPrice\n                });\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    // Alias for \"on\"\n  }, {\n    key: \"addListener\",\n    value: function addListener(eventName, listener) {\n      return this.on(eventName, listener);\n    }\n    // Alias for \"off\"\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventName, listener) {\n      return this.off(eventName, listener);\n    }\n  }], [{\n    key: \"isProvider\",\n    value: function isProvider(value) {\n      return !!(value && value._isProvider);\n    }\n  }]);\n  return Provider;\n}();","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Description, defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n//export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\nexport class ForkEvent extends Description {\n    static isForkEvent(value) {\n        return !!(value && value._isForkEvent);\n    }\n}\nexport class BlockForkEvent extends ForkEvent {\n    constructor(blockHash, expiry) {\n        if (!isHexString(blockHash, 32)) {\n            logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n        }\n        super({\n            _isForkEvent: true,\n            _isBlockForkEvent: true,\n            expiry: (expiry || 0),\n            blockHash: blockHash\n        });\n    }\n}\nexport class TransactionForkEvent extends ForkEvent {\n    constructor(hash, expiry) {\n        if (!isHexString(hash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n        }\n        super({\n            _isForkEvent: true,\n            _isTransactionForkEvent: true,\n            expiry: (expiry || 0),\n            hash: hash\n        });\n    }\n}\nexport class TransactionOrderForkEvent extends ForkEvent {\n    constructor(beforeHash, afterHash, expiry) {\n        if (!isHexString(beforeHash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n        }\n        if (!isHexString(afterHash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n        }\n        super({\n            _isForkEvent: true,\n            _isTransactionOrderForkEvent: true,\n            expiry: (expiry || 0),\n            beforeHash: beforeHash,\n            afterHash: afterHash\n        });\n    }\n}\n///////////////////////////////\n// Exported Abstracts\nexport class Provider {\n    constructor() {\n        logger.checkAbstract(new.target, Provider);\n        defineReadOnly(this, \"_isProvider\", true);\n    }\n    getFeeData() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { block, gasPrice } = yield resolveProperties({\n                block: this.getBlock(\"latest\"),\n                gasPrice: this.getGasPrice().catch((error) => {\n                    // @TODO: Why is this now failing on Calaveras?\n                    //console.log(error);\n                    return null;\n                })\n            });\n            let lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;\n            if (block && block.baseFeePerGas) {\n                // We may want to compute this more accurately in the future,\n                // using the formula \"check if the base fee is correct\".\n                // See: https://eips.ethereum.org/EIPS/eip-1559\n                lastBaseFeePerGas = block.baseFeePerGas;\n                maxPriorityFeePerGas = BigNumber.from(\"1500000000\");\n                maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n            }\n            return { lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas, gasPrice };\n        });\n    }\n    // Alias for \"on\"\n    addListener(eventName, listener) {\n        return this.on(eventName, listener);\n    }\n    // Alias for \"off\"\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n    static isProvider(value) {\n        return !!(value && value._isProvider);\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}