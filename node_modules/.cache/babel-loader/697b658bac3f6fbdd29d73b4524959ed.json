{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { getUrl } from \"./geturl\";\nfunction staller(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, duration);\n  });\n}\nfunction bodyify(value, type) {\n  if (value == null) {\n    return null;\n  }\n  if (typeof value === \"string\") {\n    return value;\n  }\n  if (isBytesLike(value)) {\n    if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n      try {\n        return toUtf8String(value);\n      } catch (error) {}\n      ;\n    }\n    return hexlify(value);\n  }\n  return value;\n}\nfunction unpercent(value) {\n  return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, function (all, code) {\n    return String.fromCharCode(parseInt(code, 16));\n  }));\n}\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData(connection, body, processFunc) {\n  // How many times to retry in the event of a throttle\n  var attemptLimit = typeof connection === \"object\" && connection.throttleLimit != null ? connection.throttleLimit : 12;\n  logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n  var throttleCallback = typeof connection === \"object\" ? connection.throttleCallback : null;\n  var throttleSlotInterval = typeof connection === \"object\" && typeof connection.throttleSlotInterval === \"number\" ? connection.throttleSlotInterval : 100;\n  logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n  var errorPassThrough = typeof connection === \"object\" ? !!connection.errorPassThrough : false;\n  var headers = {};\n  var url = null;\n  // @TODO: Allow ConnectionInfo to override some of these values\n  var options = {\n    method: \"GET\"\n  };\n  var allow304 = false;\n  var timeout = 2 * 60 * 1000;\n  if (typeof connection === \"string\") {\n    url = connection;\n  } else if (typeof connection === \"object\") {\n    if (connection == null || connection.url == null) {\n      logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n    }\n    url = connection.url;\n    if (typeof connection.timeout === \"number\" && connection.timeout > 0) {\n      timeout = connection.timeout;\n    }\n    if (connection.headers) {\n      for (var key in connection.headers) {\n        headers[key.toLowerCase()] = {\n          key: key,\n          value: String(connection.headers[key])\n        };\n        if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n          allow304 = true;\n        }\n      }\n    }\n    options.allowGzip = !!connection.allowGzip;\n    if (connection.user != null && connection.password != null) {\n      if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n        logger.throwError(\"basic authentication requires a secure https url\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"url\",\n          url: url,\n          user: connection.user,\n          password: \"[REDACTED]\"\n        });\n      }\n      var authorization = connection.user + \":\" + connection.password;\n      headers[\"authorization\"] = {\n        key: \"Authorization\",\n        value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n      };\n    }\n    if (connection.skipFetchSetup != null) {\n      options.skipFetchSetup = !!connection.skipFetchSetup;\n    }\n    if (connection.fetchOptions != null) {\n      options.fetchOptions = shallowCopy(connection.fetchOptions);\n    }\n  }\n  var reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n  var dataMatch = url ? url.match(reData) : null;\n  if (dataMatch) {\n    try {\n      var response = {\n        statusCode: 200,\n        statusMessage: \"OK\",\n        headers: {\n          \"content-type\": dataMatch[1] || \"text/plain\"\n        },\n        body: dataMatch[2] ? base64Decode(dataMatch[3]) : unpercent(dataMatch[3])\n      };\n      var result = response.body;\n      if (processFunc) {\n        result = processFunc(response.body, response);\n      }\n      return Promise.resolve(result);\n    } catch (error) {\n      logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n        body: bodyify(dataMatch[1], dataMatch[2]),\n        error: error,\n        requestBody: null,\n        requestMethod: \"GET\",\n        url: url\n      });\n    }\n  }\n  if (body) {\n    options.method = \"POST\";\n    options.body = body;\n    if (headers[\"content-type\"] == null) {\n      headers[\"content-type\"] = {\n        key: \"Content-Type\",\n        value: \"application/octet-stream\"\n      };\n    }\n    if (headers[\"content-length\"] == null) {\n      headers[\"content-length\"] = {\n        key: \"Content-Length\",\n        value: String(body.length)\n      };\n    }\n  }\n  var flatHeaders = {};\n  Object.keys(headers).forEach(function (key) {\n    var header = headers[key];\n    flatHeaders[header.key] = header.value;\n  });\n  options.headers = flatHeaders;\n  var runningTimeout = function () {\n    var timer = null;\n    var promise = new Promise(function (resolve, reject) {\n      if (timeout) {\n        timer = setTimeout(function () {\n          if (timer == null) {\n            return;\n          }\n          timer = null;\n          reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            timeout: timeout,\n            url: url\n          }));\n        }, timeout);\n      }\n    });\n    var cancel = function cancel() {\n      if (timer == null) {\n        return;\n      }\n      clearTimeout(timer);\n      timer = null;\n    };\n    return {\n      promise: promise,\n      cancel: cancel\n    };\n  }();\n  var runningFetch = function () {\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var attempt, _response, location, tryAgain, stall, retryAfter, _body, _result, _tryAgain, _timeout;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              attempt = 0;\n            case 1:\n              if (!(attempt < attemptLimit)) {\n                _context.next = 65;\n                break;\n              }\n              _response = null;\n              _context.prev = 3;\n              _context.next = 6;\n              return getUrl(url, options);\n            case 6:\n              _response = _context.sent;\n              if (!(attempt < attemptLimit)) {\n                _context.next = 28;\n                break;\n              }\n              if (!(_response.statusCode === 301 || _response.statusCode === 302)) {\n                _context.next = 15;\n                break;\n              }\n              // Redirection; for now we only support absolute locataions\n              location = _response.headers.location || \"\";\n              if (!(options.method === \"GET\" && location.match(/^https:/))) {\n                _context.next = 13;\n                break;\n              }\n              url = _response.headers.location;\n              return _context.abrupt(\"continue\", 62);\n            case 13:\n              _context.next = 28;\n              break;\n            case 15:\n              if (!(_response.statusCode === 429)) {\n                _context.next = 28;\n                break;\n              }\n              // Exponential back-off throttling\n              tryAgain = true;\n              if (!throttleCallback) {\n                _context.next = 21;\n                break;\n              }\n              _context.next = 20;\n              return throttleCallback(attempt, url);\n            case 20:\n              tryAgain = _context.sent;\n            case 21:\n              if (!tryAgain) {\n                _context.next = 28;\n                break;\n              }\n              stall = 0;\n              retryAfter = _response.headers[\"retry-after\"];\n              if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                stall = parseInt(retryAfter) * 1000;\n              } else {\n                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n              }\n              //console.log(\"Stalling 429\");\n              _context.next = 27;\n              return staller(stall);\n            case 27:\n              return _context.abrupt(\"continue\", 62);\n            case 28:\n              _context.next = 34;\n              break;\n            case 30:\n              _context.prev = 30;\n              _context.t0 = _context[\"catch\"](3);\n              _response = _context.t0.response;\n              if (_response == null) {\n                runningTimeout.cancel();\n                logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                  requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                  requestMethod: options.method,\n                  serverError: _context.t0,\n                  url: url\n                });\n              }\n            case 34:\n              _body = _response.body;\n              if (allow304 && _response.statusCode === 304) {\n                _body = null;\n              } else if (!errorPassThrough && (_response.statusCode < 200 || _response.statusCode >= 300)) {\n                runningTimeout.cancel();\n                logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                  status: _response.statusCode,\n                  headers: _response.headers,\n                  body: bodyify(_body, _response.headers ? _response.headers[\"content-type\"] : null),\n                  requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                  requestMethod: options.method,\n                  url: url\n                });\n              }\n              if (!processFunc) {\n                _context.next = 60;\n                break;\n              }\n              _context.prev = 37;\n              _context.next = 40;\n              return processFunc(_body, _response);\n            case 40:\n              _result = _context.sent;\n              runningTimeout.cancel();\n              return _context.abrupt(\"return\", _result);\n            case 45:\n              _context.prev = 45;\n              _context.t1 = _context[\"catch\"](37);\n              if (!(_context.t1.throttleRetry && attempt < attemptLimit)) {\n                _context.next = 58;\n                break;\n              }\n              _tryAgain = true;\n              if (!throttleCallback) {\n                _context.next = 53;\n                break;\n              }\n              _context.next = 52;\n              return throttleCallback(attempt, url);\n            case 52:\n              _tryAgain = _context.sent;\n            case 53:\n              if (!_tryAgain) {\n                _context.next = 58;\n                break;\n              }\n              _timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt))); //console.log(\"Stalling callback\");\n              _context.next = 57;\n              return staller(_timeout);\n            case 57:\n              return _context.abrupt(\"continue\", 62);\n            case 58:\n              runningTimeout.cancel();\n              logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(_body, _response.headers ? _response.headers[\"content-type\"] : null),\n                error: _context.t1,\n                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                requestMethod: options.method,\n                url: url\n              });\n            case 60:\n              runningTimeout.cancel();\n              // If we had a processFunc, it either returned a T or threw above.\n              // The \"body\" is now a Uint8Array.\n              return _context.abrupt(\"return\", _body);\n            case 62:\n              attempt++;\n              _context.next = 1;\n              break;\n            case 65:\n              return _context.abrupt(\"return\", logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                requestMethod: options.method,\n                url: url\n              }));\n            case 66:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 30], [37, 45]]);\n    }));\n  }();\n  return Promise.race([runningTimeout.promise, runningFetch]);\n}\nexport function fetchJson(connection, json, processFunc) {\n  var processJsonFunc = function processJsonFunc(value, response) {\n    var result = null;\n    if (value != null) {\n      try {\n        result = JSON.parse(toUtf8String(value));\n      } catch (error) {\n        logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n          body: value,\n          error: error\n        });\n      }\n    }\n    if (processFunc) {\n      result = processFunc(result, response);\n    }\n    return result;\n  };\n  // If we have json to send, we must\n  // - add content-type of application/json (unless already overridden)\n  // - convert the json to bytes\n  var body = null;\n  if (json != null) {\n    body = toUtf8Bytes(json);\n    // Create a connection with the content-type set for JSON\n    var updated = typeof connection === \"string\" ? {\n      url: connection\n    } : shallowCopy(connection);\n    if (updated.headers) {\n      var hasContentType = Object.keys(updated.headers).filter(function (k) {\n        return k.toLowerCase() === \"content-type\";\n      }).length !== 0;\n      if (!hasContentType) {\n        updated.headers = shallowCopy(updated.headers);\n        updated.headers[\"content-type\"] = \"application/json\";\n      }\n    } else {\n      updated.headers = {\n        \"content-type\": \"application/json\"\n      };\n    }\n    connection = updated;\n  }\n  return _fetchData(connection, body, processJsonFunc);\n}\nexport function poll(func, options) {\n  if (!options) {\n    options = {};\n  }\n  options = shallowCopy(options);\n  if (options.floor == null) {\n    options.floor = 0;\n  }\n  if (options.ceiling == null) {\n    options.ceiling = 10000;\n  }\n  if (options.interval == null) {\n    options.interval = 250;\n  }\n  return new Promise(function (resolve, reject) {\n    var timer = null;\n    var done = false;\n    // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n    var cancel = function cancel() {\n      if (done) {\n        return false;\n      }\n      done = true;\n      if (timer) {\n        clearTimeout(timer);\n      }\n      return true;\n    };\n    if (options.timeout) {\n      timer = setTimeout(function () {\n        if (cancel()) {\n          reject(new Error(\"timeout\"));\n        }\n      }, options.timeout);\n    }\n    var retryLimit = options.retryLimit;\n    var attempt = 0;\n    function check() {\n      return func().then(function (result) {\n        // If we have a result, or are allowed null then we're done\n        if (result !== undefined) {\n          if (cancel()) {\n            resolve(result);\n          }\n        } else if (options.oncePoll) {\n          options.oncePoll.once(\"poll\", check);\n        } else if (options.onceBlock) {\n          options.onceBlock.once(\"block\", check);\n          // Otherwise, exponential back-off (up to 10s) our next request\n        } else if (!done) {\n          attempt++;\n          if (attempt > retryLimit) {\n            if (cancel()) {\n              reject(new Error(\"retry limit reached\"));\n            }\n            return;\n          }\n          var timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n          if (timeout < options.floor) {\n            timeout = options.floor;\n          }\n          if (timeout > options.ceiling) {\n            timeout = options.ceiling;\n          }\n          setTimeout(check, timeout);\n        }\n        return null;\n      }, function (error) {\n        if (cancel()) {\n          reject(error);\n        }\n      });\n    }\n    check();\n  });\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"AAAA,YAAY;;AAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEb,SAAS,MAAM,IAAI,YAAY,EAAE,MAAM,IAAI,YAAY,QAAQ,uBAAuB;AACtF,SAAS,OAAO,EAAE,WAAW,QAAQ,sBAAsB;AAC3D,SAAS,WAAW,QAAQ,2BAA2B;AACvD,SAAS,WAAW,EAAE,YAAY,QAAQ,wBAAwB;AAElE,SAAS,MAAM,QAAQ,uBAAuB;AAC9C,SAAS,OAAO,QAAQ,YAAY;AACpC,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC;AAElC,SAAS,MAAM,QAAiC,UAAU;AAE1D,SAAS,OAAO,CAAC,QAAgB,EAAA;EAC7B,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAI;IAC3B,UAAU,CAAC,OAAO,EAAE,QAAQ,CAAC;EACjC,CAAC,CAAC;AACN;AAEA,SAAS,OAAO,CAAC,KAAU,EAAE,IAAY,EAAA;EACrC,IAAI,KAAK,IAAI,IAAI,EAAE;IAAE,OAAO,IAAI;EAAG;EAEnC,IAAI,OAAO,KAAM,KAAK,QAAQ,EAAE;IAAE,OAAO,KAAK;EAAG;EAEjD,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;IACpB,IAAI,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,kBAAkB,CAAC,EAAE;MAC7F,IAAI;QACA,OAAO,YAAY,CAAC,KAAK,CAAC;OAC7B,CAAC,OAAO,KAAK,EAAE,CAAA;MAAG;IACtB;IACD,OAAO,OAAO,CAAC,KAAK,CAAC;EACxB;EAED,OAAO,KAAK;AAChB;AAkDA,SAAS,SAAS,CAAC,KAAa,EAAA;EAC5B,OAAO,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,uBAAuB,EAAE,UAAC,GAAG,EAAE,IAAI,EAAI;IACpE,OAAO,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;EAClD,CAAC,CAAC,CAAC;AACP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM,SAAU,UAAU,CAAiB,UAAmC,EAAE,IAAiB,EAAE,WAAmE,EAAA;EAElK;EACA,IAAM,YAAY,GAAI,OAAO,UAAW,KAAK,QAAQ,IAAI,UAAU,CAAC,aAAa,IAAI,IAAI,GAAI,UAAU,CAAC,aAAa,GAAE,EAAE;EACzH,MAAM,CAAC,cAAc,CAAE,YAAY,GAAG,CAAC,IAAK,YAAY,GAAG,CAAC,KAAM,CAAC,EAC/D,mCAAmC,EAAE,0BAA0B,EAAE,YAAY,CAAC;EAElF,IAAM,gBAAgB,GAAK,OAAO,UAAW,KAAK,QAAQ,GAAI,UAAU,CAAC,gBAAgB,GAAE,IAAK;EAChG,IAAM,oBAAoB,GAAK,OAAO,UAAW,KAAK,QAAQ,IAAI,OAAO,UAAU,CAAC,oBAAqB,KAAK,QAAQ,GAAI,UAAU,CAAC,oBAAoB,GAAE,GAAI;EAC/J,MAAM,CAAC,cAAc,CAAE,oBAAoB,GAAG,CAAC,IAAK,oBAAoB,GAAG,CAAC,KAAM,CAAC,EAC/E,2CAA2C,EAAE,iCAAiC,EAAE,oBAAoB,CAAC;EAEzG,IAAM,gBAAgB,GAAK,OAAO,UAAW,KAAK,QAAQ,GAAI,CAAC,CAAE,UAAU,CAAC,gBAAiB,GAAE,KAAM;EAErG,IAAM,OAAO,GAA8B,CAAA,CAAG;EAE9C,IAAI,GAAG,GAAW,IAAI;EAEtB;EACA,IAAM,OAAO,GAAY;IACrB,MAAM,EAAE;GACX;EAED,IAAI,QAAQ,GAAG,KAAK;EAEpB,IAAI,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI;EAE3B,IAAI,OAAO,UAAW,KAAK,QAAQ,EAAE;IACjC,GAAG,GAAG,UAAU;GAEnB,MAAM,IAAI,OAAO,UAAW,KAAK,QAAQ,EAAE;IACxC,IAAI,UAAU,IAAI,IAAI,IAAI,UAAU,CAAC,GAAG,IAAI,IAAI,EAAE;MAC9C,MAAM,CAAC,kBAAkB,CAAC,aAAa,EAAE,gBAAgB,EAAE,UAAU,CAAC;IACzE;IAED,GAAG,GAAG,UAAU,CAAC,GAAG;IAEpB,IAAI,OAAO,UAAU,CAAC,OAAQ,KAAK,QAAQ,IAAI,UAAU,CAAC,OAAO,GAAG,CAAC,EAAE;MACnE,OAAO,GAAG,UAAU,CAAC,OAAO;IAC/B;IAED,IAAI,UAAU,CAAC,OAAO,EAAE;MACpB,KAAK,IAAM,GAAG,IAAI,UAAU,CAAC,OAAO,EAAE;QAClC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,GAAG;UAAE,GAAG,EAAE,GAAG;UAAE,KAAK,EAAE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC;QAAC,CAAE;QACjF,IAAI,CAAC,eAAe,EAAE,mBAAmB,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,EAAE;UACxE,QAAQ,GAAG,IAAI;QAClB;MACJ;IACJ;IAED,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC,UAAU,CAAC,SAAS;IAE1C,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,IAAI,UAAU,CAAC,QAAQ,IAAI,IAAI,EAAE;MACxD,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,IAAI,UAAU,CAAC,2BAA2B,KAAK,IAAI,EAAE;QACrF,MAAM,CAAC,UAAU,CACb,kDAAkD,EAClD,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAC9B;UAAE,QAAQ,EAAE,KAAK;UAAE,GAAG,EAAE,GAAG;UAAE,IAAI,EAAE,UAAU,CAAC,IAAI;UAAE,QAAQ,EAAE;QAAY,CAAE,CAC/E;MACJ;MAED,IAAM,aAAa,GAAG,UAAU,CAAC,IAAI,GAAG,GAAG,GAAG,UAAU,CAAC,QAAQ;MACjE,OAAO,CAAC,eAAe,CAAC,GAAG;QACvB,GAAG,EAAE,eAAe;QACpB,KAAK,EAAE,QAAQ,GAAG,YAAY,CAAC,WAAW,CAAC,aAAa,CAAC;OAC5D;IACJ;IAED,IAAI,UAAU,CAAC,cAAc,IAAI,IAAI,EAAE;MACnC,OAAO,CAAC,cAAc,GAAG,CAAC,CAAC,UAAU,CAAC,cAAc;IACvD;IAED,IAAI,UAAU,CAAC,YAAY,IAAI,IAAI,EAAE;MACjC,OAAO,CAAC,YAAY,GAAG,WAAW,CAAC,UAAU,CAAC,YAAY,CAAC;IAC9D;EACJ;EAED,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,iCAAiC,EAAE,GAAG,CAAC;EACjE,IAAM,SAAS,GAAK,GAAG,GAAI,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,GAAE,IAAK;EACnD,IAAI,SAAS,EAAE;IACX,IAAI;MACA,IAAM,QAAQ,GAAG;QACb,UAAU,EAAE,GAAG;QACf,aAAa,EAAE,IAAI;QACnB,OAAO,EAAE;UAAE,cAAc,EAAG,SAAS,CAAC,CAAC,CAAC,IAAI;QAAa,CAAC;QAC1D,IAAI,EAAG,SAAS,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAE,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;OAC3E;MAED,IAAI,MAAM,GAAkB,QAAQ,CAAC,IAAI;MACzC,IAAI,WAAW,EAAE;QACb,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC;MAChD;MACD,OAAO,OAAO,CAAC,OAAO,CAAa,MAAM,CAAC;KAE7C,CAAC,OAAO,KAAK,EAAE;MACZ,MAAM,CAAC,UAAU,CAAC,2BAA2B,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;QACvE,IAAI,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;QACzC,KAAK,EAAE,KAAK;QACZ,WAAW,EAAE,IAAI;QACjB,aAAa,EAAE,KAAK;QACpB,GAAG,EAAE;OACR,CAAC;IACL;EACJ;EAED,IAAI,IAAI,EAAE;IACN,OAAO,CAAC,MAAM,GAAG,MAAM;IACvB,OAAO,CAAC,IAAI,GAAG,IAAI;IACnB,IAAI,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI,EAAE;MACjC,OAAO,CAAC,cAAc,CAAC,GAAG;QAAE,GAAG,EAAE,cAAc;QAAE,KAAK,EAAE;MAA0B,CAAE;IACvF;IACD,IAAI,OAAO,CAAC,gBAAgB,CAAC,IAAI,IAAI,EAAE;MACnC,OAAO,CAAC,gBAAgB,CAAC,GAAG;QAAE,GAAG,EAAE,gBAAgB;QAAE,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM;MAAC,CAAE;IACpF;EACJ;EAED,IAAM,WAAW,GAAgC,CAAA,CAAG;EACpD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG,EAAI;IACjC,IAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC;IAC3B,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,KAAK;EAC1C,CAAC,CAAC;EACF,OAAO,CAAC,OAAO,GAAG,WAAW;EAE7B,IAAM,cAAc,GAAI,YAAA;IACpB,IAAI,KAAK,GAAiB,IAAI;IAC9B,IAAM,OAAO,GAAmB,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM,EAAA;MAChE,IAAI,OAAO,EAAE;QACT,KAAK,GAAG,UAAU,CAAC,YAAK;UACpB,IAAI,KAAK,IAAI,IAAI,EAAE;YAAE;UAAS;UAC9B,KAAK,GAAG,IAAI;UAEZ,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;YACtD,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;YAC/D,aAAa,EAAE,OAAO,CAAC,MAAM;YAC7B,OAAO,EAAE,OAAO;YAChB,GAAG,EAAE;WACR,CAAC,CAAC;QACP,CAAC,EAAE,OAAO,CAAC;MACd;IACL,CAAC,CAAC;IAEF,IAAM,MAAM,GAAG,SAAT,MAAM,GAAG;MACX,IAAI,KAAK,IAAI,IAAI,EAAE;QAAE;MAAS;MAC9B,YAAY,CAAC,KAAK,CAAC;MACnB,KAAK,GAAG,IAAI;IAChB,CAAC;IAED,OAAO;MAAE,OAAO,EAAP,OAAO;MAAE,MAAM,EAAN;IAAM,CAAE;EAC9B,CAAC,EAAG;EAEJ,IAAM,YAAY,GAAI,YAAA;;;;;;;cAET,OAAO,GAAG,CAAC;YAAA;cAAA,MAAE,OAAO,GAAG,YAAY;gBAAA;gBAAA;cAAA;cACpC,SAAQ,GAAmB,IAAI;cAAA;cAAA;cAGpB,OAAM,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC;YAAA;cAArC,SAAQ;cAAA,MAEJ,OAAO,GAAG,YAAY;gBAAA;gBAAA;cAAA;cAAA,MAClB,SAAQ,CAAC,UAAU,KAAK,GAAG,IAAI,SAAQ,CAAC,UAAU,KAAK,GAAG;gBAAA;gBAAA;cAAA;cAC1D;cACM,QAAQ,GAAG,SAAQ,CAAC,OAAO,CAAC,QAAQ,IAAI,EAAE;cAAA,MAC5C,OAAO,CAAC,MAAM,KAAK,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC;gBAAA;gBAAA;cAAA;cACrD,GAAG,GAAG,SAAQ,CAAC,OAAO,CAAC,QAAQ;cAAC;YAAA;cAAA;cAAA;YAAA;cAAA,MAI7B,SAAQ,CAAC,UAAU,KAAK,GAAG;gBAAA;gBAAA;cAAA;cAClC;cACI,QAAQ,GAAG,IAAI;cAAA,KACf,gBAAgB;gBAAA;gBAAA;cAAA;cAAA;cACL,OAAM,gBAAgB,CAAC,OAAO,EAAE,GAAG,CAAC;YAAA;cAA/C,QAAQ;YAAA;cAAA,KAGR,QAAQ;gBAAA;gBAAA;cAAA;cACJ,KAAK,GAAG,CAAC;cAEP,UAAU,GAAG,SAAQ,CAAC,OAAO,CAAC,aAAa,CAAC;cAClD,IAAI,OAAO,UAAW,KAAK,QAAQ,IAAI,UAAU,CAAC,KAAK,CAAC,eAAe,CAAC,EAAE;gBACtE,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC,GAAG,IAAI;eACtC,MAAM;gBACH,KAAK,GAAG,oBAAoB,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;cACxF;cAED;cAAA;cACA,OAAM,OAAO,CAAC,KAAK,CAAC;YAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAOhC,SAAQ,GAAS,YAAO,QAAQ;cAChC,IAAI,SAAQ,IAAI,IAAI,EAAE;gBAClB,cAAc,CAAC,MAAM,EAAE;gBACvB,MAAM,CAAC,UAAU,CAAC,kBAAkB,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;kBAC9D,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;kBAC/D,aAAa,EAAE,OAAO,CAAC,MAAM;kBAC7B,WAAW,aAAO;kBAClB,GAAG,EAAE;iBACR,CAAC;;YACL;cAID,KAAI,GAAG,SAAQ,CAAC,IAAI;cAExB,IAAI,QAAQ,IAAI,SAAQ,CAAC,UAAU,KAAK,GAAG,EAAE;gBACzC,KAAI,GAAG,IAAI;eACd,MAAM,IAAI,CAAC,gBAAgB,KAAK,SAAQ,CAAC,UAAU,GAAG,GAAG,IAAI,SAAQ,CAAC,UAAU,IAAI,GAAG,CAAC,EAAE;gBACvF,cAAc,CAAC,MAAM,EAAE;gBACvB,MAAM,CAAC,UAAU,CAAC,cAAc,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;kBAC1D,MAAM,EAAE,SAAQ,CAAC,UAAU;kBAC3B,OAAO,EAAE,SAAQ,CAAC,OAAO;kBACzB,IAAI,EAAE,OAAO,CAAC,KAAI,EAAI,SAAQ,CAAC,OAAO,GAAI,SAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,GAAE,IAAI,CAAE;kBAClF,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;kBAC/D,aAAa,EAAE,OAAO,CAAC,MAAM;kBAC7B,GAAG,EAAE;iBACR,CAAC;;cACL,KAEG,WAAW;gBAAA;gBAAA;cAAA;cAAA;cAAA;cAEQ,OAAM,WAAW,CAAC,KAAI,EAAE,SAAQ,CAAC;YAAA;cAA1C,OAAM;cACZ,cAAc,CAAC,MAAM,EAAE;cAAC,iCACjB,OAAM;YAAA;cAAA;cAAA;cAAA,MAIT,YAAM,aAAa,IAAI,OAAO,GAAG,YAAY;gBAAA;gBAAA;cAAA;cACzC,SAAQ,GAAG,IAAI;cAAA,KACf,gBAAgB;gBAAA;gBAAA;cAAA;cAAA;cACL,OAAM,gBAAgB,CAAC,OAAO,EAAE,GAAG,CAAC;YAAA;cAA/C,SAAQ;YAAA;cAAA,KAGR,SAAQ;gBAAA;gBAAA;cAAA;cACF,QAAO,GAAG,oBAAoB,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAC7F;cAAA;cACA,OAAM,OAAO,CAAC,QAAO,CAAC;YAAA;cAAA;YAAA;cAK9B,cAAc,CAAC,MAAM,EAAE;cACvB,MAAM,CAAC,UAAU,CAAC,2BAA2B,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;gBACvE,IAAI,EAAE,OAAO,CAAC,KAAI,EAAI,SAAQ,CAAC,OAAO,GAAI,SAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,GAAE,IAAI,CAAE;gBAClF,KAAK,aAAO;gBACZ,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;gBAC/D,aAAa,EAAE,OAAO,CAAC,MAAM;gBAC7B,GAAG,EAAE;eACR,CAAC;YAAC;cAIX,cAAc,CAAC,MAAM,EAAE;cAEvB;cACA;cAAA,iCACoB,KAAK;YAAA;cA1GiB,OAAO,EAAE;cAAA;cAAA;YAAA;cAAA,iCA6GhD,MAAM,CAAC,UAAU,CAAC,iBAAiB,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;gBACpE,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;gBAC/D,aAAa,EAAE,OAAO,CAAC,MAAM;gBAC7B,GAAG,EAAE;eACR,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACL,EAAA;GAAA,EAAG;EAEJ,OAAO,OAAO,CAAC,IAAI,CAAC,CAAE,cAAc,CAAC,OAAO,EAAE,YAAY,CAAE,CAAC;AACjE;AAEA,OAAM,SAAU,SAAS,CAAC,UAAmC,EAAE,IAAa,EAAE,WAA8D,EAAA;EACxI,IAAI,eAAe,GAAG,SAAlB,eAAe,CAAI,KAAiB,EAAE,QAA2B,EAAI;IACrE,IAAI,MAAM,GAAQ,IAAI;IACtB,IAAI,KAAK,IAAI,IAAI,EAAE;MACf,IAAI;QACA,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;OAC3C,CAAC,OAAO,KAAK,EAAE;QACZ,MAAM,CAAC,UAAU,CAAC,cAAc,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;UAC1D,IAAI,EAAE,KAAK;UACX,KAAK,EAAE;SACV,CAAC;MACL;IACJ;IAED,IAAI,WAAW,EAAE;MACb,MAAM,GAAG,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC;IACzC;IAED,OAAO,MAAM;EACjB,CAAC;EAED;EACA;EACA;EACA,IAAI,IAAI,GAAe,IAAI;EAC3B,IAAI,IAAI,IAAI,IAAI,EAAE;IACd,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;IAExB;IACA,IAAM,OAAO,GAAoB,OAAO,UAAW,KAAK,QAAQ,GAAK;MAAE,GAAG,EAAE;IAAU,CAAE,GAAG,WAAW,CAAC,UAAU,CAAC;IAClH,IAAI,OAAO,CAAC,OAAO,EAAE;MACjB,IAAM,cAAc,GAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAC,CAAC;QAAA,OAAM,CAAC,CAAC,WAAW,EAAE,KAAK,cAAc;MAAA,CAAC,CAAC,CAAC,MAAM,KAAM,CAAC;MACtH,IAAI,CAAC,cAAc,EAAE;QACjB,OAAO,CAAC,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC;QAC9C,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB;MACvD;KACJ,MAAM;MACH,OAAO,CAAC,OAAO,GAAG;QAAE,cAAc,EAAE;MAAkB,CAAE;IAC3D;IACD,UAAU,GAAG,OAAO;EACvB;EAED,OAAO,UAAU,CAAM,UAAU,EAAE,IAAI,EAAE,eAAe,CAAC;AAC7D;AAEA,OAAM,SAAU,IAAI,CAAI,IAAsB,EAAE,OAAqB,EAAA;EACjE,IAAI,CAAC,OAAO,EAAE;IAAE,OAAO,GAAG,CAAA,CAAE;EAAG;EAC/B,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC;EAC9B,IAAI,OAAO,CAAC,KAAK,IAAI,IAAI,EAAE;IAAE,OAAO,CAAC,KAAK,GAAG,CAAC;EAAG;EACjD,IAAI,OAAO,CAAC,OAAO,IAAI,IAAI,EAAE;IAAE,OAAO,CAAC,OAAO,GAAG,KAAK;EAAG;EACzD,IAAI,OAAO,CAAC,QAAQ,IAAI,IAAI,EAAE;IAAE,OAAO,CAAC,QAAQ,GAAG,GAAG;EAAG;EAEzD,OAAO,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM,EAAA;IAEvC,IAAI,KAAK,GAAiB,IAAI;IAC9B,IAAI,IAAI,GAAY,KAAK;IAEzB;IACA,IAAM,MAAM,GAAG,SAAT,MAAM,GAAiB;MACzB,IAAI,IAAI,EAAE;QAAE,OAAO,KAAK;MAAG;MAC3B,IAAI,GAAG,IAAI;MACX,IAAI,KAAK,EAAE;QAAE,YAAY,CAAC,KAAK,CAAC;MAAG;MACnC,OAAO,IAAI;IACf,CAAC;IAED,IAAI,OAAO,CAAC,OAAO,EAAE;MACjB,KAAK,GAAG,UAAU,CAAC,YAAK;QACpB,IAAI,MAAM,EAAE,EAAE;UAAE,MAAM,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;QAAG;MACnD,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC;IACtB;IAED,IAAM,UAAU,GAAG,OAAO,CAAC,UAAU;IAErC,IAAI,OAAO,GAAG,CAAC;IACf,SAAS,KAAK,GAAA;MACV,OAAO,IAAI,EAAE,CAAC,IAAI,CAAC,UAAS,MAAM,EAAA;QAE9B;QACA,IAAI,MAAM,KAAK,SAAS,EAAE;UACtB,IAAI,MAAM,EAAE,EAAE;YAAE,OAAO,CAAC,MAAM,CAAC;UAAG;SAErC,MAAM,IAAI,OAAO,CAAC,QAAQ,EAAE;UACzB,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;SAEvC,MAAM,IAAI,OAAO,CAAC,SAAS,EAAE;UAC1B,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC;UAE1C;SACC,MAAM,IAAI,CAAC,IAAI,EAAE;UACd,OAAO,EAAE;UACT,IAAI,OAAO,GAAG,UAAU,EAAE;YACtB,IAAI,MAAM,EAAE,EAAE;cAAE,MAAM,CAAC,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;YAAG;YAC3D;UACH;UAED,IAAI,OAAO,GAAG,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;UACvF,IAAI,OAAO,GAAG,OAAO,CAAC,KAAK,EAAE;YAAE,OAAO,GAAG,OAAO,CAAC,KAAK;UAAG;UACzD,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE;YAAE,OAAO,GAAG,OAAO,CAAC,OAAO;UAAG;UAE7D,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC;QAC7B;QAED,OAAO,IAAI;MACf,CAAC,EAAE,UAAS,KAAK,EAAA;QACb,IAAI,MAAM,EAAE,EAAE;UAAE,MAAM,CAAC,KAAK,CAAC;QAAG;MACpC,CAAC,CAAC;IACN;IACA,KAAK,EAAE;EACX,CAAC,CAAC;AACN","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { getUrl } from \"./geturl\";\nfunction staller(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\nfunction bodyify(value, type) {\n    if (value == null) {\n        return null;\n    }\n    if (typeof (value) === \"string\") {\n        return value;\n    }\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            }\n            catch (error) { }\n            ;\n        }\n        return hexlify(value);\n    }\n    return value;\n}\nfunction unpercent(value) {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData(connection, body, processFunc) {\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof (connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit : 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0), \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n    const throttleCallback = ((typeof (connection) === \"object\") ? connection.throttleCallback : null);\n    const throttleSlotInterval = ((typeof (connection) === \"object\" && typeof (connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval : 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0), \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n    const errorPassThrough = ((typeof (connection) === \"object\") ? !!(connection.errorPassThrough) : false);\n    const headers = {};\n    let url = null;\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options = {\n        method: \"GET\",\n    };\n    let allow304 = false;\n    let timeout = 2 * 60 * 1000;\n    if (typeof (connection) === \"string\") {\n        url = connection;\n    }\n    else if (typeof (connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n        url = connection.url;\n        if (typeof (connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n        options.allowGzip = !!connection.allowGzip;\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\"basic authentication requires a secure https url\", Logger.errors.INVALID_ARGUMENT, { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" });\n            }\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n        if (connection.fetchOptions != null) {\n            options.fetchOptions = shallowCopy(connection.fetchOptions);\n        }\n    }\n    const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData) : null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": (dataMatch[1] || \"text/plain\") },\n                body: (dataMatch[2] ? base64Decode(dataMatch[3]) : unpercent(dataMatch[3]))\n            };\n            let result = response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(result);\n        }\n        catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n    const flatHeaders = {};\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n    const runningTimeout = (function () {\n        let timer = null;\n        const promise = new Promise(function (resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) {\n                        return;\n                    }\n                    timer = null;\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n        const cancel = function () {\n            if (timer == null) {\n                return;\n            }\n            clearTimeout(timer);\n            timer = null;\n        };\n        return { promise, cancel };\n    })();\n    const runningFetch = (function () {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let attempt = 0; attempt < attemptLimit; attempt++) {\n                let response = null;\n                try {\n                    response = yield getUrl(url, options);\n                    if (attempt < attemptLimit) {\n                        if (response.statusCode === 301 || response.statusCode === 302) {\n                            // Redirection; for now we only support absolute locataions\n                            const location = response.headers.location || \"\";\n                            if (options.method === \"GET\" && location.match(/^https:/)) {\n                                url = response.headers.location;\n                                continue;\n                            }\n                        }\n                        else if (response.statusCode === 429) {\n                            // Exponential back-off throttling\n                            let tryAgain = true;\n                            if (throttleCallback) {\n                                tryAgain = yield throttleCallback(attempt, url);\n                            }\n                            if (tryAgain) {\n                                let stall = 0;\n                                const retryAfter = response.headers[\"retry-after\"];\n                                if (typeof (retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                    stall = parseInt(retryAfter) * 1000;\n                                }\n                                else {\n                                    stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                                }\n                                //console.log(\"Stalling 429\");\n                                yield staller(stall);\n                                continue;\n                            }\n                        }\n                    }\n                }\n                catch (error) {\n                    response = error.response;\n                    if (response == null) {\n                        runningTimeout.cancel();\n                        logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                            requestMethod: options.method,\n                            serverError: error,\n                            url: url\n                        });\n                    }\n                }\n                let body = response.body;\n                if (allow304 && response.statusCode === 304) {\n                    body = null;\n                }\n                else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                        status: response.statusCode,\n                        headers: response.headers,\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"] : null)),\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n                if (processFunc) {\n                    try {\n                        const result = yield processFunc(body, response);\n                        runningTimeout.cancel();\n                        return result;\n                    }\n                    catch (error) {\n                        // Allow the processFunc to trigger a throttle\n                        if (error.throttleRetry && attempt < attemptLimit) {\n                            let tryAgain = true;\n                            if (throttleCallback) {\n                                tryAgain = yield throttleCallback(attempt, url);\n                            }\n                            if (tryAgain) {\n                                const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                                //console.log(\"Stalling callback\");\n                                yield staller(timeout);\n                                continue;\n                            }\n                        }\n                        runningTimeout.cancel();\n                        logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                            body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"] : null)),\n                            error: error,\n                            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                            requestMethod: options.method,\n                            url: url\n                        });\n                    }\n                }\n                runningTimeout.cancel();\n                // If we had a processFunc, it either returned a T or threw above.\n                // The \"body\" is now a Uint8Array.\n                return body;\n            }\n            return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                requestMethod: options.method,\n                url: url\n            });\n        });\n    })();\n    return Promise.race([runningTimeout.promise, runningFetch]);\n}\nexport function fetchJson(connection, json, processFunc) {\n    let processJsonFunc = (value, response) => {\n        let result = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            }\n            catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n        return result;\n    };\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n        // Create a connection with the content-type set for JSON\n        const updated = (typeof (connection) === \"string\") ? ({ url: connection }) : shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        }\n        else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n    return _fetchData(connection, body, processJsonFunc);\n}\nexport function poll(func, options) {\n    if (!options) {\n        options = {};\n    }\n    options = shallowCopy(options);\n    if (options.floor == null) {\n        options.floor = 0;\n    }\n    if (options.ceiling == null) {\n        options.ceiling = 10000;\n    }\n    if (options.interval == null) {\n        options.interval = 250;\n    }\n    return new Promise(function (resolve, reject) {\n        let timer = null;\n        let done = false;\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = () => {\n            if (done) {\n                return false;\n            }\n            done = true;\n            if (timer) {\n                clearTimeout(timer);\n            }\n            return true;\n        };\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) {\n                    reject(new Error(\"timeout\"));\n                }\n            }, options.timeout);\n        }\n        const retryLimit = options.retryLimit;\n        let attempt = 0;\n        function check() {\n            return func().then(function (result) {\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) {\n                        resolve(result);\n                    }\n                }\n                else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n                }\n                else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n                    // Otherwise, exponential back-off (up to 10s) our next request\n                }\n                else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) {\n                            reject(new Error(\"retry limit reached\"));\n                        }\n                        return;\n                    }\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) {\n                        timeout = options.floor;\n                    }\n                    if (timeout > options.ceiling) {\n                        timeout = options.ceiling;\n                    }\n                    setTimeout(check, timeout);\n                }\n                return null;\n            }, function (error) {\n                if (cancel()) {\n                    reject(error);\n                }\n            });\n        }\n        check();\n    });\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}