{"ast":null,"code":"export var normalizeSubgraphFilter = function normalizeSubgraphFilter(value) {\n  return Object.keys(value).sort().reduce(function (acc, key) {\n    acc[key] = normalizeSubgraphFilterValue(value[key]);\n    return acc;\n  }, {});\n};\n/**\n * NOTE: Regex taken from Ethers.\n */\nvar isAddressRegex = /^(0x)?[0-9a-fA-F]{40}$/;\n/**\n * Normalize addresses and empty strings for cache keys.\n */\nexport var normalizeSubgraphFilterValue = function normalizeSubgraphFilterValue(value) {\n  return lowerCaseIfAddress(undefinedIfEmpty(value));\n};\nvar undefinedIfEmpty = function undefinedIfEmpty(value) {\n  if (value === \"\") {\n    return undefined;\n  }\n  return value;\n};\nvar lowerCaseIfAddress = function lowerCaseIfAddress(value) {\n  if (typeof value === \"string\") {\n    if (value.match(isAddressRegex)) {\n      return value.toLowerCase();\n    }\n  }\n  if (Array.isArray(value)) {\n    return value.map(function (x) {\n      return lowerCaseIfAddress(x);\n    });\n  }\n  return value;\n};","map":{"version":3,"sources":["../../../src/subgraph/normalizeSubgraphFilter.ts"],"names":[],"mappings":"AAAA,OAAO,IAAM,uBAAuB,GAAG,SAA1B,uBAAuB,CAAI,KAAa,EAAI;EACrD,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CACpB,IAAI,EAAE,CACN,MAAM,CAAM,UAAC,GAAG,EAAE,GAAG,EAAI;IACtB,GAAG,CAAC,GAAG,CAAC,GAAG,4BAA4B,CAAE,KAAa,CAAC,GAAG,CAAC,CAAC;IAC5D,OAAO,GAAG;EACd,CAAC,EAAE,CAAA,CAAE,CAAC;AACd,CAAC;AAED;;AAEG;AACH,IAAM,cAAc,GAAG,wBAAwB;AAE/C;;AAEG;AACH,OAAO,IAAM,4BAA4B,GAAG,SAA/B,4BAA4B,CAAI,KAAc;EAAA,OACvD,kBAAkB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;AAAA;AAE/C,IAAM,gBAAgB,GAAG,SAAnB,gBAAgB,CAAI,KAAc,EAAI;EACxC,IAAI,KAAK,KAAK,EAAE,EAAE;IACd,OAAO,SAAS;EACnB;EACD,OAAO,KAAK;AAChB,CAAC;AAED,IAAM,kBAAkB,GAAG,SAArB,kBAAkB,CAAI,KAAc,EAAa;EACnD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IAC3B,IAAI,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE;MAC7B,OAAO,KAAK,CAAC,WAAW,EAAE;IAC7B;EACJ;EAED,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;IACtB,OAAO,KAAK,CAAC,GAAG,CAAC,UAAC,CAAC;MAAA,OAAK,kBAAkB,CAAC,CAAC,CAAC;IAAA,EAAC;EACjD;EAED,OAAO,KAAK;AAChB,CAAC","sourceRoot":"","sourcesContent":["export const normalizeSubgraphFilter = (value) => {\n    return Object.keys(value)\n        .sort()\n        .reduce((acc, key) => {\n        acc[key] = normalizeSubgraphFilterValue(value[key]);\n        return acc;\n    }, {});\n};\n/**\n * NOTE: Regex taken from Ethers.\n */\nconst isAddressRegex = /^(0x)?[0-9a-fA-F]{40}$/;\n/**\n * Normalize addresses and empty strings for cache keys.\n */\nexport const normalizeSubgraphFilterValue = (value) => lowerCaseIfAddress(undefinedIfEmpty(value));\nconst undefinedIfEmpty = (value) => {\n    if (value === \"\") {\n        return undefined;\n    }\n    return value;\n};\nconst lowerCaseIfAddress = (value) => {\n    if (typeof value === \"string\") {\n        if (value.match(isAddressRegex)) {\n            return value.toLowerCase();\n        }\n    }\n    if (Array.isArray(value)) {\n        return value.map((x) => lowerCaseIfAddress(x));\n    }\n    return value;\n};\n//# sourceMappingURL=normalizeSubgraphFilter.js.map"]},"metadata":{},"sourceType":"module"}