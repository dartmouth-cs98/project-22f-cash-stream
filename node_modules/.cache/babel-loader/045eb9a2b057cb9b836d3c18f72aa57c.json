{"ast":null,"code":"\"use strict\";\n\nimport _assertThisInitialized from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar allowedTransactionKeys = [\"accessList\", \"ccipReadEnabled\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"];\nvar forwardErrors = [Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED];\n;\n;\nexport var Signer = /*#__PURE__*/function () {\n  ///////////////////\n  // Sub-classes MUST call super\n  function Signer() {\n    _classCallCheck(this, Signer);\n    logger.checkAbstract(this instanceof Signer ? this.constructor : void 0, Signer);\n    defineReadOnly(this, \"_isSigner\", true);\n  }\n  ///////////////////\n  // Sub-classes MAY override these\n  _createClass(Signer, [{\n    key: \"getBalance\",\n    value: function getBalance(blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._checkProvider(\"getBalance\");\n                _context.next = 3;\n                return this.provider.getBalance(this.getAddress(), blockTag);\n              case 3:\n                return _context.abrupt(\"return\", _context.sent);\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"getTransactionCount\",\n    value: function getTransactionCount(blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this._checkProvider(\"getTransactionCount\");\n                _context2.next = 3;\n                return this.provider.getTransactionCount(this.getAddress(), blockTag);\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    // Populates \"from\" if unspecified, and estimates the gas for the transaction\n  }, {\n    key: \"estimateGas\",\n    value: function estimateGas(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var tx;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this._checkProvider(\"estimateGas\");\n                _context3.next = 3;\n                return resolveProperties(this.checkTransaction(transaction));\n              case 3:\n                tx = _context3.sent;\n                _context3.next = 6;\n                return this.provider.estimateGas(tx);\n              case 6:\n                return _context3.abrupt(\"return\", _context3.sent);\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    // Populates \"from\" if unspecified, and calls with the transaction\n  }, {\n    key: \"call\",\n    value: function call(transaction, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var tx;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this._checkProvider(\"call\");\n                _context4.next = 3;\n                return resolveProperties(this.checkTransaction(transaction));\n              case 3:\n                tx = _context4.sent;\n                _context4.next = 6;\n                return this.provider.call(tx, blockTag);\n              case 6:\n                return _context4.abrupt(\"return\", _context4.sent);\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n    // Populates all fields in a transaction, signs it and sends it to the network\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var tx, signedTx;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this._checkProvider(\"sendTransaction\");\n                _context5.next = 3;\n                return this.populateTransaction(transaction);\n              case 3:\n                tx = _context5.sent;\n                _context5.next = 6;\n                return this.signTransaction(tx);\n              case 6:\n                signedTx = _context5.sent;\n                _context5.next = 9;\n                return this.provider.sendTransaction(signedTx);\n              case 9:\n                return _context5.abrupt(\"return\", _context5.sent);\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"getChainId\",\n    value: function getChainId() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var network;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this._checkProvider(\"getChainId\");\n                _context6.next = 3;\n                return this.provider.getNetwork();\n              case 3:\n                network = _context6.sent;\n                return _context6.abrupt(\"return\", network.chainId);\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this._checkProvider(\"getGasPrice\");\n                _context7.next = 3;\n                return this.provider.getGasPrice();\n              case 3:\n                return _context7.abrupt(\"return\", _context7.sent);\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n  }, {\n    key: \"getFeeData\",\n    value: function getFeeData() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                this._checkProvider(\"getFeeData\");\n                _context8.next = 3;\n                return this.provider.getFeeData();\n              case 3:\n                return _context8.abrupt(\"return\", _context8.sent);\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n  }, {\n    key: \"resolveName\",\n    value: function resolveName(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                this._checkProvider(\"resolveName\");\n                _context9.next = 3;\n                return this.provider.resolveName(name);\n              case 3:\n                return _context9.abrupt(\"return\", _context9.sent);\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    }\n    // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n  }, {\n    key: \"checkTransaction\",\n    value: function checkTransaction(transaction) {\n      for (var key in transaction) {\n        if (allowedTransactionKeys.indexOf(key) === -1) {\n          logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n        }\n      }\n      var tx = shallowCopy(transaction);\n      if (tx.from == null) {\n        tx.from = this.getAddress();\n      } else {\n        // Make sure any provided address matches this signer\n        tx.from = Promise.all([Promise.resolve(tx.from), this.getAddress()]).then(function (result) {\n          if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n            logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n          }\n          return result[0];\n        });\n      }\n      return tx;\n    }\n    // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n    //\n    // Notes:\n    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n  }, {\n    key: \"populateTransaction\",\n    value: function populateTransaction(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var _this = this;\n        var tx, hasEip1559, feeData, gasPrice;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return resolveProperties(this.checkTransaction(transaction));\n              case 2:\n                tx = _context11.sent;\n                if (tx.to != null) {\n                  tx.to = Promise.resolve(tx.to).then(function (to) {\n                    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n                      var address;\n                      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n                        while (1) {\n                          switch (_context10.prev = _context10.next) {\n                            case 0:\n                              if (!(to == null)) {\n                                _context10.next = 2;\n                                break;\n                              }\n                              return _context10.abrupt(\"return\", null);\n                            case 2:\n                              _context10.next = 4;\n                              return this.resolveName(to);\n                            case 4:\n                              address = _context10.sent;\n                              if (address == null) {\n                                logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                              }\n                              return _context10.abrupt(\"return\", address);\n                            case 7:\n                            case \"end\":\n                              return _context10.stop();\n                          }\n                        }\n                      }, _callee10, this);\n                    }));\n                  });\n                  // Prevent this error from causing an UnhandledPromiseException\n                  tx.to.catch(function (error) {});\n                }\n                // Do not allow mixing pre-eip-1559 and eip-1559 properties\n                hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;\n                if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n                  logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n                } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n                  logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n                }\n                if (!((tx.type === 2 || tx.type == null) && tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {\n                  _context11.next = 10;\n                  break;\n                }\n                // Fully-formed EIP-1559 transaction (skip getFeeData)\n                tx.type = 2;\n                _context11.next = 18;\n                break;\n              case 10:\n                if (!(tx.type === 0 || tx.type === 1)) {\n                  _context11.next = 14;\n                  break;\n                }\n                // Explicit Legacy or EIP-2930 transaction\n                // Populate missing gasPrice\n                if (tx.gasPrice == null) {\n                  tx.gasPrice = this.getGasPrice();\n                }\n                _context11.next = 18;\n                break;\n              case 14:\n                _context11.next = 16;\n                return this.getFeeData();\n              case 16:\n                feeData = _context11.sent;\n                if (tx.type == null) {\n                  // We need to auto-detect the intended type of this transaction...\n                  if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n                    // Upgrade transaction from null to eip-1559\n                    tx.type = 2;\n                    if (tx.gasPrice != null) {\n                      // Using legacy gasPrice property on an eip-1559 network,\n                      // so use gasPrice as both fee properties\n                      gasPrice = tx.gasPrice;\n                      delete tx.gasPrice;\n                      tx.maxFeePerGas = gasPrice;\n                      tx.maxPriorityFeePerGas = gasPrice;\n                    } else {\n                      // Populate missing fee data\n                      if (tx.maxFeePerGas == null) {\n                        tx.maxFeePerGas = feeData.maxFeePerGas;\n                      }\n                      if (tx.maxPriorityFeePerGas == null) {\n                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                      }\n                    }\n                  } else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n                    // ...but they are trying to use EIP-1559 properties\n                    if (hasEip1559) {\n                      logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"populateTransaction\"\n                      });\n                    }\n                    // Populate missing fee data\n                    if (tx.gasPrice == null) {\n                      tx.gasPrice = feeData.gasPrice;\n                    }\n                    // Explicitly set untyped transaction to legacy\n                    tx.type = 0;\n                  } else {\n                    // getFeeData has failed us.\n                    logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                      operation: \"signer.getFeeData\"\n                    });\n                  }\n                } else if (tx.type === 2) {\n                  // Explicitly using EIP-1559\n                  // Populate missing fee data\n                  if (tx.maxFeePerGas == null) {\n                    tx.maxFeePerGas = feeData.maxFeePerGas;\n                  }\n                  if (tx.maxPriorityFeePerGas == null) {\n                    tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                  }\n                }\n              case 18:\n                if (tx.nonce == null) {\n                  tx.nonce = this.getTransactionCount(\"pending\");\n                }\n                if (tx.gasLimit == null) {\n                  tx.gasLimit = this.estimateGas(tx).catch(function (error) {\n                    if (forwardErrors.indexOf(error.code) >= 0) {\n                      throw error;\n                    }\n                    return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                      error: error,\n                      tx: tx\n                    });\n                  });\n                }\n                if (tx.chainId == null) {\n                  tx.chainId = this.getChainId();\n                } else {\n                  tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then(function (results) {\n                    if (results[1] !== 0 && results[0] !== results[1]) {\n                      logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                    }\n                    return results[0];\n                  });\n                }\n                _context11.next = 23;\n                return resolveProperties(tx);\n              case 23:\n                return _context11.abrupt(\"return\", _context11.sent);\n              case 24:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n    }\n    ///////////////////\n    // Sub-classes SHOULD leave these alone\n  }, {\n    key: \"_checkProvider\",\n    value: function _checkProvider(operation) {\n      if (!this.provider) {\n        logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: operation || \"_checkProvider\"\n        });\n      }\n    }\n  }], [{\n    key: \"isSigner\",\n    value: function isSigner(value) {\n      return !!(value && value._isSigner);\n    }\n  }]);\n  return Signer;\n}();\nexport var VoidSigner = /*#__PURE__*/function (_Signer) {\n  _inherits(VoidSigner, _Signer);\n  var _super = _createSuper(VoidSigner);\n  function VoidSigner(address, provider) {\n    var _this2;\n    _classCallCheck(this, VoidSigner);\n    logger.checkNew(this instanceof VoidSigner ? this.constructor : void 0, VoidSigner);\n    _this2 = _super.call(this);\n    defineReadOnly(_assertThisInitialized(_this2), \"address\", address);\n    defineReadOnly(_assertThisInitialized(_this2), \"provider\", provider || null);\n    return _this2;\n  }\n  _createClass(VoidSigner, [{\n    key: \"getAddress\",\n    value: function getAddress() {\n      return Promise.resolve(this.address);\n    }\n  }, {\n    key: \"_fail\",\n    value: function _fail(message, operation) {\n      return Promise.resolve().then(function () {\n        logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: operation\n        });\n      });\n    }\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(message) {\n      return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(transaction) {\n      return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n  }, {\n    key: \"_signTypedData\",\n    value: function _signTypedData(domain, types, value) {\n      return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(provider) {\n      return new VoidSigner(this.address, provider);\n    }\n  }]);\n  return VoidSigner;\n}(Signer);","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst allowedTransactionKeys = [\n    \"accessList\", \"ccipReadEnabled\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"\n];\nconst forwardErrors = [\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n];\n;\n;\nexport class Signer {\n    ///////////////////\n    // Sub-classes MUST call super\n    constructor() {\n        logger.checkAbstract(new.target, Signer);\n        defineReadOnly(this, \"_isSigner\", true);\n    }\n    ///////////////////\n    // Sub-classes MAY override these\n    getBalance(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getBalance\");\n            return yield this.provider.getBalance(this.getAddress(), blockTag);\n        });\n    }\n    getTransactionCount(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getTransactionCount\");\n            return yield this.provider.getTransactionCount(this.getAddress(), blockTag);\n        });\n    }\n    // Populates \"from\" if unspecified, and estimates the gas for the transaction\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"estimateGas\");\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            return yield this.provider.estimateGas(tx);\n        });\n    }\n    // Populates \"from\" if unspecified, and calls with the transaction\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"call\");\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            return yield this.provider.call(tx, blockTag);\n        });\n    }\n    // Populates all fields in a transaction, signs it and sends it to the network\n    sendTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"sendTransaction\");\n            const tx = yield this.populateTransaction(transaction);\n            const signedTx = yield this.signTransaction(tx);\n            return yield this.provider.sendTransaction(signedTx);\n        });\n    }\n    getChainId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getChainId\");\n            const network = yield this.provider.getNetwork();\n            return network.chainId;\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getGasPrice\");\n            return yield this.provider.getGasPrice();\n        });\n    }\n    getFeeData() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getFeeData\");\n            return yield this.provider.getFeeData();\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"resolveName\");\n            return yield this.provider.resolveName(name);\n        });\n    }\n    // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n    checkTransaction(transaction) {\n        for (const key in transaction) {\n            if (allowedTransactionKeys.indexOf(key) === -1) {\n                logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n            }\n        }\n        const tx = shallowCopy(transaction);\n        if (tx.from == null) {\n            tx.from = this.getAddress();\n        }\n        else {\n            // Make sure any provided address matches this signer\n            tx.from = Promise.all([\n                Promise.resolve(tx.from),\n                this.getAddress()\n            ]).then((result) => {\n                if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n                return result[0];\n            });\n        }\n        return tx;\n    }\n    // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n    //\n    // Notes:\n    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n    populateTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            if (tx.to != null) {\n                tx.to = Promise.resolve(tx.to).then((to) => __awaiter(this, void 0, void 0, function* () {\n                    if (to == null) {\n                        return null;\n                    }\n                    const address = yield this.resolveName(to);\n                    if (address == null) {\n                        logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                    }\n                    return address;\n                }));\n                // Prevent this error from causing an UnhandledPromiseException\n                tx.to.catch((error) => { });\n            }\n            // Do not allow mixing pre-eip-1559 and eip-1559 properties\n            const hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);\n            if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n                logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n            }\n            else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n                logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n            }\n            if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {\n                // Fully-formed EIP-1559 transaction (skip getFeeData)\n                tx.type = 2;\n            }\n            else if (tx.type === 0 || tx.type === 1) {\n                // Explicit Legacy or EIP-2930 transaction\n                // Populate missing gasPrice\n                if (tx.gasPrice == null) {\n                    tx.gasPrice = this.getGasPrice();\n                }\n            }\n            else {\n                // We need to get fee data to determine things\n                const feeData = yield this.getFeeData();\n                if (tx.type == null) {\n                    // We need to auto-detect the intended type of this transaction...\n                    if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                        // The network supports EIP-1559!\n                        // Upgrade transaction from null to eip-1559\n                        tx.type = 2;\n                        if (tx.gasPrice != null) {\n                            // Using legacy gasPrice property on an eip-1559 network,\n                            // so use gasPrice as both fee properties\n                            const gasPrice = tx.gasPrice;\n                            delete tx.gasPrice;\n                            tx.maxFeePerGas = gasPrice;\n                            tx.maxPriorityFeePerGas = gasPrice;\n                        }\n                        else {\n                            // Populate missing fee data\n                            if (tx.maxFeePerGas == null) {\n                                tx.maxFeePerGas = feeData.maxFeePerGas;\n                            }\n                            if (tx.maxPriorityFeePerGas == null) {\n                                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                            }\n                        }\n                    }\n                    else if (feeData.gasPrice != null) {\n                        // Network doesn't support EIP-1559...\n                        // ...but they are trying to use EIP-1559 properties\n                        if (hasEip1559) {\n                            logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"populateTransaction\"\n                            });\n                        }\n                        // Populate missing fee data\n                        if (tx.gasPrice == null) {\n                            tx.gasPrice = feeData.gasPrice;\n                        }\n                        // Explicitly set untyped transaction to legacy\n                        tx.type = 0;\n                    }\n                    else {\n                        // getFeeData has failed us.\n                        logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"signer.getFeeData\"\n                        });\n                    }\n                }\n                else if (tx.type === 2) {\n                    // Explicitly using EIP-1559\n                    // Populate missing fee data\n                    if (tx.maxFeePerGas == null) {\n                        tx.maxFeePerGas = feeData.maxFeePerGas;\n                    }\n                    if (tx.maxPriorityFeePerGas == null) {\n                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                    }\n                }\n            }\n            if (tx.nonce == null) {\n                tx.nonce = this.getTransactionCount(\"pending\");\n            }\n            if (tx.gasLimit == null) {\n                tx.gasLimit = this.estimateGas(tx).catch((error) => {\n                    if (forwardErrors.indexOf(error.code) >= 0) {\n                        throw error;\n                    }\n                    return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                        error: error,\n                        tx: tx\n                    });\n                });\n            }\n            if (tx.chainId == null) {\n                tx.chainId = this.getChainId();\n            }\n            else {\n                tx.chainId = Promise.all([\n                    Promise.resolve(tx.chainId),\n                    this.getChainId()\n                ]).then((results) => {\n                    if (results[1] !== 0 && results[0] !== results[1]) {\n                        logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                    }\n                    return results[0];\n                });\n            }\n            return yield resolveProperties(tx);\n        });\n    }\n    ///////////////////\n    // Sub-classes SHOULD leave these alone\n    _checkProvider(operation) {\n        if (!this.provider) {\n            logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: (operation || \"_checkProvider\")\n            });\n        }\n    }\n    static isSigner(value) {\n        return !!(value && value._isSigner);\n    }\n}\nexport class VoidSigner extends Signer {\n    constructor(address, provider) {\n        logger.checkNew(new.target, VoidSigner);\n        super();\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n    getAddress() {\n        return Promise.resolve(this.address);\n    }\n    _fail(message, operation) {\n        return Promise.resolve().then(() => {\n            logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });\n        });\n    }\n    signMessage(message) {\n        return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n    signTransaction(transaction) {\n        return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n    _signTypedData(domain, types, value) {\n        return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n    }\n    connect(provider) {\n        return new VoidSigner(this.address, provider);\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}