{"ast":null,"code":"import _classCallCheck from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n// Experimental\nexport var JsonRpcBatchProvider = /*#__PURE__*/function (_JsonRpcProvider) {\n  _inherits(JsonRpcBatchProvider, _JsonRpcProvider);\n  var _super = _createSuper(JsonRpcBatchProvider);\n  function JsonRpcBatchProvider() {\n    _classCallCheck(this, JsonRpcBatchProvider);\n    return _super.apply(this, arguments);\n  }\n  _createClass(JsonRpcBatchProvider, [{\n    key: \"send\",\n    value: function send(method, params) {\n      var _this = this;\n      var request = {\n        method: method,\n        params: params,\n        id: this._nextId++,\n        jsonrpc: \"2.0\"\n      };\n      if (this._pendingBatch == null) {\n        this._pendingBatch = [];\n      }\n      var inflightRequest = {\n        request: request,\n        resolve: null,\n        reject: null\n      };\n      var promise = new Promise(function (resolve, reject) {\n        inflightRequest.resolve = resolve;\n        inflightRequest.reject = reject;\n      });\n      this._pendingBatch.push(inflightRequest);\n      if (!this._pendingBatchAggregator) {\n        // Schedule batch for next event loop + short duration\n        this._pendingBatchAggregator = setTimeout(function () {\n          // Get teh current batch and clear it, so new requests\n          // go into the next batch\n          var batch = _this._pendingBatch;\n          _this._pendingBatch = null;\n          _this._pendingBatchAggregator = null;\n          // Get the request as an array of requests\n          var request = batch.map(function (inflight) {\n            return inflight.request;\n          });\n          _this.emit(\"debug\", {\n            action: \"requestBatch\",\n            request: deepCopy(request),\n            provider: _this\n          });\n          return fetchJson(_this.connection, JSON.stringify(request)).then(function (result) {\n            _this.emit(\"debug\", {\n              action: \"response\",\n              request: request,\n              response: result,\n              provider: _this\n            });\n            // For each result, feed it to the correct Promise, depending\n            // on whether it was a success or error\n            batch.forEach(function (inflightRequest, index) {\n              var payload = result[index];\n              if (payload.error) {\n                var error = new Error(payload.error.message);\n                error.code = payload.error.code;\n                error.data = payload.error.data;\n                inflightRequest.reject(error);\n              } else {\n                inflightRequest.resolve(payload.result);\n              }\n            });\n          }, function (error) {\n            _this.emit(\"debug\", {\n              action: \"response\",\n              error: error,\n              request: request,\n              provider: _this\n            });\n            batch.forEach(function (inflightRequest) {\n              inflightRequest.reject(error);\n            });\n          });\n        }, 10);\n      }\n      return promise;\n    }\n  }]);\n  return JsonRpcBatchProvider;\n}(JsonRpcProvider);","map":{"version":3,"sources":["../src.ts/json-rpc-batch-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n// Experimental\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [];\n        }\n        const inflightRequest = { request, resolve: null, reject: null };\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n        this._pendingBatch.push(inflightRequest);\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            error.code = payload.error.code;\n                            error.data = payload.error.data;\n                            inflightRequest.reject(error);\n                        }\n                        else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n            }, 10);\n        }\n        return promise;\n    }\n}\n//# sourceMappingURL=json-rpc-batch-provider.js.map"]},"metadata":{},"sourceType":"module"}