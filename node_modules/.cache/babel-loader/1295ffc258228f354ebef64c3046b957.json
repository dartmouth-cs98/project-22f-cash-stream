{"ast":null,"code":"\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { Reader, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\nimport { ParamType } from \"./fragments\";\nvar paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nvar paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nexport var AbiCoder = /*#__PURE__*/function () {\n  function AbiCoder(coerceFunc) {\n    _classCallCheck(this, AbiCoder);\n    logger.checkNew(this instanceof AbiCoder ? this.constructor : void 0, AbiCoder);\n    defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n  }\n  _createClass(AbiCoder, [{\n    key: \"_getCoder\",\n    value: function _getCoder(param) {\n      var _this = this;\n      switch (param.baseType) {\n        case \"address\":\n          return new AddressCoder(param.name);\n        case \"bool\":\n          return new BooleanCoder(param.name);\n        case \"string\":\n          return new StringCoder(param.name);\n        case \"bytes\":\n          return new BytesCoder(param.name);\n        case \"array\":\n          return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n        case \"tuple\":\n          return new TupleCoder((param.components || []).map(function (component) {\n            return _this._getCoder(component);\n          }), param.name);\n        case \"\":\n          return new NullCoder(param.name);\n      }\n      // u?int[0-9]*\n      var match = param.type.match(paramTypeNumber);\n      if (match) {\n        var size = parseInt(match[2] || \"256\");\n        if (size === 0 || size > 256 || size % 8 !== 0) {\n          logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n        }\n        return new NumberCoder(size / 8, match[1] === \"int\", param.name);\n      }\n      // bytes[0-9]+\n      match = param.type.match(paramTypeBytes);\n      if (match) {\n        var _size = parseInt(match[1]);\n        if (_size === 0 || _size > 32) {\n          logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n        }\n        return new FixedBytesCoder(_size, param.name);\n      }\n      return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n  }, {\n    key: \"_getWordSize\",\n    value: function _getWordSize() {\n      return 32;\n    }\n  }, {\n    key: \"_getReader\",\n    value: function _getReader(data, allowLoose) {\n      return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n  }, {\n    key: \"_getWriter\",\n    value: function _getWriter() {\n      return new Writer(this._getWordSize());\n    }\n  }, {\n    key: \"getDefaultValue\",\n    value: function getDefaultValue(types) {\n      var _this2 = this;\n      var coders = types.map(function (type) {\n        return _this2._getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n      return coder.defaultValue();\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(types, values) {\n      var _this3 = this;\n      if (types.length !== values.length) {\n        logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          count: {\n            types: types.length,\n            values: values.length\n          },\n          value: {\n            types: types,\n            values: values\n          }\n        });\n      }\n      var coders = types.map(function (type) {\n        return _this3._getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n      var writer = this._getWriter();\n      coder.encode(writer, values);\n      return writer.data;\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(types, data, loose) {\n      var _this4 = this;\n      var coders = types.map(function (type) {\n        return _this4._getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n      return coder.decode(this._getReader(arrayify(data), loose));\n    }\n  }]);\n  return AbiCoder;\n}();\nexport var defaultAbiCoder = new AbiCoder();","map":{"version":3,"sources":["../src.ts/abi-coder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Reader, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\nimport { ParamType } from \"./fragments\";\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nexport class AbiCoder {\n    constructor(coerceFunc) {\n        logger.checkNew(new.target, AbiCoder);\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n    _getCoder(param) {\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n    _getWordSize() { return 32; }\n    _getReader(data, allowLoose) {\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n    _getWriter() {\n        return new Writer(this._getWordSize());\n    }\n    getDefaultValue(types) {\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n    encode(types, values) {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n    decode(types, data, loose) {\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data), loose));\n    }\n}\nexport const defaultAbiCoder = new AbiCoder();\n//# sourceMappingURL=abi-coder.js.map"]},"metadata":{},"sourceType":"module"}