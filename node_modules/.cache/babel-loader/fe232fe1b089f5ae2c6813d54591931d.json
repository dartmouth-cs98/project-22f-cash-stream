{"ast":null,"code":"\"use strict\";\n\nimport { formatFixed, parseFixed } from \"@ethersproject/bignumber\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar names = [\"wei\", \"kwei\", \"mwei\", \"gwei\", \"szabo\", \"finney\", \"ether\"];\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\nexport function commify(value) {\n  var comps = String(value).split(\".\");\n  if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === \".\" || value === \"-.\") {\n    logger.throwArgumentError(\"invalid value\", \"value\", value);\n  }\n  // Make sure we have at least one whole digit (0 if none)\n  var whole = comps[0];\n  var negative = \"\";\n  if (whole.substring(0, 1) === \"-\") {\n    negative = \"-\";\n    whole = whole.substring(1);\n  }\n  // Make sure we have at least 1 whole digit with no leading zeros\n  while (whole.substring(0, 1) === \"0\") {\n    whole = whole.substring(1);\n  }\n  if (whole === \"\") {\n    whole = \"0\";\n  }\n  var suffix = \"\";\n  if (comps.length === 2) {\n    suffix = \".\" + (comps[1] || \"0\");\n  }\n  while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n    suffix = suffix.substring(0, suffix.length - 1);\n  }\n  var formatted = [];\n  while (whole.length) {\n    if (whole.length <= 3) {\n      formatted.unshift(whole);\n      break;\n    } else {\n      var index = whole.length - 3;\n      formatted.unshift(whole.substring(index));\n      whole = whole.substring(0, index);\n    }\n  }\n  return negative + formatted.join(\",\") + suffix;\n}\nexport function formatUnits(value, unitName) {\n  if (typeof unitName === \"string\") {\n    var index = names.indexOf(unitName);\n    if (index !== -1) {\n      unitName = 3 * index;\n    }\n  }\n  return formatFixed(value, unitName != null ? unitName : 18);\n}\nexport function parseUnits(value, unitName) {\n  if (typeof value !== \"string\") {\n    logger.throwArgumentError(\"value must be a string\", \"value\", value);\n  }\n  if (typeof unitName === \"string\") {\n    var index = names.indexOf(unitName);\n    if (index !== -1) {\n      unitName = 3 * index;\n    }\n  }\n  return parseFixed(value, unitName != null ? unitName : 18);\n}\nexport function formatEther(wei) {\n  return formatUnits(wei, 18);\n}\nexport function parseEther(ether) {\n  return parseUnits(ether, 18);\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { formatFixed, parseFixed } from \"@ethersproject/bignumber\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\nexport function commify(value) {\n    const comps = String(value).split(\".\");\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === \".\" || value === \"-.\") {\n        logger.throwArgumentError(\"invalid value\", \"value\", value);\n    }\n    // Make sure we have at least one whole digit (0 if none)\n    let whole = comps[0];\n    let negative = \"\";\n    if (whole.substring(0, 1) === \"-\") {\n        negative = \"-\";\n        whole = whole.substring(1);\n    }\n    // Make sure we have at least 1 whole digit with no leading zeros\n    while (whole.substring(0, 1) === \"0\") {\n        whole = whole.substring(1);\n    }\n    if (whole === \"\") {\n        whole = \"0\";\n    }\n    let suffix = \"\";\n    if (comps.length === 2) {\n        suffix = \".\" + (comps[1] || \"0\");\n    }\n    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n        suffix = suffix.substring(0, suffix.length - 1);\n    }\n    const formatted = [];\n    while (whole.length) {\n        if (whole.length <= 3) {\n            formatted.unshift(whole);\n            break;\n        }\n        else {\n            const index = whole.length - 3;\n            formatted.unshift(whole.substring(index));\n            whole = whole.substring(0, index);\n        }\n    }\n    return negative + formatted.join(\",\") + suffix;\n}\nexport function formatUnits(value, unitName) {\n    if (typeof (unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return formatFixed(value, (unitName != null) ? unitName : 18);\n}\nexport function parseUnits(value, unitName) {\n    if (typeof (value) !== \"string\") {\n        logger.throwArgumentError(\"value must be a string\", \"value\", value);\n    }\n    if (typeof (unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return parseFixed(value, (unitName != null) ? unitName : 18);\n}\nexport function formatEther(wei) {\n    return formatUnits(wei, 18);\n}\nexport function parseEther(ether) {\n    return parseUnits(ether, 18);\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}