{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nvar defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nexport var PocketProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(PocketProvider, _UrlJsonRpcProvider);\n  var _super = _createSuper(PocketProvider);\n  function PocketProvider() {\n    _classCallCheck(this, PocketProvider);\n    return _super.apply(this, arguments);\n  }\n  _createClass(PocketProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.applicationId === defaultApplicationId;\n    }\n  }], [{\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      var apiKeyObj = {\n        applicationId: null,\n        loadBalancer: true,\n        applicationSecretKey: null\n      };\n      // Parse applicationId and applicationSecretKey\n      if (apiKey == null) {\n        apiKeyObj.applicationId = defaultApplicationId;\n      } else if (typeof apiKey === \"string\") {\n        apiKeyObj.applicationId = apiKey;\n      } else if (apiKey.applicationSecretKey != null) {\n        apiKeyObj.applicationId = apiKey.applicationId;\n        apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n      } else if (apiKey.applicationId) {\n        apiKeyObj.applicationId = apiKey.applicationId;\n      } else {\n        logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n      }\n      return apiKeyObj;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n      switch (network ? network.name : \"unknown\") {\n        case \"goerli\":\n          host = \"eth-goerli.gateway.pokt.network\";\n          break;\n        case \"homestead\":\n          host = \"eth-mainnet.gateway.pokt.network\";\n          break;\n        case \"kovan\":\n          host = \"poa-kovan.gateway.pokt.network\";\n          break;\n        case \"matic\":\n          host = \"poly-mainnet.gateway.pokt.network\";\n          break;\n        case \"maticmum\":\n          host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n          break;\n        case \"rinkeby\":\n          host = \"eth-rinkeby.gateway.pokt.network\";\n          break;\n        case \"ropsten\":\n          host = \"eth-ropsten.gateway.pokt.network\";\n          break;\n        default:\n          logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"network\",\n            value: network\n          });\n      }\n      var url = \"https://\".concat(host, \"/v1/lb/\").concat(apiKey.applicationId);\n      var connection = {\n        headers: {},\n        url: url\n      };\n      if (apiKey.applicationSecretKey != null) {\n        connection.user = \"\";\n        connection.password = apiKey.applicationSecretKey;\n      }\n      return connection;\n    }\n  }]);\n  return PocketProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"sources":["../src.ts/pocket-provider.ts"],"names":[],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAKb,SAAS,MAAM,QAAQ,uBAAuB;AAC9C,SAAS,OAAO,QAAQ,YAAY;AACpC,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC;AAElC,SAAS,kBAAkB,QAAQ,yBAAyB;AAE5D,IAAM,oBAAoB,GAAG,0BAA0B;AAGvD,WAAa,cAAe;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OA2ExB,+BAAmB;MACf,OAAQ,IAAI,CAAC,aAAa,KAAK,oBAAoB;IACvD;EAAC;IAAA;IAAA,OAxED,mBAAiB,MAAW,EAAA;MACxB,IAAM,SAAS,GAAmF;QAC9F,aAAa,EAAE,IAAI;QACnB,YAAY,EAAE,IAAI;QAClB,oBAAoB,EAAE;OACzB;MAED;MACA,IAAI,MAAM,IAAI,IAAI,EAAE;QAChB,SAAS,CAAC,aAAa,GAAG,oBAAoB;OAEjD,MAAM,IAAI,OAAQ,MAAO,KAAK,QAAQ,EAAE;QACrC,SAAS,CAAC,aAAa,GAAG,MAAM;OAEnC,MAAM,IAAI,MAAM,CAAC,oBAAoB,IAAI,IAAI,EAAE;QAC5C,SAAS,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa;QAC9C,SAAS,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB;OAE/D,MAAM,IAAI,MAAM,CAAC,aAAa,EAAE;QAC7B,SAAS,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa;OAEjD,MAAM;QACH,MAAM,CAAC,kBAAkB,CAAC,mCAAmC,EAAE,QAAQ,EAAE,MAAM,CAAC;MACnF;MAED,OAAO,SAAS;IACpB;EAAC;IAAA;IAAA,OAED,gBAAc,OAAgB,EAAE,MAAW,EAAA;MACvC,IAAI,IAAI,GAAW,IAAI;MACvB,QAAQ,OAAO,GAAG,OAAO,CAAC,IAAI,GAAG,SAAS;QACtC,KAAK,QAAQ;UACT,IAAI,GAAG,iCAAiC;UACxC;QACJ,KAAK,WAAW;UACZ,IAAI,GAAG,kCAAkC;UACzC;QACJ,KAAK,OAAO;UACR,IAAI,GAAG,gCAAgC;UACvC;QACJ,KAAK,OAAO;UACR,IAAI,GAAG,mCAAmC;UAC1C;QACJ,KAAK,UAAU;UACX,IAAI,GAAG,yCAAyC;UAChD;QACJ,KAAK,SAAS;UACV,IAAI,GAAG,kCAAkC;UACzC;QACJ,KAAK,SAAS;UACV,IAAI,GAAG,kCAAkC;UACzC;QACJ;UACI,MAAM,CAAC,UAAU,CAAC,qBAAqB,EAAE,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE;YACrE,QAAQ,EAAE,SAAS;YACnB,KAAK,EAAE;WACV,CAAC;MAAC;MAGX,IAAM,GAAG,qBAAgB,IAAK,oBAAW,MAAM,CAAC,aAAc,CAAE;MAEhE,IAAM,UAAU,GAAmB;QAAE,OAAO,EAAE,CAAA,CAAG;QAAE,GAAG,EAAH;MAAG,CAAE;MACxD,IAAI,MAAM,CAAC,oBAAoB,IAAI,IAAI,EAAE;QACrC,UAAU,CAAC,IAAI,GAAG,EAAE;QACpB,UAAU,CAAC,QAAQ,GAAG,MAAM,CAAC,oBAAoB;MACpD;MAED,OAAO,UAAU;IACrB;EAAC;EAAA;AAAA,EAzE+B,kBAAkB","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nexport class PocketProvider extends UrlJsonRpcProvider {\n    static getApiKey(apiKey) {\n        const apiKeyObj = {\n            applicationId: null,\n            loadBalancer: true,\n            applicationSecretKey: null\n        };\n        // Parse applicationId and applicationSecretKey\n        if (apiKey == null) {\n            apiKeyObj.applicationId = defaultApplicationId;\n        }\n        else if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n        }\n        else if (apiKey.applicationSecretKey != null) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n        }\n        else if (apiKey.applicationId) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n        }\n        else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"kovan\":\n                host = \"poa-kovan.gateway.pokt.network\";\n                break;\n            case \"matic\":\n                host = \"poly-mainnet.gateway.pokt.network\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        const url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n        const connection = { headers: {}, url };\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n//# sourceMappingURL=pocket-provider.js.map"]},"metadata":{},"sourceType":"module"}