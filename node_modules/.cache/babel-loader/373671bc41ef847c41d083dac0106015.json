{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n;\nfunction isRenetworkable(value) {\n  return value && typeof value.renetwork === \"function\";\n}\nfunction ethDefaultProvider(network) {\n  var func = function func(providers, options) {\n    if (options == null) {\n      options = {};\n    }\n    var providerList = [];\n    if (providers.InfuraProvider && options.infura !== \"-\") {\n      try {\n        providerList.push(new providers.InfuraProvider(network, options.infura));\n      } catch (error) {}\n    }\n    if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n      try {\n        providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n      } catch (error) {}\n    }\n    if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n      try {\n        providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n      } catch (error) {}\n    }\n    if (providers.PocketProvider && options.pocket !== \"-\") {\n      // These networks are currently faulty on Pocket as their\n      // network does not handle the Berlin hardfork, which is\n      // live on these ones.\n      // @TODO: This goes away once Pocket has upgraded their nodes\n      var skip = [\"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\"];\n      try {\n        var provider = new providers.PocketProvider(network, options.pocket);\n        if (provider.network && skip.indexOf(provider.network.name) === -1) {\n          providerList.push(provider);\n        }\n      } catch (error) {}\n    }\n    if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n      try {\n        providerList.push(new providers.CloudflareProvider(network));\n      } catch (error) {}\n    }\n    if (providers.AnkrProvider && options.ankr !== \"-\") {\n      try {\n        var _skip = [\"ropsten\"];\n        var _provider = new providers.AnkrProvider(network, options.ankr);\n        if (_provider.network && _skip.indexOf(_provider.network.name) === -1) {\n          providerList.push(_provider);\n        }\n      } catch (error) {}\n    }\n    if (providerList.length === 0) {\n      return null;\n    }\n    if (providers.FallbackProvider) {\n      var quorum = 1;\n      if (options.quorum != null) {\n        quorum = options.quorum;\n      } else if (network === \"homestead\") {\n        quorum = 2;\n      }\n      return new providers.FallbackProvider(providerList, quorum);\n    }\n    return providerList[0];\n  };\n  func.renetwork = function (network) {\n    return ethDefaultProvider(network);\n  };\n  return func;\n}\nfunction etcDefaultProvider(url, network) {\n  var func = function func(providers, options) {\n    if (providers.JsonRpcProvider) {\n      return new providers.JsonRpcProvider(url, network);\n    }\n    return null;\n  };\n  func.renetwork = function (network) {\n    return etcDefaultProvider(url, network);\n  };\n  return func;\n}\nvar homestead = {\n  chainId: 1,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"homestead\",\n  _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nvar ropsten = {\n  chainId: 3,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"ropsten\",\n  _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nvar classicMordor = {\n  chainId: 63,\n  name: \"classicMordor\",\n  _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n// See: https://chainlist.org\nvar networks = {\n  unspecified: {\n    chainId: 0,\n    name: \"unspecified\"\n  },\n  homestead: homestead,\n  mainnet: homestead,\n  morden: {\n    chainId: 2,\n    name: \"morden\"\n  },\n  ropsten: ropsten,\n  testnet: ropsten,\n  rinkeby: {\n    chainId: 4,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"rinkeby\",\n    _defaultProvider: ethDefaultProvider(\"rinkeby\")\n  },\n  kovan: {\n    chainId: 42,\n    name: \"kovan\",\n    _defaultProvider: ethDefaultProvider(\"kovan\")\n  },\n  goerli: {\n    chainId: 5,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"goerli\",\n    _defaultProvider: ethDefaultProvider(\"goerli\")\n  },\n  kintsugi: {\n    chainId: 1337702,\n    name: \"kintsugi\"\n  },\n  sepolia: {\n    chainId: 11155111,\n    name: \"sepolia\",\n    _defaultProvider: ethDefaultProvider(\"sepolia\")\n  },\n  // ETC (See: #351)\n  classic: {\n    chainId: 61,\n    name: \"classic\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n  },\n  classicMorden: {\n    chainId: 62,\n    name: \"classicMorden\"\n  },\n  classicMordor: classicMordor,\n  classicTestnet: classicMordor,\n  classicKotti: {\n    chainId: 6,\n    name: \"classicKotti\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n  },\n  xdai: {\n    chainId: 100,\n    name: \"xdai\"\n  },\n  matic: {\n    chainId: 137,\n    name: \"matic\",\n    _defaultProvider: ethDefaultProvider(\"matic\")\n  },\n  maticmum: {\n    chainId: 80001,\n    name: \"maticmum\"\n  },\n  optimism: {\n    chainId: 10,\n    name: \"optimism\",\n    _defaultProvider: ethDefaultProvider(\"optimism\")\n  },\n  \"optimism-kovan\": {\n    chainId: 69,\n    name: \"optimism-kovan\"\n  },\n  \"optimism-goerli\": {\n    chainId: 420,\n    name: \"optimism-goerli\"\n  },\n  arbitrum: {\n    chainId: 42161,\n    name: \"arbitrum\"\n  },\n  \"arbitrum-rinkeby\": {\n    chainId: 421611,\n    name: \"arbitrum-rinkeby\"\n  },\n  \"arbitrum-goerli\": {\n    chainId: 421613,\n    name: \"arbitrum-goerli\"\n  },\n  bnb: {\n    chainId: 56,\n    name: \"bnb\"\n  },\n  bnbt: {\n    chainId: 97,\n    name: \"bnbt\"\n  }\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network) {\n  // No network (null)\n  if (network == null) {\n    return null;\n  }\n  if (typeof network === \"number\") {\n    for (var name in networks) {\n      var _standard = networks[name];\n      if (_standard.chainId === network) {\n        return {\n          name: _standard.name,\n          chainId: _standard.chainId,\n          ensAddress: _standard.ensAddress || null,\n          _defaultProvider: _standard._defaultProvider || null\n        };\n      }\n    }\n    return {\n      chainId: network,\n      name: \"unknown\"\n    };\n  }\n  if (typeof network === \"string\") {\n    var _standard2 = networks[network];\n    if (_standard2 == null) {\n      return null;\n    }\n    return {\n      name: _standard2.name,\n      chainId: _standard2.chainId,\n      ensAddress: _standard2.ensAddress,\n      _defaultProvider: _standard2._defaultProvider || null\n    };\n  }\n  var standard = networks[network.name];\n  // Not a standard network; check that it is a valid network in general\n  if (!standard) {\n    if (typeof network.chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n    }\n    return network;\n  }\n  // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n  if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n    logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n  }\n  // @TODO: In the next major version add an attach function to a defaultProvider\n  // class and move the _defaultProvider internal to this file (extend Network)\n  var defaultProvider = network._defaultProvider || null;\n  if (defaultProvider == null && standard._defaultProvider) {\n    if (isRenetworkable(standard._defaultProvider)) {\n      defaultProvider = standard._defaultProvider.renetwork(network);\n    } else {\n      defaultProvider = standard._defaultProvider;\n    }\n  }\n  // Standard Network (allow overriding the ENS address)\n  return {\n    name: network.name,\n    chainId: standard.chainId,\n    ensAddress: network.ensAddress || standard.ensAddress || null,\n    _defaultProvider: defaultProvider\n  };\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"AAAA,YAAY;;AAEZ,SAAS,MAAM,QAAQ,uBAAuB;AAC9C,SAAS,OAAO,QAAQ,YAAY;AACpC,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC;AAajC;AAED,SAAS,eAAe,CAAC,KAAU,EAAA;EAC/B,OAAQ,KAAK,IAAI,OAAO,KAAK,CAAC,SAAU,KAAK,UAAU;AAC3D;AAEA,SAAS,kBAAkB,CAAC,OAAyB,EAAA;EACjD,IAAM,IAAI,GAAG,SAAP,IAAI,CAAY,SAAc,EAAE,OAAa,EAAA;IAC/C,IAAI,OAAO,IAAI,IAAI,EAAE;MAAE,OAAO,GAAG,CAAA,CAAG;IAAG;IACvC,IAAM,YAAY,GAAe,EAAE;IAEnC,IAAI,SAAS,CAAC,cAAc,IAAI,OAAO,CAAC,MAAM,KAAK,GAAG,EAAE;MACpD,IAAI;QACA,YAAY,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;OAC3E,CAAC,OAAM,KAAK,EAAE,CAAA;IAClB;IAED,IAAI,SAAS,CAAC,iBAAiB,IAAI,OAAO,CAAC,SAAS,KAAK,GAAG,EAAE;MAC1D,IAAI;QACA,YAAY,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,iBAAiB,CAAC,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;OACjF,CAAC,OAAM,KAAK,EAAE,CAAA;IAClB;IAED,IAAI,SAAS,CAAC,eAAe,IAAI,OAAO,CAAC,OAAO,KAAK,GAAG,EAAE;MACtD,IAAI;QACA,YAAY,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,eAAe,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;OAC7E,CAAC,OAAM,KAAK,EAAE,CAAA;IAClB;IAED,IAAI,SAAS,CAAC,cAAc,IAAI,OAAO,CAAC,MAAM,KAAK,GAAG,EAAE;MACpD;MACA;MACA;MACA;MACA,IAAM,IAAI,GAAG,CAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAE;MAC1D,IAAI;QACA,IAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC;QACtE,IAAI,QAAQ,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;UAChE,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC9B;OACJ,CAAC,OAAM,KAAK,EAAE,CAAA;IAClB;IAED,IAAI,SAAS,CAAC,kBAAkB,IAAI,OAAO,CAAC,UAAU,KAAK,GAAG,EAAE;MAC5D,IAAI;QACA,YAAY,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;OAC/D,CAAC,OAAM,KAAK,EAAE,CAAA;IAClB;IAED,IAAI,SAAS,CAAC,YAAY,IAAI,OAAO,CAAC,IAAI,KAAK,GAAG,EAAE;MAChD,IAAI;QACA,IAAM,KAAI,GAAG,CAAE,SAAS,CAAE;QAC1B,IAAM,SAAQ,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC;QAClE,IAAI,SAAQ,CAAC,OAAO,IAAI,KAAI,CAAC,OAAO,CAAC,SAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;UAChE,YAAY,CAAC,IAAI,CAAC,SAAQ,CAAC;QAC9B;OACJ,CAAC,OAAM,KAAK,EAAE,CAAA;IAClB;IAED,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;MAAE,OAAO,IAAI;IAAG;IAE/C,IAAI,SAAS,CAAC,gBAAgB,EAAE;MAC5B,IAAI,MAAM,GAAG,CAAC;MACd,IAAI,OAAO,CAAC,MAAM,IAAI,IAAI,EAAE;QACxB,MAAM,GAAG,OAAO,CAAC,MAAM;OAC1B,MAAM,IAAI,OAAO,KAAK,WAAW,EAAE;QAChC,MAAM,GAAG,CAAC;MACb;MACD,OAAO,IAAI,SAAS,CAAC,gBAAgB,CAAC,YAAY,EAAE,MAAM,CAAC;IAC9D;IAED,OAAO,YAAY,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED,IAAI,CAAC,SAAS,GAAG,UAAS,OAAgB,EAAA;IACtC,OAAO,kBAAkB,CAAC,OAAO,CAAC;EACtC,CAAC;EAED,OAAO,IAAI;AACf;AAEA,SAAS,kBAAkB,CAAC,GAAW,EAAE,OAAyB,EAAA;EAC9D,IAAM,IAAI,GAAG,SAAP,IAAI,CAAY,SAAc,EAAE,OAAa,EAAA;IAC/C,IAAI,SAAS,CAAC,eAAe,EAAE;MAC3B,OAAO,IAAI,SAAS,CAAC,eAAe,CAAC,GAAG,EAAE,OAAO,CAAC;IACrD;IAED,OAAO,IAAI;EACf,CAAC;EAED,IAAI,CAAC,SAAS,GAAG,UAAS,OAAgB,EAAA;IACtC,OAAO,kBAAkB,CAAC,GAAG,EAAE,OAAO,CAAC;EAC3C,CAAC;EAED,OAAO,IAAI;AACf;AAEA,IAAM,SAAS,GAAY;EACvB,OAAO,EAAE,CAAC;EACV,UAAU,EAAE,4CAA4C;EACxD,IAAI,EAAE,WAAW;EACjB,gBAAgB,EAAE,kBAAkB,CAAC,WAAW;CACnD;AAED,IAAM,OAAO,GAAY;EACrB,OAAO,EAAE,CAAC;EACV,UAAU,EAAE,4CAA4C;EACxD,IAAI,EAAE,SAAS;EACf,gBAAgB,EAAE,kBAAkB,CAAC,SAAS;CACjD;AAED,IAAM,aAAa,GAAY;EAC3B,OAAO,EAAE,EAAE;EACX,IAAI,EAAE,eAAe;EACrB,gBAAgB,EAAE,kBAAkB,CAAC,qCAAqC,EAAE,eAAe;CAC9F;AAED;AACA,IAAM,QAAQ,GAAgC;EAC1C,WAAW,EAAE;IAAE,OAAO,EAAE,CAAC;IAAE,IAAI,EAAE;EAAa,CAAE;EAEhD,SAAS,EAAE,SAAS;EACpB,OAAO,EAAE,SAAS;EAElB,MAAM,EAAE;IAAE,OAAO,EAAE,CAAC;IAAE,IAAI,EAAE;EAAQ,CAAE;EAEtC,OAAO,EAAE,OAAO;EAChB,OAAO,EAAE,OAAO;EAEhB,OAAO,EAAE;IACL,OAAO,EAAE,CAAC;IACV,UAAU,EAAE,4CAA4C;IACxD,IAAI,EAAE,SAAS;IACf,gBAAgB,EAAE,kBAAkB,CAAC,SAAS;GACjD;EAED,KAAK,EAAE;IACH,OAAO,EAAE,EAAE;IACX,IAAI,EAAE,OAAO;IACb,gBAAgB,EAAE,kBAAkB,CAAC,OAAO;GAC/C;EAED,MAAM,EAAE;IACJ,OAAO,EAAE,CAAC;IACV,UAAU,EAAE,4CAA4C;IACxD,IAAI,EAAE,QAAQ;IACd,gBAAgB,EAAE,kBAAkB,CAAC,QAAQ;GAChD;EAED,QAAQ,EAAE;IAAE,OAAO,EAAE,OAAO;IAAE,IAAI,EAAE;EAAU,CAAE;EAEhD,OAAO,EAAE;IACL,OAAO,EAAE,QAAQ;IACjB,IAAI,EAAE,SAAS;IACf,gBAAgB,EAAE,kBAAkB,CAAC,SAAS;GACjD;EAGD;EACA,OAAO,EAAE;IACL,OAAO,EAAE,EAAE;IACX,IAAI,EAAE,SAAS;IACf,gBAAgB,EAAE,kBAAkB,CAAC,mCAAmC,EAAE,SAAS;GACtF;EAED,aAAa,EAAE;IAAE,OAAO,EAAE,EAAE;IAAE,IAAI,EAAE;EAAe,CAAE;EAErD,aAAa,EAAE,aAAa;EAC5B,cAAc,EAAE,aAAa;EAE7B,YAAY,EAAE;IACV,OAAO,EAAE,CAAC;IACV,IAAI,EAAE,cAAc;IACpB,gBAAgB,EAAE,kBAAkB,CAAC,qCAAqC,EAAE,cAAc;GAC7F;EAED,IAAI,EAAE;IAAE,OAAO,EAAE,GAAG;IAAE,IAAI,EAAE;EAAM,CAAE;EAEpC,KAAK,EAAE;IACH,OAAO,EAAE,GAAG;IACZ,IAAI,EAAE,OAAO;IACb,gBAAgB,EAAE,kBAAkB,CAAC,OAAO;GAC/C;EACD,QAAQ,EAAE;IAAE,OAAO,EAAE,KAAK;IAAE,IAAI,EAAE;EAAU,CAAE;EAE9C,QAAQ,EAAE;IACN,OAAO,EAAE,EAAE;IACX,IAAI,EAAE,UAAU;IAChB,gBAAgB,EAAE,kBAAkB,CAAC,UAAU;GAClD;EACD,gBAAgB,EAAE;IAAE,OAAO,EAAE,EAAE;IAAE,IAAI,EAAE;EAAgB,CAAE;EACzD,iBAAiB,EAAE;IAAE,OAAO,EAAE,GAAG;IAAE,IAAI,EAAE;EAAiB,CAAE;EAE5D,QAAQ,EAAE;IAAE,OAAO,EAAE,KAAK;IAAE,IAAI,EAAE;EAAU,CAAE;EAC9C,kBAAkB,EAAE;IAAE,OAAO,EAAE,MAAM;IAAE,IAAI,EAAE;EAAkB,CAAE;EACjE,iBAAiB,EAAE;IAAE,OAAO,EAAE,MAAM;IAAE,IAAI,EAAE;EAAiB,CAAE;EAE/D,GAAG,EAAE;IAAE,OAAO,EAAE,EAAE;IAAE,IAAI,EAAE;EAAK,CAAE;EACjC,IAAI,EAAE;IAAE,OAAO,EAAE,EAAE;IAAE,IAAI,EAAE;EAAM;CACpC;AAED;;;;;AAKG;AACH,OAAM,SAAU,UAAU,CAAC,OAAmB,EAAA;EAC1C;EACA,IAAI,OAAO,IAAI,IAAI,EAAE;IAAE,OAAO,IAAI;EAAG;EAErC,IAAI,OAAO,OAAQ,KAAK,QAAQ,EAAE;IAC9B,KAAK,IAAM,IAAI,IAAI,QAAQ,EAAE;MACzB,IAAM,SAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC;MAC/B,IAAI,SAAQ,CAAC,OAAO,KAAK,OAAO,EAAE;QAC9B,OAAO;UACH,IAAI,EAAE,SAAQ,CAAC,IAAI;UACnB,OAAO,EAAE,SAAQ,CAAC,OAAO;UACzB,UAAU,EAAG,SAAQ,CAAC,UAAU,IAAI,IAAK;UACzC,gBAAgB,EAAG,SAAQ,CAAC,gBAAgB,IAAI;SACnD;MACJ;IACJ;IAED,OAAO;MACH,OAAO,EAAE,OAAO;MAChB,IAAI,EAAE;KACT;EACJ;EAED,IAAI,OAAO,OAAQ,KAAK,QAAQ,EAAE;IAC9B,IAAM,UAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC;IAClC,IAAI,UAAQ,IAAI,IAAI,EAAE;MAAE,OAAO,IAAI;IAAG;IACtC,OAAO;MACH,IAAI,EAAE,UAAQ,CAAC,IAAI;MACnB,OAAO,EAAE,UAAQ,CAAC,OAAO;MACzB,UAAU,EAAE,UAAQ,CAAC,UAAU;MAC/B,gBAAgB,EAAG,UAAQ,CAAC,gBAAgB,IAAI;KACnD;EACJ;EAED,IAAM,QAAQ,GAAI,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;EAExC;EACA,IAAI,CAAC,QAAQ,EAAE;IACX,IAAI,OAAO,OAAO,CAAC,OAAQ,KAAK,QAAQ,EAAE;MACtC,MAAM,CAAC,kBAAkB,CAAC,yBAAyB,EAAE,SAAS,EAAE,OAAO,CAAC;IAC3E;IACD,OAAO,OAAO;EACjB;EAED;EACA,IAAI,OAAO,CAAC,OAAO,KAAK,CAAC,IAAI,OAAO,CAAC,OAAO,KAAK,QAAQ,CAAC,OAAO,EAAE;IAC/D,MAAM,CAAC,kBAAkB,CAAC,0BAA0B,EAAE,SAAS,EAAE,OAAO,CAAC;EAC5E;EAED;EACA;EACA,IAAI,eAAe,GAAwB,OAAO,CAAC,gBAAgB,IAAI,IAAI;EAC3E,IAAI,eAAe,IAAI,IAAI,IAAI,QAAQ,CAAC,gBAAgB,EAAE;IACtD,IAAI,eAAe,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;MAC5C,eAAe,GAAG,QAAQ,CAAC,gBAAgB,CAAC,SAAS,CAAC,OAAO,CAAC;KACjE,MAAM;MACH,eAAe,GAAG,QAAQ,CAAC,gBAAgB;IAC9C;EACJ;EAED;EACA,OAAO;IACH,IAAI,EAAE,OAAO,CAAC,IAAI;IAClB,OAAO,EAAE,QAAQ,CAAC,OAAO;IACzB,UAAU,EAAG,OAAO,CAAC,UAAU,IAAI,QAAQ,CAAC,UAAU,IAAI,IAAK;IAC/D,gBAAgB,EAAE;GACrB;AACL","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nfunction isRenetworkable(value) {\n    return (value && typeof (value.renetwork) === \"function\");\n}\nfunction ethDefaultProvider(network) {\n    const func = function (providers, options) {\n        if (options == null) {\n            options = {};\n        }\n        const providerList = [];\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            }\n            catch (error) { }\n        }\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            }\n            catch (error) { }\n        }\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            }\n            catch (error) { }\n        }\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [\"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\"];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            }\n            catch (error) { }\n        }\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            }\n            catch (error) { }\n        }\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [\"ropsten\"];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            }\n            catch (error) { }\n        }\n        if (providerList.length === 0) {\n            return null;\n        }\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            }\n            else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n        return providerList[0];\n    };\n    func.renetwork = function (network) {\n        return ethDefaultProvider(network);\n    };\n    return func;\n}\nfunction etcDefaultProvider(url, network) {\n    const func = function (providers, options) {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n        return null;\n    };\n    func.renetwork = function (network) {\n        return etcDefaultProvider(url, network);\n    };\n    return func;\n}\nconst homestead = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n// See: https://chainlist.org\nconst networks = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n    homestead: homestead,\n    mainnet: homestead,\n    morden: { chainId: 2, name: \"morden\" },\n    ropsten: ropsten,\n    testnet: ropsten,\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n    kintsugi: { chainId: 1337702, name: \"kintsugi\" },\n    sepolia: {\n        chainId: 11155111,\n        name: \"sepolia\",\n        _defaultProvider: ethDefaultProvider(\"sepolia\")\n    },\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n    xdai: { chainId: 100, name: \"xdai\" },\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n    \"arbitrum-goerli\": { chainId: 421613, name: \"arbitrum-goerli\" },\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network) {\n    // No network (null)\n    if (network == null) {\n        return null;\n    }\n    if (typeof (network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n    if (typeof (network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) {\n            return null;\n        }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n    const standard = networks[network.name];\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof (network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        }\n        else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}