{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar codegen_1 = require(\"../../compile/codegen\");\nvar util_1 = require(\"../../compile/util\");\nvar ucs2length_1 = require(\"../../runtime/ucs2length\");\nvar error = {\n  message: function message(_ref) {\n    var keyword = _ref.keyword,\n      schemaCode = _ref.schemaCode;\n    var comp = keyword === \"maxLength\" ? \"more\" : \"fewer\";\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must NOT have \", \" than \", \" characters\"])), comp, schemaCode);\n  },\n  params: function params(_ref2) {\n    var schemaCode = _ref2.schemaCode;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{limit: \", \"}\"])), schemaCode);\n  }\n};\nvar def = {\n  keyword: [\"maxLength\", \"minLength\"],\n  type: \"string\",\n  schemaType: \"number\",\n  $data: true,\n  error: error,\n  code: function code(cxt) {\n    var keyword = cxt.keyword,\n      data = cxt.data,\n      schemaCode = cxt.schemaCode,\n      it = cxt.it;\n    var op = keyword === \"maxLength\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n    var len = it.opts.unicode === false ? (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \".length\"])), data) : (0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \"(\", \")\"])), (0, util_1.useFunc)(cxt.gen, ucs2length_1.default), data);\n    cxt.fail$data((0, codegen_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \" \", \" \", \"\"])), len, op, schemaCode));\n  }\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/limitLength.ts"],"names":[],"mappings":";;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AAEA,IAAM,KAAK,GAA2B;EACpC,OAAO,yBAAsB;IAAA,IAApB,OAAO,QAAP,OAAO;MAAE,UAAU,QAAV,UAAU;IAC1B,IAAM,IAAI,GAAG,OAAO,KAAK,WAAW,GAAG,MAAM,GAAG,OAAO;IACvD,QAAO,CAAA,EAAA,SAAA,CAAA,GAAG,8GAAiB,IAAI,EAAS,UAAU;EACpD,CAAC;EACD,MAAM,EAAE;IAAA,IAAE,UAAU,SAAV,UAAU;IAAA,QAAM,CAAA,EAAA,SAAA,CAAA,CAAC,sFAAW,UAAU;EAAA;CACjD;AAED,IAAM,GAAG,GAA0B;EACjC,OAAO,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC;EACnC,IAAI,EAAE,QAAQ;EACd,UAAU,EAAE,QAAQ;EACpB,KAAK,EAAE,IAAI;EACX,KAAK,EAAL,KAAK;EACL,IAAI,gBAAC,GAAe,EAAA;IAClB,IAAO,OAAO,GAA0B,GAAG,CAApC,OAAO;MAAE,IAAI,GAAoB,GAAG,CAA3B,IAAI;MAAE,UAAU,GAAQ,GAAG,CAArB,UAAU;MAAE,EAAE,GAAI,GAAG,CAAT,EAAE;IACpC,IAAM,EAAE,GAAG,OAAO,KAAK,WAAW,GAAG,SAAA,CAAA,SAAS,CAAC,EAAE,GAAG,SAAA,CAAA,SAAS,CAAC,EAAE;IAChE,IAAM,GAAG,GACP,EAAE,CAAC,IAAI,CAAC,OAAO,KAAK,KAAK,IAAG,CAAA,EAAA,SAAA,CAAA,CAAC,oFAAG,IAAI,KAAY,CAAA,EAAA,SAAA,CAAA,CAAC,mFAAG,CAAA,CAAA,EAAA,MAAA,CAAA,OAAO,EAAC,GAAG,CAAC,GAAG,EAAE,YAAA,CAAA,OAAU,CAAC,EAAI,IAAI,CAAG;IAC7F,GAAG,CAAC,SAAS,EAAC,CAAA,EAAA,SAAA,CAAA,CAAC,uFAAG,GAAG,EAAI,EAAE,EAAI,UAAU,EAAG;EAC9C;CACD;AAED,OAAA,CAAA,OAAA,GAAe,GAAG","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst ucs2length_1 = require(\"../../runtime/ucs2length\");\nconst error = {\n    message({ keyword, schemaCode }) {\n        const comp = keyword === \"maxLength\" ? \"more\" : \"fewer\";\n        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} characters`;\n    },\n    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,\n};\nconst def = {\n    keyword: [\"maxLength\", \"minLength\"],\n    type: \"string\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { keyword, data, schemaCode, it } = cxt;\n        const op = keyword === \"maxLength\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n        const len = it.opts.unicode === false ? (0, codegen_1._) `${data}.length` : (0, codegen_1._) `${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;\n        cxt.fail$data((0, codegen_1._) `${len} ${op} ${schemaCode}`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=limitLength.js.map"]},"metadata":{},"sourceType":"script"}