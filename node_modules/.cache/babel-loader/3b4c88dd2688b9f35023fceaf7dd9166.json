{"ast":null,"code":"\"use strict\";\n\nimport { decrypt as decryptCrowdsale } from \"./crowdsale\";\nimport { getJsonWalletAddress, isCrowdsaleWallet, isKeystoreWallet } from \"./inspect\";\nimport { decrypt as decryptKeystore, decryptSync as decryptKeystoreSync, encrypt as encryptKeystore } from \"./keystore\";\nfunction decryptJsonWallet(json, password, progressCallback) {\n  if (isCrowdsaleWallet(json)) {\n    if (progressCallback) {\n      progressCallback(0);\n    }\n    var account = decryptCrowdsale(json, password);\n    if (progressCallback) {\n      progressCallback(1);\n    }\n    return Promise.resolve(account);\n  }\n  if (isKeystoreWallet(json)) {\n    return decryptKeystore(json, password, progressCallback);\n  }\n  return Promise.reject(new Error(\"invalid JSON wallet\"));\n}\nfunction decryptJsonWalletSync(json, password) {\n  if (isCrowdsaleWallet(json)) {\n    return decryptCrowdsale(json, password);\n  }\n  if (isKeystoreWallet(json)) {\n    return decryptKeystoreSync(json, password);\n  }\n  throw new Error(\"invalid JSON wallet\");\n}\nexport { decryptCrowdsale, decryptKeystore, decryptKeystoreSync, encryptKeystore, isCrowdsaleWallet, isKeystoreWallet, getJsonWalletAddress, decryptJsonWallet, decryptJsonWalletSync };","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"AAAA,YAAY;;AAKZ,SAAS,OAAO,IAAI,gBAAgB,QAAQ,aAAa;AACzD,SAAS,oBAAoB,EAAE,iBAAiB,EAAE,gBAAgB,QAAQ,WAAW;AACrF,SAAS,OAAO,IAAI,eAAe,EAAE,WAAW,IAAI,mBAAmB,EAAE,OAAO,IAAI,eAAe,QAA0C,YAAY;AAEzJ,SAAS,iBAAiB,CAAC,IAAY,EAAE,QAAwB,EAAE,gBAAmC,EAAA;EAClG,IAAI,iBAAiB,CAAC,IAAI,CAAC,EAAE;IACzB,IAAI,gBAAgB,EAAE;MAAE,gBAAgB,CAAC,CAAC,CAAC;IAAG;IAC9C,IAAM,OAAO,GAAG,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC;IAChD,IAAI,gBAAgB,EAAE;MAAE,gBAAgB,CAAC,CAAC,CAAC;IAAG;IAC9C,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;EAClC;EAED,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE;IACxB,OAAO,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,gBAAgB,CAAC;EAC3D;EAED,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;AAC3D;AAEA,SAAS,qBAAqB,CAAC,IAAY,EAAE,QAAwB,EAAA;EACjE,IAAI,iBAAiB,CAAC,IAAI,CAAC,EAAE;IACzB,OAAO,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC;EAC1C;EAED,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE;IACxB,OAAO,mBAAmB,CAAC,IAAI,EAAE,QAAQ,CAAC;EAC7C;EAED,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC;AAC1C;AAEA,SACI,gBAAgB,EAEhB,eAAe,EACf,mBAAmB,EACnB,eAAe,EAEf,iBAAiB,EACjB,gBAAgB,EAChB,oBAAoB,EAEpB,iBAAiB,EACjB,qBAAqB","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { decrypt as decryptCrowdsale } from \"./crowdsale\";\nimport { getJsonWalletAddress, isCrowdsaleWallet, isKeystoreWallet } from \"./inspect\";\nimport { decrypt as decryptKeystore, decryptSync as decryptKeystoreSync, encrypt as encryptKeystore } from \"./keystore\";\nfunction decryptJsonWallet(json, password, progressCallback) {\n    if (isCrowdsaleWallet(json)) {\n        if (progressCallback) {\n            progressCallback(0);\n        }\n        const account = decryptCrowdsale(json, password);\n        if (progressCallback) {\n            progressCallback(1);\n        }\n        return Promise.resolve(account);\n    }\n    if (isKeystoreWallet(json)) {\n        return decryptKeystore(json, password, progressCallback);\n    }\n    return Promise.reject(new Error(\"invalid JSON wallet\"));\n}\nfunction decryptJsonWalletSync(json, password) {\n    if (isCrowdsaleWallet(json)) {\n        return decryptCrowdsale(json, password);\n    }\n    if (isKeystoreWallet(json)) {\n        return decryptKeystoreSync(json, password);\n    }\n    throw new Error(\"invalid JSON wallet\");\n}\nexport { decryptCrowdsale, decryptKeystore, decryptKeystoreSync, encryptKeystore, isCrowdsaleWallet, isKeystoreWallet, getJsonWalletAddress, decryptJsonWallet, decryptJsonWalletSync, };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}