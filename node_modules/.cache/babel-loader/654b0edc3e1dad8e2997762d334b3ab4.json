{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar codegen_1 = require(\"../../compile/codegen\");\nvar util_1 = require(\"../../compile/util\");\nvar equal_1 = require(\"../../runtime/equal\");\nvar error = {\n  message: \"must be equal to constant\",\n  params: function params(_ref) {\n    var schemaCode = _ref.schemaCode;\n    return (0, codegen_1._)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"{allowedValue: \", \"}\"])), schemaCode);\n  }\n};\nvar def = {\n  keyword: \"const\",\n  $data: true,\n  error: error,\n  code: function code(cxt) {\n    var gen = cxt.gen,\n      data = cxt.data,\n      $data = cxt.$data,\n      schemaCode = cxt.schemaCode,\n      schema = cxt.schema;\n    if ($data || schema && typeof schema == \"object\") {\n      cxt.fail$data((0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"!\", \"(\", \", \", \")\"])), (0, util_1.useFunc)(gen, equal_1.default), data, schemaCode));\n    } else {\n      cxt.fail((0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \" !== \", \"\"])), schema, data));\n    }\n  }\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/const.ts"],"names":[],"mappings":";;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;AAIA,IAAM,KAAK,GAA2B;EACpC,OAAO,EAAE,2BAA2B;EACpC,MAAM,EAAE;IAAA,IAAE,UAAU,QAAV,UAAU;IAAA,QAAM,CAAA,EAAA,SAAA,CAAA,CAAC,2FAAkB,UAAU;EAAA;CACxD;AAED,IAAM,GAAG,GAA0B;EACjC,OAAO,EAAE,OAAO;EAChB,KAAK,EAAE,IAAI;EACX,KAAK,EAAL,KAAK;EACL,IAAI,gBAAC,GAAe,EAAA;IAClB,IAAO,GAAG,GAAqC,GAAG,CAA3C,GAAG;MAAE,IAAI,GAA+B,GAAG,CAAtC,IAAI;MAAE,KAAK,GAAwB,GAAG,CAAhC,KAAK;MAAE,UAAU,GAAY,GAAG,CAAzB,UAAU;MAAE,MAAM,GAAI,GAAG,CAAb,MAAM;IAC3C,IAAI,KAAK,IAAK,MAAM,IAAI,OAAO,MAAM,IAAI,QAAS,EAAE;MAClD,GAAG,CAAC,SAAS,EAAC,CAAA,EAAA,SAAA,CAAA,CAAC,0FAAI,CAAA,CAAA,EAAA,MAAA,CAAA,OAAO,EAAC,GAAG,EAAE,OAAA,CAAA,OAAK,CAAC,EAAI,IAAI,EAAK,UAAU,EAAI;KAClE,MAAM;MACL,GAAG,CAAC,IAAI,EAAC,CAAA,EAAA,SAAA,CAAA,CAAC,sFAAG,MAAM,EAAQ,IAAI,EAAG;IACnC;EACH;CACD;AAED,OAAA,CAAA,OAAA,GAAe,GAAG","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst equal_1 = require(\"../../runtime/equal\");\nconst error = {\n    message: \"must be equal to constant\",\n    params: ({ schemaCode }) => (0, codegen_1._) `{allowedValue: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"const\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, data, $data, schemaCode, schema } = cxt;\n        if ($data || (schema && typeof schema == \"object\")) {\n            cxt.fail$data((0, codegen_1._) `!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);\n        }\n        else {\n            cxt.fail((0, codegen_1._) `${schema} !== ${data}`);\n        }\n    },\n};\nexports.default = def;\n//# sourceMappingURL=const.js.map"]},"metadata":{},"sourceType":"script"}