{"ast":null,"code":"\"use strict\";\n\nimport _toConsumableArray from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _assertThisInitialized from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress as _getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n;\n;\n///////////////////////////////\nvar allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  from: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true,\n  customData: true,\n  ccipReadEnabled: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var name, address;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return nameOrPromise;\n          case 2:\n            name = _context.sent;\n            if (typeof name !== \"string\") {\n              logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n            }\n            // If it is already an address, just use it (after adding checksum)\n            _context.prev = 4;\n            return _context.abrupt(\"return\", getAddress(name));\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](4);\n          case 10:\n            if (!resolver) {\n              logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"resolveName\"\n              });\n            }\n            _context.next = 13;\n            return resolver.resolveName(name);\n          case 13:\n            address = _context.sent;\n            if (address == null) {\n              logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n            }\n            return _context.abrupt(\"return\", address);\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 8]]);\n  }));\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!Array.isArray(paramType)) {\n              _context2.next = 4;\n              break;\n            }\n            _context2.next = 3;\n            return Promise.all(paramType.map(function (paramType, index) {\n              return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);\n            }));\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 4:\n            if (!(paramType.type === \"address\")) {\n              _context2.next = 8;\n              break;\n            }\n            _context2.next = 7;\n            return resolveName(resolver, value);\n          case 7:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 8:\n            if (!(paramType.type === \"tuple\")) {\n              _context2.next = 12;\n              break;\n            }\n            _context2.next = 11;\n            return resolveAddresses(resolver, value, paramType.components);\n          case 11:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 12:\n            if (!(paramType.baseType === \"array\")) {\n              _context2.next = 18;\n              break;\n            }\n            if (Array.isArray(value)) {\n              _context2.next = 15;\n              break;\n            }\n            return _context2.abrupt(\"return\", Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n              argument: \"value\",\n              value: value\n            })));\n          case 15:\n            _context2.next = 17;\n            return Promise.all(value.map(function (v) {\n              return resolveAddresses(resolver, v, paramType.arrayChildren);\n            }));\n          case 17:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 18:\n            return _context2.abrupt(\"return\", value);\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\nfunction populateTransaction(contract, fragment, args) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    var _this = this;\n    var overrides, resolved, data, tx, ro, intrinsic, bytes, i, roValue, leftovers;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            // If an extra argument is given, it is overrides\n            overrides = {};\n            if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n              overrides = shallowCopy(args.pop());\n            }\n            // Make sure the parameter count matches\n            logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n            // Populate \"from\" override (allow promises)\n            if (contract.signer) {\n              if (overrides.from) {\n                // Contracts with a Signer are from the Signer's frame-of-reference;\n                // but we allow overriding \"from\" if it matches the signer\n                overrides.from = resolveProperties({\n                  override: resolveName(contract.signer, overrides.from),\n                  signer: contract.signer.getAddress()\n                }).then(function (check) {\n                  return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            if (getAddress(check.signer) !== check.override) {\n                              logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"overrides.from\"\n                              });\n                            }\n                            return _context3.abrupt(\"return\", check.override);\n                          case 2:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n                });\n              } else {\n                overrides.from = contract.signer.getAddress();\n              }\n            } else if (overrides.from) {\n              overrides.from = resolveName(contract.provider, overrides.from);\n              //} else {\n              // Contracts without a signer can override \"from\", and if\n              // unspecified the zero address is used\n              //overrides.from = AddressZero;\n            }\n            // Wait for all dependencies to be resolved (prefer the signer over the provider)\n            _context4.next = 6;\n            return resolveProperties({\n              args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n              address: contract.resolvedAddress,\n              overrides: resolveProperties(overrides) || {}\n            });\n          case 6:\n            resolved = _context4.sent;\n            // The ABI coded transaction\n            data = contract.interface.encodeFunctionData(fragment, resolved.args);\n            tx = {\n              data: data,\n              to: resolved.address\n            }; // Resolved Overrides\n            ro = resolved.overrides; // Populate simple overrides\n            if (ro.nonce != null) {\n              tx.nonce = BigNumber.from(ro.nonce).toNumber();\n            }\n            if (ro.gasLimit != null) {\n              tx.gasLimit = BigNumber.from(ro.gasLimit);\n            }\n            if (ro.gasPrice != null) {\n              tx.gasPrice = BigNumber.from(ro.gasPrice);\n            }\n            if (ro.maxFeePerGas != null) {\n              tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n            }\n            if (ro.maxPriorityFeePerGas != null) {\n              tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n            }\n            if (ro.from != null) {\n              tx.from = ro.from;\n            }\n            if (ro.type != null) {\n              tx.type = ro.type;\n            }\n            if (ro.accessList != null) {\n              tx.accessList = accessListify(ro.accessList);\n            }\n            // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n            if (tx.gasLimit == null && fragment.gas != null) {\n              // Compute the intrinsic gas cost for this transaction\n              // @TODO: This is based on the yellow paper as of Petersburg; this is something\n              // we may wish to parameterize in v6 as part of the Network object. Since this\n              // is always a non-nil to address, we can ignore G_create, but may wish to add\n              // similar logic to the ContractFactory.\n              intrinsic = 21000;\n              bytes = arrayify(data);\n              for (i = 0; i < bytes.length; i++) {\n                intrinsic += 4;\n                if (bytes[i]) {\n                  intrinsic += 64;\n                }\n              }\n              tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n            }\n            // Populate \"value\" override\n            if (ro.value) {\n              roValue = BigNumber.from(ro.value);\n              if (!roValue.isZero() && !fragment.payable) {\n                logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"overrides.value\",\n                  value: overrides.value\n                });\n              }\n              tx.value = roValue;\n            }\n            if (ro.customData) {\n              tx.customData = shallowCopy(ro.customData);\n            }\n            if (ro.ccipReadEnabled) {\n              tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n            }\n            // Remove the overrides\n            delete overrides.nonce;\n            delete overrides.gasLimit;\n            delete overrides.gasPrice;\n            delete overrides.from;\n            delete overrides.value;\n            delete overrides.type;\n            delete overrides.accessList;\n            delete overrides.maxFeePerGas;\n            delete overrides.maxPriorityFeePerGas;\n            delete overrides.customData;\n            delete overrides.ccipReadEnabled;\n            // Make sure there are no stray overrides, which may indicate a\n            // typo or using an unsupported key.\n            leftovers = Object.keys(overrides).filter(function (key) {\n              return overrides[key] != null;\n            });\n            if (leftovers.length) {\n              logger.throwError(\"cannot override \".concat(leftovers.map(function (l) {\n                return JSON.stringify(l);\n              }).join(\",\")), Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides\",\n                overrides: leftovers\n              });\n            }\n            return _context4.abrupt(\"return\", tx);\n          case 36:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\nfunction buildPopulate(contract, fragment) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return populateTransaction(contract, fragment, args);\n  };\n}\nfunction buildEstimate(contract, fragment) {\n  var signerOrProvider = contract.signer || contract.provider;\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n      var tx;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!signerOrProvider) {\n                logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"estimateGas\"\n                });\n              }\n              _context5.next = 3;\n              return populateTransaction(contract, fragment, args);\n            case 3:\n              tx = _context5.sent;\n              _context5.next = 6;\n              return signerOrProvider.estimateGas(tx);\n            case 6:\n              return _context5.abrupt(\"return\", _context5.sent);\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n  };\n}\nfunction addContractWait(contract, tx) {\n  var wait = tx.wait.bind(tx);\n  tx.wait = function (confirmations) {\n    return wait(confirmations).then(function (receipt) {\n      receipt.events = receipt.logs.map(function (log) {\n        var event = deepCopy(log);\n        var parsed = null;\n        try {\n          parsed = contract.interface.parseLog(log);\n        } catch (e) {}\n        // Successfully parsed the event log; include it\n        if (parsed) {\n          event.args = parsed.args;\n          event.decode = function (data, topics) {\n            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n          };\n          event.event = parsed.name;\n          event.eventSignature = parsed.signature;\n        }\n        // Useful operations\n        event.removeListener = function () {\n          return contract.provider;\n        };\n        event.getBlock = function () {\n          return contract.provider.getBlock(receipt.blockHash);\n        };\n        event.getTransaction = function () {\n          return contract.provider.getTransaction(receipt.transactionHash);\n        };\n        event.getTransactionReceipt = function () {\n          return Promise.resolve(receipt);\n        };\n        return event;\n      });\n      return receipt;\n    });\n  };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n  var signerOrProvider = contract.signer || contract.provider;\n  return function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n      var blockTag, overrides, tx, result, value;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              // Extract the \"blockTag\" override if present\n              blockTag = undefined;\n              if (!(args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\")) {\n                _context6.next = 9;\n                break;\n              }\n              overrides = shallowCopy(args.pop());\n              if (!(overrides.blockTag != null)) {\n                _context6.next = 7;\n                break;\n              }\n              _context6.next = 6;\n              return overrides.blockTag;\n            case 6:\n              blockTag = _context6.sent;\n            case 7:\n              delete overrides.blockTag;\n              args.push(overrides);\n            case 9:\n              if (!(contract.deployTransaction != null)) {\n                _context6.next = 12;\n                break;\n              }\n              _context6.next = 12;\n              return contract._deployed(blockTag);\n            case 12:\n              _context6.next = 14;\n              return populateTransaction(contract, fragment, args);\n            case 14:\n              tx = _context6.sent;\n              _context6.next = 17;\n              return signerOrProvider.call(tx, blockTag);\n            case 17:\n              result = _context6.sent;\n              _context6.prev = 18;\n              value = contract.interface.decodeFunctionResult(fragment, result);\n              if (collapseSimple && fragment.outputs.length === 1) {\n                value = value[0];\n              }\n              return _context6.abrupt(\"return\", value);\n            case 24:\n              _context6.prev = 24;\n              _context6.t0 = _context6[\"catch\"](18);\n              if (_context6.t0.code === Logger.errors.CALL_EXCEPTION) {\n                _context6.t0.address = contract.address;\n                _context6.t0.args = args;\n                _context6.t0.transaction = tx;\n              }\n              throw _context6.t0;\n            case 28:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[18, 24]]);\n    }));\n  };\n}\nfunction buildSend(contract, fragment) {\n  return function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n      var txRequest, tx;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!contract.signer) {\n                logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"sendTransaction\"\n                });\n              }\n              // If the contract was just deployed, wait until it is mined\n              if (!(contract.deployTransaction != null)) {\n                _context7.next = 4;\n                break;\n              }\n              _context7.next = 4;\n              return contract._deployed();\n            case 4:\n              _context7.next = 6;\n              return populateTransaction(contract, fragment, args);\n            case 6:\n              txRequest = _context7.sent;\n              _context7.next = 9;\n              return contract.signer.sendTransaction(txRequest);\n            case 9:\n              tx = _context7.sent;\n              // Tweak the tx.wait so the receipt has extra properties\n              addContractWait(contract, tx);\n              return _context7.abrupt(\"return\", tx);\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n  };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n  if (fragment.constant) {\n    return buildCall(contract, fragment, collapseSimple);\n  }\n  return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n    return \"*\";\n  }\n  return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map(function (topic) {\n    if (Array.isArray(topic)) {\n      return topic.join(\"|\");\n    }\n    return topic;\n  }).join(\":\") : \"\");\n}\nvar RunningEvent = /*#__PURE__*/function () {\n  function RunningEvent(tag, filter) {\n    _classCallCheck(this, RunningEvent);\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"filter\", filter);\n    this._listeners = [];\n  }\n  _createClass(RunningEvent, [{\n    key: \"addListener\",\n    value: function addListener(listener, once) {\n      this._listeners.push({\n        listener: listener,\n        once: once\n      });\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(listener) {\n      var done = false;\n      this._listeners = this._listeners.filter(function (item) {\n        if (done || item.listener !== listener) {\n          return true;\n        }\n        done = true;\n        return false;\n      });\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      this._listeners = [];\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners() {\n      return this._listeners.map(function (i) {\n        return i.listener;\n      });\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount() {\n      return this._listeners.length;\n    }\n  }, {\n    key: \"run\",\n    value: function run(args) {\n      var _this2 = this;\n      var listenerCount = this.listenerCount();\n      this._listeners = this._listeners.filter(function (item) {\n        var argsCopy = args.slice();\n        // Call the callback in the next event loop\n        setTimeout(function () {\n          item.listener.apply(_this2, argsCopy);\n        }, 0);\n        // Reschedule it if it not \"once\"\n        return !item.once;\n      });\n      return listenerCount;\n    }\n  }, {\n    key: \"prepareEvent\",\n    value: function prepareEvent(event) {}\n    // Returns the array that will be applied to an emit\n  }, {\n    key: \"getEmit\",\n    value: function getEmit(event) {\n      return [event];\n    }\n  }]);\n  return RunningEvent;\n}();\nvar ErrorRunningEvent = /*#__PURE__*/function (_RunningEvent) {\n  _inherits(ErrorRunningEvent, _RunningEvent);\n  var _super = _createSuper(ErrorRunningEvent);\n  function ErrorRunningEvent() {\n    _classCallCheck(this, ErrorRunningEvent);\n    return _super.call(this, \"error\", null);\n  }\n  return _createClass(ErrorRunningEvent);\n}(RunningEvent); // @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nvar FragmentRunningEvent = /*#__PURE__*/function (_RunningEvent2) {\n  _inherits(FragmentRunningEvent, _RunningEvent2);\n  var _super2 = _createSuper(FragmentRunningEvent);\n  function FragmentRunningEvent(address, contractInterface, fragment, topics) {\n    var _this3;\n    _classCallCheck(this, FragmentRunningEvent);\n    var filter = {\n      address: address\n    };\n    var topic = contractInterface.getEventTopic(fragment);\n    if (topics) {\n      if (topic !== topics[0]) {\n        logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n      }\n      filter.topics = topics.slice();\n    } else {\n      filter.topics = [topic];\n    }\n    _this3 = _super2.call(this, getEventTag(filter), filter);\n    defineReadOnly(_assertThisInitialized(_this3), \"address\", address);\n    defineReadOnly(_assertThisInitialized(_this3), \"interface\", contractInterface);\n    defineReadOnly(_assertThisInitialized(_this3), \"fragment\", fragment);\n    return _this3;\n  }\n  _createClass(FragmentRunningEvent, [{\n    key: \"prepareEvent\",\n    value: function prepareEvent(event) {\n      var _this4 = this;\n      _get(_getPrototypeOf(FragmentRunningEvent.prototype), \"prepareEvent\", this).call(this, event);\n      event.event = this.fragment.name;\n      event.eventSignature = this.fragment.format();\n      event.decode = function (data, topics) {\n        return _this4.interface.decodeEventLog(_this4.fragment, data, topics);\n      };\n      try {\n        event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n      } catch (error) {\n        event.args = null;\n        event.decodeError = error;\n      }\n    }\n  }, {\n    key: \"getEmit\",\n    value: function getEmit(event) {\n      var errors = checkResultErrors(event.args);\n      if (errors.length) {\n        throw errors[0].error;\n      }\n      var args = (event.args || []).slice();\n      args.push(event);\n      return args;\n    }\n  }]);\n  return FragmentRunningEvent;\n}(RunningEvent); // A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nvar WildcardRunningEvent = /*#__PURE__*/function (_RunningEvent3) {\n  _inherits(WildcardRunningEvent, _RunningEvent3);\n  var _super3 = _createSuper(WildcardRunningEvent);\n  function WildcardRunningEvent(address, contractInterface) {\n    var _this5;\n    _classCallCheck(this, WildcardRunningEvent);\n    _this5 = _super3.call(this, \"*\", {\n      address: address\n    });\n    defineReadOnly(_assertThisInitialized(_this5), \"address\", address);\n    defineReadOnly(_assertThisInitialized(_this5), \"interface\", contractInterface);\n    return _this5;\n  }\n  _createClass(WildcardRunningEvent, [{\n    key: \"prepareEvent\",\n    value: function prepareEvent(event) {\n      var _this6 = this;\n      _get(_getPrototypeOf(WildcardRunningEvent.prototype), \"prepareEvent\", this).call(this, event);\n      try {\n        var parsed = this.interface.parseLog(event);\n        event.event = parsed.name;\n        event.eventSignature = parsed.signature;\n        event.decode = function (data, topics) {\n          return _this6.interface.decodeEventLog(parsed.eventFragment, data, topics);\n        };\n        event.args = parsed.args;\n      } catch (error) {\n        // No matching event\n      }\n    }\n  }]);\n  return WildcardRunningEvent;\n}(RunningEvent);\nexport var BaseContract = /*#__PURE__*/function () {\n  function BaseContract(addressOrName, contractInterface, signerOrProvider) {\n    var _this7 = this;\n    _classCallCheck(this, BaseContract);\n    // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n    //address = getAddress(address);\n    defineReadOnly(this, \"interface\", getStatic(this instanceof BaseContract ? this.constructor : void 0, \"getInterface\")(contractInterface));\n    if (signerOrProvider == null) {\n      defineReadOnly(this, \"provider\", null);\n      defineReadOnly(this, \"signer\", null);\n    } else if (Signer.isSigner(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n      defineReadOnly(this, \"signer\", signerOrProvider);\n    } else if (Provider.isProvider(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider);\n      defineReadOnly(this, \"signer\", null);\n    } else {\n      logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n    }\n    defineReadOnly(this, \"callStatic\", {});\n    defineReadOnly(this, \"estimateGas\", {});\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"populateTransaction\", {});\n    defineReadOnly(this, \"filters\", {});\n    {\n      var uniqueFilters = {};\n      Object.keys(this.interface.events).forEach(function (eventSignature) {\n        var event = _this7.interface.events[eventSignature];\n        defineReadOnly(_this7.filters, eventSignature, function () {\n          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n            args[_key5] = arguments[_key5];\n          }\n          return {\n            address: _this7.address,\n            topics: _this7.interface.encodeFilterTopics(event, args)\n          };\n        });\n        if (!uniqueFilters[event.name]) {\n          uniqueFilters[event.name] = [];\n        }\n        uniqueFilters[event.name].push(eventSignature);\n      });\n      Object.keys(uniqueFilters).forEach(function (name) {\n        var filters = uniqueFilters[name];\n        if (filters.length === 1) {\n          defineReadOnly(_this7.filters, name, _this7.filters[filters[0]]);\n        } else {\n          logger.warn(\"Duplicate definition of \".concat(name, \" (\").concat(filters.join(\", \"), \")\"));\n        }\n      });\n    }\n    defineReadOnly(this, \"_runningEvents\", {});\n    defineReadOnly(this, \"_wrappedEmits\", {});\n    if (addressOrName == null) {\n      logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n    }\n    defineReadOnly(this, \"address\", addressOrName);\n    if (this.provider) {\n      defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n    } else {\n      try {\n        defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n      } catch (error) {\n        // Without a provider, we cannot use ENS names\n        logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"new Contract\"\n        });\n      }\n    }\n    // Swallow bad ENS names to prevent Unhandled Exceptions\n    this.resolvedAddress.catch(function (e) {});\n    var uniqueNames = {};\n    var uniqueSignatures = {};\n    Object.keys(this.interface.functions).forEach(function (signature) {\n      var fragment = _this7.interface.functions[signature];\n      // Check that the signature is unique; if not the ABI generation has\n      // not been cleaned or may be incorrectly generated\n      if (uniqueSignatures[signature]) {\n        logger.warn(\"Duplicate ABI entry for \".concat(JSON.stringify(signature)));\n        return;\n      }\n      uniqueSignatures[signature] = true;\n      // Track unique names; we only expose bare named functions if they\n      // are ambiguous\n      {\n        var name = fragment.name;\n        if (!uniqueNames[\"%\".concat(name)]) {\n          uniqueNames[\"%\".concat(name)] = [];\n        }\n        uniqueNames[\"%\".concat(name)].push(signature);\n      }\n      if (_this7[signature] == null) {\n        defineReadOnly(_this7, signature, buildDefault(_this7, fragment, true));\n      }\n      // We do not collapse simple calls on this bucket, which allows\n      // frameworks to safely use this without introspection as well as\n      // allows decoding error recovery.\n      if (_this7.functions[signature] == null) {\n        defineReadOnly(_this7.functions, signature, buildDefault(_this7, fragment, false));\n      }\n      if (_this7.callStatic[signature] == null) {\n        defineReadOnly(_this7.callStatic, signature, buildCall(_this7, fragment, true));\n      }\n      if (_this7.populateTransaction[signature] == null) {\n        defineReadOnly(_this7.populateTransaction, signature, buildPopulate(_this7, fragment));\n      }\n      if (_this7.estimateGas[signature] == null) {\n        defineReadOnly(_this7.estimateGas, signature, buildEstimate(_this7, fragment));\n      }\n    });\n    Object.keys(uniqueNames).forEach(function (name) {\n      // Ambiguous names to not get attached as bare names\n      var signatures = uniqueNames[name];\n      if (signatures.length > 1) {\n        return;\n      }\n      // Strip off the leading \"%\" used for prototype protection\n      name = name.substring(1);\n      var signature = signatures[0];\n      // If overwriting a member property that is null, swallow the error\n      try {\n        if (_this7[name] == null) {\n          defineReadOnly(_this7, name, _this7[signature]);\n        }\n      } catch (e) {}\n      if (_this7.functions[name] == null) {\n        defineReadOnly(_this7.functions, name, _this7.functions[signature]);\n      }\n      if (_this7.callStatic[name] == null) {\n        defineReadOnly(_this7.callStatic, name, _this7.callStatic[signature]);\n      }\n      if (_this7.populateTransaction[name] == null) {\n        defineReadOnly(_this7.populateTransaction, name, _this7.populateTransaction[signature]);\n      }\n      if (_this7.estimateGas[name] == null) {\n        defineReadOnly(_this7.estimateGas, name, _this7.estimateGas[signature]);\n      }\n    });\n  }\n  _createClass(BaseContract, [{\n    key: \"deployed\",\n    value:\n    // @TODO: Allow timeout?\n    function deployed() {\n      return this._deployed();\n    }\n  }, {\n    key: \"_deployed\",\n    value: function _deployed(blockTag) {\n      var _this8 = this;\n      if (!this._deployedPromise) {\n        // If we were just deployed, we know the transaction we should occur in\n        if (this.deployTransaction) {\n          this._deployedPromise = this.deployTransaction.wait().then(function () {\n            return _this8;\n          });\n        } else {\n          // @TODO: Once we allow a timeout to be passed in, we will wait\n          // up to that many blocks for getCode\n          // Otherwise, poll for our code to be deployed\n          this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function (code) {\n            if (code === \"0x\") {\n              logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                contractAddress: _this8.address,\n                operation: \"getDeployed\"\n              });\n            }\n            return _this8;\n          });\n        }\n      }\n      return this._deployedPromise;\n    }\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n  }, {\n    key: \"fallback\",\n    value: function fallback(overrides) {\n      var _this9 = this;\n      if (!this.signer) {\n        logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"sendTransaction(fallback)\"\n        });\n      }\n      var tx = shallowCopy(overrides || {});\n      [\"from\", \"to\"].forEach(function (key) {\n        if (tx[key] == null) {\n          return;\n        }\n        logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: key\n        });\n      });\n      tx.to = this.resolvedAddress;\n      return this.deployed().then(function () {\n        return _this9.signer.sendTransaction(tx);\n      });\n    }\n    // Reconnect to a different signer or provider\n  }, {\n    key: \"connect\",\n    value: function connect(signerOrProvider) {\n      if (typeof signerOrProvider === \"string\") {\n        signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n      }\n      var contract = new this.constructor(this.address, this.interface, signerOrProvider);\n      if (this.deployTransaction) {\n        defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n      }\n      return contract;\n    }\n    // Re-attach to a different on-chain instance of this contract\n  }, {\n    key: \"attach\",\n    value: function attach(addressOrName) {\n      return new this.constructor(addressOrName, this.interface, this.signer || this.provider);\n    }\n  }, {\n    key: \"_normalizeRunningEvent\",\n    value: function _normalizeRunningEvent(runningEvent) {\n      // Already have an instance of this event running; we can re-use it\n      if (this._runningEvents[runningEvent.tag]) {\n        return this._runningEvents[runningEvent.tag];\n      }\n      return runningEvent;\n    }\n  }, {\n    key: \"_getRunningEvent\",\n    value: function _getRunningEvent(eventName) {\n      if (typeof eventName === \"string\") {\n        // Listen for \"error\" events (if your contract has an error event, include\n        // the full signature to bypass this special event keyword)\n        if (eventName === \"error\") {\n          return this._normalizeRunningEvent(new ErrorRunningEvent());\n        }\n        // Listen for any event that is registered\n        if (eventName === \"event\") {\n          return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n        }\n        // Listen for any event\n        if (eventName === \"*\") {\n          return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n        }\n        // Get the event Fragment (throws if ambiguous/unknown event)\n        var fragment = this.interface.getEvent(eventName);\n        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n      }\n      // We have topics to filter by...\n      if (eventName.topics && eventName.topics.length > 0) {\n        // Is it a known topichash? (throws if no matching topichash)\n        try {\n          var topic = eventName.topics[0];\n          if (typeof topic !== \"string\") {\n            throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n          }\n\n          var _fragment = this.interface.getEvent(topic);\n          return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, _fragment, eventName.topics));\n        } catch (error) {}\n        // Filter by the unknown topichash\n        var filter = {\n          address: this.address,\n          topics: eventName.topics\n        };\n        return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n      }\n      return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n  }, {\n    key: \"_checkRunningEvents\",\n    value: function _checkRunningEvents(runningEvent) {\n      if (runningEvent.listenerCount() === 0) {\n        delete this._runningEvents[runningEvent.tag];\n        // If we have a poller for this, remove it\n        var emit = this._wrappedEmits[runningEvent.tag];\n        if (emit && runningEvent.filter) {\n          this.provider.off(runningEvent.filter, emit);\n          delete this._wrappedEmits[runningEvent.tag];\n        }\n      }\n    }\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n  }, {\n    key: \"_wrapEvent\",\n    value: function _wrapEvent(runningEvent, log, listener) {\n      var _this10 = this;\n      var event = deepCopy(log);\n      event.removeListener = function () {\n        if (!listener) {\n          return;\n        }\n        runningEvent.removeListener(listener);\n        _this10._checkRunningEvents(runningEvent);\n      };\n      event.getBlock = function () {\n        return _this10.provider.getBlock(log.blockHash);\n      };\n      event.getTransaction = function () {\n        return _this10.provider.getTransaction(log.transactionHash);\n      };\n      event.getTransactionReceipt = function () {\n        return _this10.provider.getTransactionReceipt(log.transactionHash);\n      };\n      // This may throw if the topics and data mismatch the signature\n      runningEvent.prepareEvent(event);\n      return event;\n    }\n  }, {\n    key: \"_addEventListener\",\n    value: function _addEventListener(runningEvent, listener, once) {\n      var _this11 = this;\n      if (!this.provider) {\n        logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"once\"\n        });\n      }\n      runningEvent.addListener(listener, once);\n      // Track this running event and its listeners (may already be there; but no hard in updating)\n      this._runningEvents[runningEvent.tag] = runningEvent;\n      // If we are not polling the provider, start polling\n      if (!this._wrappedEmits[runningEvent.tag]) {\n        var wrappedEmit = function wrappedEmit(log) {\n          var event = _this11._wrapEvent(runningEvent, log, listener);\n          // Try to emit the result for the parameterized event...\n          if (event.decodeError == null) {\n            try {\n              var args = runningEvent.getEmit(event);\n              _this11.emit.apply(_this11, [runningEvent.filter].concat(_toConsumableArray(args)));\n            } catch (error) {\n              event.decodeError = error.error;\n            }\n          }\n          // Always emit \"event\" for fragment-base events\n          if (runningEvent.filter != null) {\n            _this11.emit(\"event\", event);\n          }\n          // Emit \"error\" if there was an error\n          if (event.decodeError != null) {\n            _this11.emit(\"error\", event.decodeError, event);\n          }\n        };\n        this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n        // Special events, like \"error\" do not have a filter\n        if (runningEvent.filter != null) {\n          this.provider.on(runningEvent.filter, wrappedEmit);\n        }\n      }\n    }\n  }, {\n    key: \"queryFilter\",\n    value: function queryFilter(event, fromBlockOrBlockhash, toBlock) {\n      var _this12 = this;\n      var runningEvent = this._getRunningEvent(event);\n      var filter = shallowCopy(runningEvent.filter);\n      if (typeof fromBlockOrBlockhash === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n        if (toBlock != null) {\n          logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n        }\n        filter.blockHash = fromBlockOrBlockhash;\n      } else {\n        filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;\n        filter.toBlock = toBlock != null ? toBlock : \"latest\";\n      }\n      return this.provider.getLogs(filter).then(function (logs) {\n        return logs.map(function (log) {\n          return _this12._wrapEvent(runningEvent, log, null);\n        });\n      });\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, listener) {\n      this._addEventListener(this._getRunningEvent(event), listener, false);\n      return this;\n    }\n  }, {\n    key: \"once\",\n    value: function once(event, listener) {\n      this._addEventListener(this._getRunningEvent(event), listener, true);\n      return this;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName) {\n      if (!this.provider) {\n        return false;\n      }\n      var runningEvent = this._getRunningEvent(eventName);\n      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n        args[_key6 - 1] = arguments[_key6];\n      }\n      var result = runningEvent.run(args) > 0;\n      // May have drained all the \"once\" events; check for living events\n      this._checkRunningEvents(runningEvent);\n      return result;\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventName) {\n      var _this13 = this;\n      if (!this.provider) {\n        return 0;\n      }\n      if (eventName == null) {\n        return Object.keys(this._runningEvents).reduce(function (accum, key) {\n          return accum + _this13._runningEvents[key].listenerCount();\n        }, 0);\n      }\n      return this._getRunningEvent(eventName).listenerCount();\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners(eventName) {\n      var _this14 = this;\n      if (!this.provider) {\n        return [];\n      }\n      if (eventName == null) {\n        var _ret = function () {\n          var result = [];\n          for (var tag in _this14._runningEvents) {\n            _this14._runningEvents[tag].listeners().forEach(function (listener) {\n              result.push(listener);\n            });\n          }\n          return {\n            v: result\n          };\n        }();\n        if (typeof _ret === \"object\") return _ret.v;\n      }\n      return this._getRunningEvent(eventName).listeners();\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventName) {\n      if (!this.provider) {\n        return this;\n      }\n      if (eventName == null) {\n        for (var tag in this._runningEvents) {\n          var _runningEvent = this._runningEvents[tag];\n          _runningEvent.removeAllListeners();\n          this._checkRunningEvents(_runningEvent);\n        }\n        return this;\n      }\n      // Delete any listeners\n      var runningEvent = this._getRunningEvent(eventName);\n      runningEvent.removeAllListeners();\n      this._checkRunningEvents(runningEvent);\n      return this;\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventName, listener) {\n      if (!this.provider) {\n        return this;\n      }\n      var runningEvent = this._getRunningEvent(eventName);\n      runningEvent.removeListener(listener);\n      this._checkRunningEvents(runningEvent);\n      return this;\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventName, listener) {\n      return this.off(eventName, listener);\n    }\n  }], [{\n    key: \"getContractAddress\",\n    value: function getContractAddress(transaction) {\n      return _getContractAddress(transaction);\n    }\n  }, {\n    key: \"getInterface\",\n    value: function getInterface(contractInterface) {\n      if (Interface.isInterface(contractInterface)) {\n        return contractInterface;\n      }\n      return new Interface(contractInterface);\n    }\n  }, {\n    key: \"isIndexed\",\n    value: function isIndexed(value) {\n      return Indexed.isIndexed(value);\n    }\n  }]);\n  return BaseContract;\n}();\nexport var Contract = /*#__PURE__*/function (_BaseContract) {\n  _inherits(Contract, _BaseContract);\n  var _super4 = _createSuper(Contract);\n  function Contract() {\n    _classCallCheck(this, Contract);\n    return _super4.apply(this, arguments);\n  }\n  return _createClass(Contract);\n}(BaseContract);\nexport var ContractFactory = /*#__PURE__*/function () {\n  function ContractFactory(contractInterface, bytecode, signer) {\n    _classCallCheck(this, ContractFactory);\n    var bytecodeHex = null;\n    if (typeof bytecode === \"string\") {\n      bytecodeHex = bytecode;\n    } else if (isBytes(bytecode)) {\n      bytecodeHex = hexlify(bytecode);\n    } else if (bytecode && typeof bytecode.object === \"string\") {\n      // Allow the bytecode object from the Solidity compiler\n      bytecodeHex = bytecode.object;\n    } else {\n      // Crash in the next verification step\n      bytecodeHex = \"!\";\n    }\n    // Make sure it is 0x prefixed\n    if (bytecodeHex.substring(0, 2) !== \"0x\") {\n      bytecodeHex = \"0x\" + bytecodeHex;\n    }\n    // Make sure the final result is valid bytecode\n    if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {\n      logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n    }\n    // If we have a signer, make sure it is valid\n    if (signer && !Signer.isSigner(signer)) {\n      logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n    }\n    defineReadOnly(this, \"bytecode\", bytecodeHex);\n    defineReadOnly(this, \"interface\", getStatic(this instanceof ContractFactory ? this.constructor : void 0, \"getInterface\")(contractInterface));\n    defineReadOnly(this, \"signer\", signer || null);\n  }\n  // @TODO: Future; rename to populateTransaction?\n  _createClass(ContractFactory, [{\n    key: \"getDeployTransaction\",\n    value: function getDeployTransaction() {\n      var tx = {};\n      // If we have 1 additional argument, we allow transaction overrides\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n        tx = shallowCopy(args.pop());\n        for (var key in tx) {\n          if (!allowedTransactionKeys[key]) {\n            throw new Error(\"unknown transaction override \" + key);\n          }\n        }\n      }\n      // Do not allow these to be overridden in a deployment transaction\n      [\"data\", \"from\", \"to\"].forEach(function (key) {\n        if (tx[key] == null) {\n          return;\n        }\n        logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: key\n        });\n      });\n      if (tx.value) {\n        var value = BigNumber.from(tx.value);\n        if (!value.isZero() && !this.interface.deploy.payable) {\n          logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"overrides.value\",\n            value: tx.value\n          });\n        }\n      }\n      // Make sure the call matches the constructor signature\n      logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n      // Set the data to the bytecode + the encoded constructor arguments\n      tx.data = hexlify(concat([this.bytecode, this.interface.encodeDeploy(args)]));\n      return tx;\n    }\n  }, {\n    key: \"deploy\",\n    value: function deploy() {\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var overrides, params, unsignedTx, tx, address, contract;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                overrides = {}; // If 1 extra parameter was passed in, it contains overrides\n                if (args.length === this.interface.deploy.inputs.length + 1) {\n                  overrides = args.pop();\n                }\n                // Make sure the call matches the constructor signature\n                logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n                // Resolve ENS names and promises in the arguments\n                _context8.next = 5;\n                return resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n              case 5:\n                params = _context8.sent;\n                params.push(overrides);\n                // Get the deployment transaction (with optional overrides)\n                unsignedTx = this.getDeployTransaction.apply(this, _toConsumableArray(params)); // Send the deployment transaction\n                _context8.next = 10;\n                return this.signer.sendTransaction(unsignedTx);\n              case 10:\n                tx = _context8.sent;\n                address = getStatic(this.constructor, \"getContractAddress\")(tx);\n                contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer); // Add the modified wait that wraps events\n                addContractWait(contract, tx);\n                defineReadOnly(contract, \"deployTransaction\", tx);\n                return _context8.abrupt(\"return\", contract);\n              case 16:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(address) {\n      return this.constructor.getContract(address, this.interface, this.signer);\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(signer) {\n      return new this.constructor(this.interface, this.bytecode, signer);\n    }\n  }], [{\n    key: \"fromSolidity\",\n    value: function fromSolidity(compilerOutput, signer) {\n      if (compilerOutput == null) {\n        logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, {\n          argument: \"compilerOutput\"\n        });\n      }\n      if (typeof compilerOutput === \"string\") {\n        compilerOutput = JSON.parse(compilerOutput);\n      }\n      var abi = compilerOutput.abi;\n      var bytecode = null;\n      if (compilerOutput.bytecode) {\n        bytecode = compilerOutput.bytecode;\n      } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n        bytecode = compilerOutput.evm.bytecode;\n      }\n      return new this(abi, bytecode, signer);\n    }\n  }, {\n    key: \"getInterface\",\n    value: function getInterface(contractInterface) {\n      return Contract.getInterface(contractInterface);\n    }\n  }, {\n    key: \"getContractAddress\",\n    value: function getContractAddress(tx) {\n      return _getContractAddress(tx);\n    }\n  }, {\n    key: \"getContract\",\n    value: function getContract(address, contractInterface, signer) {\n      return new Contract(address, contractInterface, signer);\n    }\n  }]);\n  return ContractFactory;\n}();","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n///////////////////////////////\nconst allowedTransactionKeys = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true,\n    ccipReadEnabled: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const name = yield nameOrPromise;\n        if (typeof (name) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n        }\n        // If it is already an address, just use it (after adding checksum)\n        try {\n            return getAddress(name);\n        }\n        catch (error) { }\n        if (!resolver) {\n            logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"resolveName\"\n            });\n        }\n        const address = yield resolver.resolveName(name);\n        if (address == null) {\n            logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n        }\n        return address;\n    });\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (Array.isArray(paramType)) {\n            return yield Promise.all(paramType.map((paramType, index) => {\n                return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);\n            }));\n        }\n        if (paramType.type === \"address\") {\n            return yield resolveName(resolver, value);\n        }\n        if (paramType.type === \"tuple\") {\n            return yield resolveAddresses(resolver, value, paramType.components);\n        }\n        if (paramType.baseType === \"array\") {\n            if (!Array.isArray(value)) {\n                return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"value\",\n                    value\n                }));\n            }\n            return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n        }\n        return value;\n    });\n}\nfunction populateTransaction(contract, fragment, args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // If an extra argument is given, it is overrides\n        let overrides = {};\n        if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            overrides = shallowCopy(args.pop());\n        }\n        // Make sure the parameter count matches\n        logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n        // Populate \"from\" override (allow promises)\n        if (contract.signer) {\n            if (overrides.from) {\n                // Contracts with a Signer are from the Signer's frame-of-reference;\n                // but we allow overriding \"from\" if it matches the signer\n                overrides.from = resolveProperties({\n                    override: resolveName(contract.signer, overrides.from),\n                    signer: contract.signer.getAddress()\n                }).then((check) => __awaiter(this, void 0, void 0, function* () {\n                    if (getAddress(check.signer) !== check.override) {\n                        logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"overrides.from\"\n                        });\n                    }\n                    return check.override;\n                }));\n            }\n            else {\n                overrides.from = contract.signer.getAddress();\n            }\n        }\n        else if (overrides.from) {\n            overrides.from = resolveName(contract.provider, overrides.from);\n            //} else {\n            // Contracts without a signer can override \"from\", and if\n            // unspecified the zero address is used\n            //overrides.from = AddressZero;\n        }\n        // Wait for all dependencies to be resolved (prefer the signer over the provider)\n        const resolved = yield resolveProperties({\n            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n            address: contract.resolvedAddress,\n            overrides: (resolveProperties(overrides) || {})\n        });\n        // The ABI coded transaction\n        const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n        const tx = {\n            data: data,\n            to: resolved.address\n        };\n        // Resolved Overrides\n        const ro = resolved.overrides;\n        // Populate simple overrides\n        if (ro.nonce != null) {\n            tx.nonce = BigNumber.from(ro.nonce).toNumber();\n        }\n        if (ro.gasLimit != null) {\n            tx.gasLimit = BigNumber.from(ro.gasLimit);\n        }\n        if (ro.gasPrice != null) {\n            tx.gasPrice = BigNumber.from(ro.gasPrice);\n        }\n        if (ro.maxFeePerGas != null) {\n            tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n        }\n        if (ro.maxPriorityFeePerGas != null) {\n            tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n        }\n        if (ro.from != null) {\n            tx.from = ro.from;\n        }\n        if (ro.type != null) {\n            tx.type = ro.type;\n        }\n        if (ro.accessList != null) {\n            tx.accessList = accessListify(ro.accessList);\n        }\n        // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n        if (tx.gasLimit == null && fragment.gas != null) {\n            // Compute the intrinsic gas cost for this transaction\n            // @TODO: This is based on the yellow paper as of Petersburg; this is something\n            // we may wish to parameterize in v6 as part of the Network object. Since this\n            // is always a non-nil to address, we can ignore G_create, but may wish to add\n            // similar logic to the ContractFactory.\n            let intrinsic = 21000;\n            const bytes = arrayify(data);\n            for (let i = 0; i < bytes.length; i++) {\n                intrinsic += 4;\n                if (bytes[i]) {\n                    intrinsic += 64;\n                }\n            }\n            tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n        }\n        // Populate \"value\" override\n        if (ro.value) {\n            const roValue = BigNumber.from(ro.value);\n            if (!roValue.isZero() && !fragment.payable) {\n                logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: overrides.value\n                });\n            }\n            tx.value = roValue;\n        }\n        if (ro.customData) {\n            tx.customData = shallowCopy(ro.customData);\n        }\n        if (ro.ccipReadEnabled) {\n            tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n        }\n        // Remove the overrides\n        delete overrides.nonce;\n        delete overrides.gasLimit;\n        delete overrides.gasPrice;\n        delete overrides.from;\n        delete overrides.value;\n        delete overrides.type;\n        delete overrides.accessList;\n        delete overrides.maxFeePerGas;\n        delete overrides.maxPriorityFeePerGas;\n        delete overrides.customData;\n        delete overrides.ccipReadEnabled;\n        // Make sure there are no stray overrides, which may indicate a\n        // typo or using an unsupported key.\n        const leftovers = Object.keys(overrides).filter((key) => (overrides[key] != null));\n        if (leftovers.length) {\n            logger.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides\",\n                overrides: leftovers\n            });\n        }\n        return tx;\n    });\n}\nfunction buildPopulate(contract, fragment) {\n    return function (...args) {\n        return populateTransaction(contract, fragment, args);\n    };\n}\nfunction buildEstimate(contract, fragment) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!signerOrProvider) {\n                logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"estimateGas\"\n                });\n            }\n            const tx = yield populateTransaction(contract, fragment, args);\n            return yield signerOrProvider.estimateGas(tx);\n        });\n    };\n}\nfunction addContractWait(contract, tx) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations) => {\n        return wait(confirmations).then((receipt) => {\n            receipt.events = receipt.logs.map((log) => {\n                let event = deepCopy(log);\n                let parsed = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                }\n                catch (e) { }\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data, topics) => {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n                // Useful operations\n                event.removeListener = () => { return contract.provider; };\n                event.getBlock = () => {\n                    return contract.provider.getBlock(receipt.blockHash);\n                };\n                event.getTransaction = () => {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                };\n                event.getTransactionReceipt = () => {\n                    return Promise.resolve(receipt);\n                };\n                return event;\n            });\n            return receipt;\n        });\n    };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Extract the \"blockTag\" override if present\n            let blockTag = undefined;\n            if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n                const overrides = shallowCopy(args.pop());\n                if (overrides.blockTag != null) {\n                    blockTag = yield overrides.blockTag;\n                }\n                delete overrides.blockTag;\n                args.push(overrides);\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed(blockTag);\n            }\n            // Call a node and get the result\n            const tx = yield populateTransaction(contract, fragment, args);\n            const result = yield signerOrProvider.call(tx, blockTag);\n            try {\n                let value = contract.interface.decodeFunctionResult(fragment, result);\n                if (collapseSimple && fragment.outputs.length === 1) {\n                    value = value[0];\n                }\n                return value;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    error.address = contract.address;\n                    error.args = args;\n                    error.transaction = tx;\n                }\n                throw error;\n            }\n        });\n    };\n}\nfunction buildSend(contract, fragment) {\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!contract.signer) {\n                logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"sendTransaction\"\n                });\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed();\n            }\n            const txRequest = yield populateTransaction(contract, fragment, args);\n            const tx = yield contract.signer.sendTransaction(txRequest);\n            // Tweak the tx.wait so the receipt has extra properties\n            addContractWait(contract, tx);\n            return tx;\n        });\n    };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\") : \"\");\n}\nclass RunningEvent {\n    constructor(tag, filter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [];\n    }\n    addListener(listener, once) {\n        this._listeners.push({ listener: listener, once: once });\n    }\n    removeListener(listener) {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) {\n                return true;\n            }\n            done = true;\n            return false;\n        });\n    }\n    removeAllListeners() {\n        this._listeners = [];\n    }\n    listeners() {\n        return this._listeners.map((i) => i.listener);\n    }\n    listenerCount() {\n        return this._listeners.length;\n    }\n    run(args) {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n            const argsCopy = args.slice();\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n        return listenerCount;\n    }\n    prepareEvent(event) {\n    }\n    // Returns the array that will be applied to an emit\n    getEmit(event) {\n        return [event];\n    }\n}\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    constructor(address, contractInterface, fragment, topics) {\n        const filter = {\n            address: address\n        };\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) {\n                logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n            }\n            filter.topics = topics.slice();\n        }\n        else {\n            filter.topics = [topic];\n        }\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n        event.decode = (data, topics) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        }\n        catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n    getEmit(event) {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) {\n            throw errors[0].error;\n        }\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    constructor(address, contractInterface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n            event.decode = (data, topics) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n            event.args = parsed.args;\n        }\n        catch (error) {\n            // No matching event\n        }\n    }\n}\nexport class BaseContract {\n    constructor(addressOrName, contractInterface, signerOrProvider) {\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        }\n        else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n        defineReadOnly(this, \"callStatic\", {});\n        defineReadOnly(this, \"estimateGas\", {});\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"populateTransaction\", {});\n        defineReadOnly(this, \"filters\", {});\n        {\n            const uniqueFilters = {};\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                    };\n                });\n                if (!uniqueFilters[event.name]) {\n                    uniqueFilters[event.name] = [];\n                }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                }\n                else {\n                    logger.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n                }\n            });\n        }\n        defineReadOnly(this, \"_runningEvents\", {});\n        defineReadOnly(this, \"_wrappedEmits\", {});\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        }\n        else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            }\n            catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n        // Swallow bad ENS names to prevent Unhandled Exceptions\n        this.resolvedAddress.catch((e) => { });\n        const uniqueNames = {};\n        const uniqueSignatures = {};\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[`%${name}`]) {\n                    uniqueNames[`%${name}`] = [];\n                }\n                uniqueNames[`%${name}`].push(signature);\n            }\n            if (this[signature] == null) {\n                defineReadOnly(this, signature, buildDefault(this, fragment, true));\n            }\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) {\n                return;\n            }\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n            const signature = signatures[0];\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if (this[name] == null) {\n                    defineReadOnly(this, name, this[signature]);\n                }\n            }\n            catch (e) { }\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n    static getContractAddress(transaction) {\n        return getContractAddress(transaction);\n    }\n    static getInterface(contractInterface) {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n    // @TODO: Allow timeout?\n    deployed() {\n        return this._deployed();\n    }\n    _deployed(blockTag) {\n        if (!this._deployedPromise) {\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n            }\n            else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n        return this._deployedPromise;\n    }\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n    fallback(overrides) {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" });\n        }\n        const tx = shallowCopy(overrides || {});\n        [\"from\", \"to\"].forEach(function (key) {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider) {\n        if (typeof (signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n        const contract = new (this.constructor)(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n        return contract;\n    }\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName) {\n        return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);\n    }\n    static isIndexed(value) {\n        return Indexed.isIndexed(value);\n    }\n    _normalizeRunningEvent(runningEvent) {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n        }\n        return runningEvent;\n    }\n    _getRunningEvent(eventName) {\n        if (typeof (eventName) === \"string\") {\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName);\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof (topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            }\n            catch (error) { }\n            // Filter by the unknown topichash\n            const filter = {\n                address: this.address,\n                topics: eventName.topics\n            };\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n    _checkRunningEvents(runningEvent) {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent, log, listener) {\n        const event = deepCopy(log);\n        event.removeListener = () => {\n            if (!listener) {\n                return;\n            }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); };\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); };\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); };\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n        return event;\n    }\n    _addEventListener(runningEvent, listener, once) {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" });\n        }\n        runningEvent.addListener(listener, once);\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    }\n                    catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n    queryFilter(event, fromBlockOrBlockhash, toBlock) {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n        if (typeof (fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            filter.blockHash = fromBlockOrBlockhash;\n        }\n        else {\n            filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);\n            filter.toBlock = ((toBlock != null) ? toBlock : \"latest\");\n        }\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n    on(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n    once(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n    emit(eventName, ...args) {\n        if (!this.provider) {\n            return false;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!this.provider) {\n            return 0;\n        }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n    listeners(eventName) {\n        if (!this.provider) {\n            return [];\n        }\n        if (eventName == null) {\n            const result = [];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener);\n                });\n            }\n            return result;\n        }\n        return this._getRunningEvent(eventName).listeners();\n    }\n    removeAllListeners(eventName) {\n        if (!this.provider) {\n            return this;\n        }\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    off(eventName, listener) {\n        if (!this.provider) {\n            return this;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n}\nexport class Contract extends BaseContract {\n}\nexport class ContractFactory {\n    constructor(contractInterface, bytecode, signer) {\n        let bytecodeHex = null;\n        if (typeof (bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        }\n        else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        }\n        else if (bytecode && typeof (bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = bytecode.object;\n        }\n        else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") {\n            bytecodeHex = \"0x\" + bytecodeHex;\n        }\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction(...args) {\n        let tx = {};\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n        return tx;\n    }\n    deploy(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let overrides = {};\n            // If 1 extra parameter was passed in, it contains overrides\n            if (args.length === this.interface.deploy.inputs.length + 1) {\n                overrides = args.pop();\n            }\n            // Make sure the call matches the constructor signature\n            logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n            // Resolve ENS names and promises in the arguments\n            const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n            params.push(overrides);\n            // Get the deployment transaction (with optional overrides)\n            const unsignedTx = this.getDeployTransaction(...params);\n            // Send the deployment transaction\n            const tx = yield this.signer.sendTransaction(unsignedTx);\n            const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n            const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n            // Add the modified wait that wraps events\n            addContractWait(contract, tx);\n            defineReadOnly(contract, \"deployTransaction\", tx);\n            return contract;\n        });\n    }\n    attach(address) {\n        return (this.constructor).getContract(address, this.interface, this.signer);\n    }\n    connect(signer) {\n        return new (this.constructor)(this.interface, this.bytecode, signer);\n    }\n    static fromSolidity(compilerOutput, signer) {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n        if (typeof (compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n        const abi = compilerOutput.abi;\n        let bytecode = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        }\n        else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n        return new this(abi, bytecode, signer);\n    }\n    static getInterface(contractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n    static getContractAddress(tx) {\n        return getContractAddress(tx);\n    }\n    static getContract(address, contractInterface, signer) {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}