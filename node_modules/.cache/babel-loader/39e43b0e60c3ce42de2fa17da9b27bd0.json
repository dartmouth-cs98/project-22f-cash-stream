{"ast":null,"code":"\"use strict\";\n\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _BN from \"bn.js\";\nvar BN = _BN.BN;\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar _constructorGuard = {};\nvar MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n  return value != null && (BigNumber.isBigNumber(value) || typeof value === \"number\" && value % 1 === 0 || typeof value === \"string\" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === \"bigint\" || isBytes(value));\n}\n// Only warn about passing 10 into radix once\nvar _warnedToStringRadix = false;\nexport var BigNumber = /*#__PURE__*/function () {\n  function BigNumber(constructorGuard, hex) {\n    _classCallCheck(this, BigNumber);\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new (BigNumber)\"\n      });\n    }\n    this._hex = hex;\n    this._isBigNumber = true;\n    Object.freeze(this);\n  }\n  _createClass(BigNumber, [{\n    key: \"fromTwos\",\n    value: function fromTwos(value) {\n      return toBigNumber(toBN(this).fromTwos(value));\n    }\n  }, {\n    key: \"toTwos\",\n    value: function toTwos(value) {\n      return toBigNumber(toBN(this).toTwos(value));\n    }\n  }, {\n    key: \"abs\",\n    value: function abs() {\n      if (this._hex[0] === \"-\") {\n        return BigNumber.from(this._hex.substring(1));\n      }\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      return toBigNumber(toBN(this).add(toBN(other)));\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(other) {\n      return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n  }, {\n    key: \"div\",\n    value: function div(other) {\n      var o = BigNumber.from(other);\n      if (o.isZero()) {\n        throwFault(\"division-by-zero\", \"div\");\n      }\n      return toBigNumber(toBN(this).div(toBN(other)));\n    }\n  }, {\n    key: \"mul\",\n    value: function mul(other) {\n      return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n  }, {\n    key: \"mod\",\n    value: function mod(other) {\n      var value = toBN(other);\n      if (value.isNeg()) {\n        throwFault(\"division-by-zero\", \"mod\");\n      }\n      return toBigNumber(toBN(this).umod(value));\n    }\n  }, {\n    key: \"pow\",\n    value: function pow(other) {\n      var value = toBN(other);\n      if (value.isNeg()) {\n        throwFault(\"negative-power\", \"pow\");\n      }\n      return toBigNumber(toBN(this).pow(value));\n    }\n  }, {\n    key: \"and\",\n    value: function and(other) {\n      var value = toBN(other);\n      if (this.isNegative() || value.isNeg()) {\n        throwFault(\"unbound-bitwise-result\", \"and\");\n      }\n      return toBigNumber(toBN(this).and(value));\n    }\n  }, {\n    key: \"or\",\n    value: function or(other) {\n      var value = toBN(other);\n      if (this.isNegative() || value.isNeg()) {\n        throwFault(\"unbound-bitwise-result\", \"or\");\n      }\n      return toBigNumber(toBN(this).or(value));\n    }\n  }, {\n    key: \"xor\",\n    value: function xor(other) {\n      var value = toBN(other);\n      if (this.isNegative() || value.isNeg()) {\n        throwFault(\"unbound-bitwise-result\", \"xor\");\n      }\n      return toBigNumber(toBN(this).xor(value));\n    }\n  }, {\n    key: \"mask\",\n    value: function mask(value) {\n      if (this.isNegative() || value < 0) {\n        throwFault(\"negative-width\", \"mask\");\n      }\n      return toBigNumber(toBN(this).maskn(value));\n    }\n  }, {\n    key: \"shl\",\n    value: function shl(value) {\n      if (this.isNegative() || value < 0) {\n        throwFault(\"negative-width\", \"shl\");\n      }\n      return toBigNumber(toBN(this).shln(value));\n    }\n  }, {\n    key: \"shr\",\n    value: function shr(value) {\n      if (this.isNegative() || value < 0) {\n        throwFault(\"negative-width\", \"shr\");\n      }\n      return toBigNumber(toBN(this).shrn(value));\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return toBN(this).eq(toBN(other));\n    }\n  }, {\n    key: \"lt\",\n    value: function lt(other) {\n      return toBN(this).lt(toBN(other));\n    }\n  }, {\n    key: \"lte\",\n    value: function lte(other) {\n      return toBN(this).lte(toBN(other));\n    }\n  }, {\n    key: \"gt\",\n    value: function gt(other) {\n      return toBN(this).gt(toBN(other));\n    }\n  }, {\n    key: \"gte\",\n    value: function gte(other) {\n      return toBN(this).gte(toBN(other));\n    }\n  }, {\n    key: \"isNegative\",\n    value: function isNegative() {\n      return this._hex[0] === \"-\";\n    }\n  }, {\n    key: \"isZero\",\n    value: function isZero() {\n      return toBN(this).isZero();\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      try {\n        return toBN(this).toNumber();\n      } catch (error) {\n        throwFault(\"overflow\", \"toNumber\", this.toString());\n      }\n      return null;\n    }\n  }, {\n    key: \"toBigInt\",\n    value: function toBigInt() {\n      try {\n        return BigInt(this.toString());\n      } catch (e) {}\n      return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n        value: this.toString()\n      });\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      // Lots of people expect this, which we do not support, so check (See: #889)\n      if (arguments.length > 0) {\n        if (arguments[0] === 10) {\n          if (!_warnedToStringRadix) {\n            _warnedToStringRadix = true;\n            logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n          }\n        } else if (arguments[0] === 16) {\n          logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n        } else {\n          logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n        }\n      }\n      return toBN(this).toString(10);\n    }\n  }, {\n    key: \"toHexString\",\n    value: function toHexString() {\n      return this._hex;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(key) {\n      return {\n        type: \"BigNumber\",\n        hex: this.toHexString()\n      };\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (value instanceof BigNumber) {\n        return value;\n      }\n      if (typeof value === \"string\") {\n        if (value.match(/^-?0x[0-9a-f]+$/i)) {\n          return new BigNumber(_constructorGuard, toHex(value));\n        }\n        if (value.match(/^-?[0-9]+$/)) {\n          return new BigNumber(_constructorGuard, toHex(new BN(value)));\n        }\n        return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n      }\n      if (typeof value === \"number\") {\n        if (value % 1) {\n          throwFault(\"underflow\", \"BigNumber.from\", value);\n        }\n        if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n          throwFault(\"overflow\", \"BigNumber.from\", value);\n        }\n        return BigNumber.from(String(value));\n      }\n      var anyValue = value;\n      if (typeof anyValue === \"bigint\") {\n        return BigNumber.from(anyValue.toString());\n      }\n      if (isBytes(anyValue)) {\n        return BigNumber.from(hexlify(anyValue));\n      }\n      if (anyValue) {\n        // Hexable interface (takes priority)\n        if (anyValue.toHexString) {\n          var hex = anyValue.toHexString();\n          if (typeof hex === \"string\") {\n            return BigNumber.from(hex);\n          }\n        } else {\n          // For now, handle legacy JSON-ified values (goes away in v6)\n          var _hex = anyValue._hex;\n          // New-form JSON\n          if (_hex == null && anyValue.type === \"BigNumber\") {\n            _hex = anyValue.hex;\n          }\n          if (typeof _hex === \"string\") {\n            if (isHexString(_hex) || _hex[0] === \"-\" && isHexString(_hex.substring(1))) {\n              return BigNumber.from(_hex);\n            }\n          }\n        }\n      }\n      return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n  }, {\n    key: \"isBigNumber\",\n    value: function isBigNumber(value) {\n      return !!(value && value._isBigNumber);\n    }\n  }]);\n  return BigNumber;\n}();\n// Normalize the hex string\nfunction toHex(value) {\n  // For BN, call on the hex string\n  if (typeof value !== \"string\") {\n    return toHex(value.toString(16));\n  }\n  // If negative, prepend the negative sign to the normalized positive value\n  if (value[0] === \"-\") {\n    // Strip off the negative sign\n    value = value.substring(1);\n    // Cannot have multiple negative signs (e.g. \"--0x04\")\n    if (value[0] === \"-\") {\n      logger.throwArgumentError(\"invalid hex\", \"value\", value);\n    }\n    // Call toHex on the positive component\n    value = toHex(value);\n    // Do not allow \"-0x00\"\n    if (value === \"0x00\") {\n      return value;\n    }\n    // Negate the value\n    return \"-\" + value;\n  }\n  // Add a \"0x\" prefix if missing\n  if (value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n  // Normalize zero\n  if (value === \"0x\") {\n    return \"0x00\";\n  }\n  // Make the string even length\n  if (value.length % 2) {\n    value = \"0x0\" + value.substring(2);\n  }\n  // Trim to smallest even-length string\n  while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n    value = \"0x\" + value.substring(4);\n  }\n  return value;\n}\nfunction toBigNumber(value) {\n  return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n  var hex = BigNumber.from(value).toHexString();\n  if (hex[0] === \"-\") {\n    return new BN(\"-\" + hex.substring(3), 16);\n  }\n  return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n  var params = {\n    fault: fault,\n    operation: operation\n  };\n  if (value != null) {\n    params.value = value;\n  }\n  return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n// value should have no prefix\nexport function _base36To16(value) {\n  return new BN(value, 36).toString(16);\n}\n// value should have no prefix\nexport function _base16To36(value) {\n  return new BN(value, 16).toString(36);\n}","map":{"version":3,"sources":["../src.ts/bignumber.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\nimport _BN from \"bn.js\";\nvar BN = _BN.BN;\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n    return (value != null) && (BigNumber.isBigNumber(value) ||\n        (typeof (value) === \"number\" && (value % 1) === 0) ||\n        (typeof (value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        isHexString(value) ||\n        (typeof (value) === \"bigint\") ||\n        isBytes(value));\n}\n// Only warn about passing 10 into radix once\nlet _warnedToStringRadix = false;\nexport class BigNumber {\n    constructor(constructorGuard, hex) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n        this._hex = hex;\n        this._isBigNumber = true;\n        Object.freeze(this);\n    }\n    fromTwos(value) {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n    toTwos(value) {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n    abs() {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n    add(other) {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n    sub(other) {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n    div(other) {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division-by-zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n    mul(other) {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n    mod(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"division-by-zero\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n    pow(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"negative-power\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    }\n    and(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n    or(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n    xor(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n    mask(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n    shl(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n    shr(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n    eq(other) {\n        return toBN(this).eq(toBN(other));\n    }\n    lt(other) {\n        return toBN(this).lt(toBN(other));\n    }\n    lte(other) {\n        return toBN(this).lte(toBN(other));\n    }\n    gt(other) {\n        return toBN(this).gt(toBN(other));\n    }\n    gte(other) {\n        return toBN(this).gte(toBN(other));\n    }\n    isNegative() {\n        return (this._hex[0] === \"-\");\n    }\n    isZero() {\n        return toBN(this).isZero();\n    }\n    toNumber() {\n        try {\n            return toBN(this).toNumber();\n        }\n        catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n    toBigInt() {\n        try {\n            return BigInt(this.toString());\n        }\n        catch (e) { }\n        return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    }\n    toString() {\n        // Lots of people expect this, which we do not support, so check (See: #889)\n        if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n                if (!_warnedToStringRadix) {\n                    _warnedToStringRadix = true;\n                    logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n                }\n            }\n            else if (arguments[0] === 16) {\n                logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n            else {\n                logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n        }\n        return toBN(this).toString(10);\n    }\n    toHexString() {\n        return this._hex;\n    }\n    toJSON(key) {\n        return { type: \"BigNumber\", hex: this.toHexString() };\n    }\n    static from(value) {\n        if (value instanceof BigNumber) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n        if (typeof (value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n            return BigNumber.from(String(value));\n        }\n        const anyValue = value;\n        if (typeof (anyValue) === \"bigint\") {\n            return BigNumber.from(anyValue.toString());\n        }\n        if (isBytes(anyValue)) {\n            return BigNumber.from(hexlify(anyValue));\n        }\n        if (anyValue) {\n            // Hexable interface (takes priority)\n            if (anyValue.toHexString) {\n                const hex = anyValue.toHexString();\n                if (typeof (hex) === \"string\") {\n                    return BigNumber.from(hex);\n                }\n            }\n            else {\n                // For now, handle legacy JSON-ified values (goes away in v6)\n                let hex = anyValue._hex;\n                // New-form JSON\n                if (hex == null && anyValue.type === \"BigNumber\") {\n                    hex = anyValue.hex;\n                }\n                if (typeof (hex) === \"string\") {\n                    if (isHexString(hex) || (hex[0] === \"-\" && isHexString(hex.substring(1)))) {\n                        return BigNumber.from(hex);\n                    }\n                }\n            }\n        }\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n    static isBigNumber(value) {\n        return !!(value && value._isBigNumber);\n    }\n}\n// Normalize the hex string\nfunction toHex(value) {\n    // For BN, call on the hex string\n    if (typeof (value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n        // Cannot have multiple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") {\n            logger.throwArgumentError(\"invalid hex\", \"value\", value);\n        }\n        // Call toHex on the positive component\n        value = toHex(value);\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") {\n            return value;\n        }\n        // Negate the value\n        return \"-\" + value;\n    }\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    // Normalize zero\n    if (value === \"0x\") {\n        return \"0x00\";\n    }\n    // Make the string even length\n    if (value.length % 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n    return value;\n}\nfunction toBigNumber(value) {\n    return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value != null) {\n        params.value = value;\n    }\n    return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n// value should have no prefix\nexport function _base36To16(value) {\n    return (new BN(value, 36)).toString(16);\n}\n// value should have no prefix\nexport function _base16To36(value) {\n    return (new BN(value, 16)).toString(36);\n}\n//# sourceMappingURL=bignumber.js.map"]},"metadata":{},"sourceType":"module"}