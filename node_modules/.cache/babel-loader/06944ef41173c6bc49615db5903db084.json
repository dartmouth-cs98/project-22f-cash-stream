{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar code_1 = require(\"../code\");\nvar codegen_1 = require(\"../../compile/codegen\");\nvar error = {\n  message: function message(_ref) {\n    var schemaCode = _ref.schemaCode;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must match pattern \\\"\", \"\\\"\"])), schemaCode);\n  },\n  params: function params(_ref2) {\n    var schemaCode = _ref2.schemaCode;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{pattern: \", \"}\"])), schemaCode);\n  }\n};\nvar def = {\n  keyword: \"pattern\",\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error: error,\n  code: function code(cxt) {\n    var data = cxt.data,\n      $data = cxt.$data,\n      schema = cxt.schema,\n      schemaCode = cxt.schemaCode,\n      it = cxt.it;\n    // TODO regexp should be wrapped in try/catchs\n    var u = it.opts.unicodeRegExp ? \"u\" : \"\";\n    var regExp = $data ? (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"(new RegExp(\", \", \", \"))\"])), schemaCode, u) : (0, code_1.usePattern)(cxt, schema);\n    cxt.fail$data((0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"!\", \".test(\", \")\"])), regExp, data));\n  }\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/pattern.ts"],"names":[],"mappings":";;;;;;;AAEA,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AAIA,IAAM,KAAK,GAA2B;EACpC,OAAO,EAAE;IAAA,IAAE,UAAU,QAAV,UAAU;IAAA,QAAM,CAAA,EAAA,SAAA,CAAA,GAAG,kGAAuB,UAAU;EAAA,CAAG;EAClE,MAAM,EAAE;IAAA,IAAE,UAAU,SAAV,UAAU;IAAA,QAAM,CAAA,EAAA,SAAA,CAAA,CAAC,wFAAa,UAAU;EAAA;CACnD;AAED,IAAM,GAAG,GAA0B;EACjC,OAAO,EAAE,SAAS;EAClB,IAAI,EAAE,QAAQ;EACd,UAAU,EAAE,QAAQ;EACpB,KAAK,EAAE,IAAI;EACX,KAAK,EAAL,KAAK;EACL,IAAI,gBAAC,GAAe,EAAA;IAClB,IAAO,IAAI,GAAmC,GAAG,CAA1C,IAAI;MAAE,KAAK,GAA4B,GAAG,CAApC,KAAK;MAAE,MAAM,GAAoB,GAAG,CAA7B,MAAM;MAAE,UAAU,GAAQ,GAAG,CAArB,UAAU;MAAE,EAAE,GAAI,GAAG,CAAT,EAAE;IAC1C;IACA,IAAM,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,GAAG,GAAG,GAAG,EAAE;IAC1C,IAAM,MAAM,GAAG,KAAK,IAAG,CAAA,EAAA,SAAA,CAAA,CAAC,iGAAe,UAAU,EAAK,CAAC,IAAO,CAAA,CAAA,EAAA,MAAA,CAAA,UAAU,EAAC,GAAG,EAAE,MAAM,CAAC;IACrF,GAAG,CAAC,SAAS,EAAC,CAAA,EAAA,SAAA,CAAA,CAAC,yFAAI,MAAM,EAAS,IAAI,EAAI;EAC5C;CACD;AAED,OAAA,CAAA,OAAA,GAAe,GAAG","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst code_1 = require(\"../code\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message: ({ schemaCode }) => (0, codegen_1.str) `must match pattern \"${schemaCode}\"`,\n    params: ({ schemaCode }) => (0, codegen_1._) `{pattern: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"pattern\",\n    type: \"string\",\n    schemaType: \"string\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { data, $data, schema, schemaCode, it } = cxt;\n        // TODO regexp should be wrapped in try/catchs\n        const u = it.opts.unicodeRegExp ? \"u\" : \"\";\n        const regExp = $data ? (0, codegen_1._) `(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);\n        cxt.fail$data((0, codegen_1._) `!${regExp}.test(${data})`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=pattern.js.map"]},"metadata":{},"sourceType":"script"}