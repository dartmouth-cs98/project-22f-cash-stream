{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar extract_files_1 = require(\"extract-files\");\nvar form_data_1 = __importDefault(require(\"form-data\"));\n/**\n * Duck type if NodeJS stream\n * https://github.com/sindresorhus/is-stream/blob/3750505b0727f6df54324784fe369365ef78841e/index.js#L3\n */\nvar isExtractableFileEnhanced = function isExtractableFileEnhanced(value) {\n  return extract_files_1.isExtractableFile(value) || value !== null && typeof value === 'object' && typeof value.pipe === 'function';\n};\n/**\n * Returns Multipart Form if body contains files\n * (https://github.com/jaydenseric/graphql-multipart-request-spec)\n * Otherwise returns JSON\n */\nfunction createRequestBody(query, variables, operationName) {\n  var _a = extract_files_1.extractFiles({\n      query: query,\n      variables: variables,\n      operationName: operationName\n    }, '', isExtractableFileEnhanced),\n    clone = _a.clone,\n    files = _a.files;\n  if (files.size === 0) {\n    if (!Array.isArray(query)) {\n      return JSON.stringify(clone);\n    }\n    if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n      throw new Error('Cannot create request body with given variable type, array expected');\n    }\n    // Batch support\n    var payload = query.reduce(function (accu, currentQuery, index) {\n      accu.push({\n        query: currentQuery,\n        variables: variables ? variables[index] : undefined\n      });\n      return accu;\n    }, []);\n    return JSON.stringify(payload);\n  }\n  var Form = typeof FormData === 'undefined' ? form_data_1.default : FormData;\n  var form = new Form();\n  form.append('operations', JSON.stringify(clone));\n  var map = {};\n  var i = 0;\n  files.forEach(function (paths) {\n    map[++i] = paths;\n  });\n  form.append('map', JSON.stringify(map));\n  i = 0;\n  files.forEach(function (paths, file) {\n    form.append(\"\" + ++i, file);\n  });\n  return form;\n}\nexports.default = createRequestBody;","map":{"version":3,"sources":["../src/createRequestBody.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAA,eAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AACA,IAAA,WAAA,GAAA,eAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;AAIA;;;AAGG;AACH,IAAM,yBAAyB,GAAG,SAA5B,yBAAyB,CAAI,KAAU,EAAA;EAC3C,OAAA,eAAA,CAAA,iBAAiB,CAAC,KAAK,CAAC,IACvB,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,UAAW;AADjF,CACiF;AAEnF;;;;AAIG;AACH,SAAwB,iBAAiB,CACvC,KAAwB,EACxB,SAAmC,EACnC,aAAsB,EAAA;EAEhB,IAAA,EAAA,GAAmB,eAAA,CAAA,YAAY,CAAC;MAAE,KAAK,EAAA,KAAA;MAAE,SAAS,EAAA,SAAA;MAAE,aAAa,EAAA;IAAA,CAAE,EAAE,EAAE,EAAE,yBAAyB,CAAC;IAAjG,KAAK,GAAA,EAAA,CAAA,KAAA;IAAE,KAAK,GAAA,EAAA,CAAA,KAAqF;EAEzG,IAAI,KAAK,CAAC,IAAI,KAAK,CAAC,EAAE;IACpB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;MACzB,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;IAC7B;IAED,IAAI,OAAO,SAAS,KAAK,WAAW,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;MACjE,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC;IACvF;IAED;IACA,IAAM,OAAO,GAAG,KAAK,CAAC,MAAM,CAC1B,UAAC,IAAI,EAAE,YAAY,EAAE,KAAK,EAAA;MACxB,IAAI,CAAC,IAAI,CAAC;QAAE,KAAK,EAAE,YAAY;QAAE,SAAS,EAAE,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG;MAAS,CAAE,CAAC;MACvF,OAAO,IAAI;IACb,CAAC,EACD,EAAE,CACH;IAED,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;EAC/B;EAED,IAAM,IAAI,GAAG,OAAO,QAAQ,KAAK,WAAW,GAAG,WAAA,CAAA,OAAY,GAAG,QAAQ;EAEtE,IAAM,IAAI,GAAG,IAAI,IAAI,EAAE;EAEvB,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;EAEhD,IAAM,GAAG,GAAgC,CAAA,CAAE;EAC3C,IAAI,CAAC,GAAG,CAAC;EACT,KAAK,CAAC,OAAO,CAAC,UAAC,KAAK,EAAA;IAClB,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;EAClB,CAAC,CAAC;EACF,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;EAEvC,CAAC,GAAG,CAAC;EACL,KAAK,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,IAAI,EAAA;IACxB,IAAI,CAAC,MAAM,CAAC,EAAA,GAAG,EAAE,CAAG,EAAE,IAAW,CAAC;EACpC,CAAC,CAAC;EAEF,OAAO,IAAgB;AACzB;AA/CA,OAAA,CAAA,OAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extract_files_1 = require(\"extract-files\");\nvar form_data_1 = __importDefault(require(\"form-data\"));\n/**\n * Duck type if NodeJS stream\n * https://github.com/sindresorhus/is-stream/blob/3750505b0727f6df54324784fe369365ef78841e/index.js#L3\n */\nvar isExtractableFileEnhanced = function (value) {\n    return extract_files_1.isExtractableFile(value) ||\n        (value !== null && typeof value === 'object' && typeof value.pipe === 'function');\n};\n/**\n * Returns Multipart Form if body contains files\n * (https://github.com/jaydenseric/graphql-multipart-request-spec)\n * Otherwise returns JSON\n */\nfunction createRequestBody(query, variables, operationName) {\n    var _a = extract_files_1.extractFiles({ query: query, variables: variables, operationName: operationName }, '', isExtractableFileEnhanced), clone = _a.clone, files = _a.files;\n    if (files.size === 0) {\n        if (!Array.isArray(query)) {\n            return JSON.stringify(clone);\n        }\n        if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n            throw new Error('Cannot create request body with given variable type, array expected');\n        }\n        // Batch support\n        var payload = query.reduce(function (accu, currentQuery, index) {\n            accu.push({ query: currentQuery, variables: variables ? variables[index] : undefined });\n            return accu;\n        }, []);\n        return JSON.stringify(payload);\n    }\n    var Form = typeof FormData === 'undefined' ? form_data_1.default : FormData;\n    var form = new Form();\n    form.append('operations', JSON.stringify(clone));\n    var map = {};\n    var i = 0;\n    files.forEach(function (paths) {\n        map[++i] = paths;\n    });\n    form.append('map', JSON.stringify(map));\n    i = 0;\n    files.forEach(function (paths, file) {\n        form.append(\"\" + ++i, file);\n    });\n    return form;\n}\nexports.default = createRequestBody;\n//# sourceMappingURL=createRequestBody.js.map"]},"metadata":{},"sourceType":"script"}