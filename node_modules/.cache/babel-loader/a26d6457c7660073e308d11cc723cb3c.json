{"ast":null,"code":"import * as events from \"./events\";\nimport { typeGuard } from \"./utils\";\nexport var mapGetAllEventsQueryEvents = function mapGetAllEventsQueryEvents(queryEvents) {\n  return queryEvents.map(function (x) {\n    switch (x.__typename) {\n      case \"AppRegisteredEvent\":\n        return typeGuard({\n          name: \"AppRegistered\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          app: x.app\n        });\n      case \"AgreementClassRegisteredEvent\":\n        return typeGuard({\n          name: \"AgreementClassRegistered\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          agreementType: x.agreementType,\n          code: x.code\n        });\n      case \"AgreementClassUpdatedEvent\":\n        return typeGuard({\n          name: \"AgreementClassUpdated\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          agreementType: x.agreementType,\n          code: x.code\n        });\n      case \"AgreementLiquidatedByEvent\":\n        return typeGuard({\n          name: \"AgreementLiquidatedBy\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          agreementClass: x.agreementClass,\n          agreementId: x.agreementId,\n          bailoutAmount: x.bailoutAmount,\n          bondAccount: x.bondAccount,\n          liquidatorAccount: x.liquidatorAccount,\n          penaltyAccount: x.penaltyAccount,\n          rewardAmount: x.rewardAmount,\n          token: x.token\n        });\n      case \"AgreementLiquidatedV2Event\":\n        return typeGuard({\n          name: \"AgreementLiquidatedV2\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          token: x.token,\n          liquidatorAccount: x.liquidatorAccount,\n          agreementClass: x.agreementClass,\n          agreementId: x.agreementId,\n          targetAccount: x.targetAccount,\n          rewardAmountReceiver: x.rewardAmountReceiver,\n          rewardAmount: x.rewardAmount,\n          targetAccountBalanceDelta: x.targetAccountBalanceDelta,\n          version: x.version,\n          liquidationType: x.liquidationType,\n          // TO BE DEPRECATED in v2 endpoint - use rewardAmountReceiver instead\n          rewardAccount: x.rewardAccount\n        });\n      case \"BurnedEvent\":\n        return typeGuard({\n          name: \"Burned\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          amount: x.amount,\n          data: x.data,\n          from: x.from,\n          operator: x.operator,\n          token: x.token,\n          operatorData: x.operatorData\n        });\n      case \"CFAv1LiquidationPeriodChangedEvent\":\n        return typeGuard({\n          name: \"CFAv1LiquidationPeriodChanged\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          host: x.host,\n          governanceAddress: x.governanceAddress,\n          isKeySet: x.isKeySet,\n          liquidationPeriod: Number(x.liquidationPeriod),\n          superToken: x.superToken\n        });\n      case \"ConfigChangedEvent\":\n        return typeGuard({\n          name: \"ConfigChanged\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          host: x.host,\n          governanceAddress: x.governanceAddress,\n          isKeySet: x.isKeySet,\n          key: x.key,\n          superToken: x.superToken,\n          value: x.value\n        });\n      case \"CustomSuperTokenCreatedEvent\":\n        return typeGuard({\n          name: \"CustomSuperTokenCreated\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          token: x.token\n        });\n      case \"FlowUpdatedEvent\":\n        return typeGuard({\n          name: \"FlowUpdated\",\n          type: mapNumberToFlowUpdateType(x.type),\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          token: x.token,\n          flowRate: x.flowRate,\n          receiver: x.receiver,\n          sender: x.sender,\n          flowOperator: x.flowOperator,\n          deposit: x.deposit\n        });\n      case \"FlowOperatorUpdatedEvent\":\n        return typeGuard({\n          name: \"FlowOperatorUpdated\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          token: x.token,\n          sender: x.sender,\n          permissions: x.permissions,\n          flowRateAllowance: x.flowRateAllowance\n        });\n      case \"GovernanceReplacedEvent\":\n        return typeGuard({\n          name: \"GovernanceReplaced\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          oldGovernance: x.oldGovernance,\n          newGovernance: x.newGovernance\n        });\n      case \"IndexCreatedEvent\":\n        return typeGuard({\n          name: \"IndexCreated\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          token: x.token,\n          indexId: x.indexId,\n          publisher: x.publisher,\n          userData: x.userData\n        });\n      case \"IndexDistributionClaimedEvent\":\n        return typeGuard({\n          name: \"IndexDistributionClaimed\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          token: x.token,\n          amount: x.amount,\n          indexId: x.indexId,\n          publisher: x.publisher,\n          subscriber: x.subscriber\n        });\n      case \"IndexSubscribedEvent\":\n        return typeGuard({\n          name: \"IndexSubscribed\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          token: x.token,\n          indexId: x.indexId,\n          publisher: x.publisher,\n          subscriber: x.subscriber\n        });\n      case \"IndexUnitsUpdatedEvent\":\n        return typeGuard({\n          name: \"IndexUnitsUpdated\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          token: x.token,\n          indexId: x.indexId,\n          publisher: x.publisher,\n          subscriber: x.subscriber,\n          units: x.units,\n          oldUnits: x.oldUnits,\n          userData: x.userData\n        });\n      case \"IndexUnsubscribedEvent\":\n        return typeGuard({\n          name: \"IndexUnsubscribed\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          token: x.token,\n          indexId: x.indexId,\n          publisher: x.publisher,\n          subscriber: x.subscriber,\n          userData: x.userData\n        });\n      case \"IndexUpdatedEvent\":\n        return typeGuard({\n          name: \"IndexUpdated\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          token: x.token,\n          indexId: x.indexId,\n          newIndexValue: x.newIndexValue,\n          oldIndexValue: x.oldIndexValue,\n          publisher: x.publisher,\n          totalUnitsApproved: x.totalUnitsApproved,\n          totalUnitsPending: x.totalUnitsPending,\n          userData: x.userData\n        });\n      case \"JailEvent\":\n        return typeGuard({\n          name: \"Jail\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          app: x.app,\n          reason: x.reason\n        });\n      case \"MintedEvent\":\n        return typeGuard({\n          name: \"Minted\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          operator: x.operator,\n          to: x.to,\n          amount: x.amount,\n          data: x.data,\n          token: x.token,\n          operatorData: x.operatorData\n        });\n      case \"RewardAddressChangedEvent\":\n        return typeGuard({\n          name: \"RewardAddressChanged\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          host: x.host,\n          governanceAddress: x.governanceAddress,\n          superToken: x.superToken,\n          isKeySet: x.isKeySet,\n          rewardAddress: x.rewardAddress\n        });\n      case \"RoleAdminChangedEvent\":\n        return typeGuard({\n          name: \"RoleAdminChanged\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          role: x.role,\n          previousAdminRole: x.previousAdminRole,\n          newAdminRole: x.newAdminRole\n        });\n      case \"RoleGrantedEvent\":\n        return typeGuard({\n          name: \"RoleGranted\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          role: x.role,\n          account: x.account,\n          sender: x.sender\n        });\n      case \"RoleRevokedEvent\":\n        return typeGuard({\n          name: \"RoleRevoked\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          role: x.role,\n          account: x.account,\n          sender: x.sender\n        });\n      case \"SentEvent\":\n        return typeGuard({\n          name: \"Sent\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          operator: x.operator,\n          to: x.to,\n          amount: x.amount,\n          data: x.data,\n          token: x.token,\n          operatorData: x.operatorData\n        });\n      case \"SubscriptionApprovedEvent\":\n        return typeGuard({\n          name: \"SubscriptionApproved\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          token: x.token,\n          subscriber: x.subscriber,\n          publisher: x.publisher,\n          indexId: x.indexId,\n          userData: x.userData,\n          subscription: x.subscription.id\n        });\n      case \"SubscriptionDistributionClaimedEvent\":\n        return typeGuard({\n          name: \"SubscriptionDistributionClaimed\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          token: x.token,\n          subscriber: x.subscriber,\n          publisher: x.publisher,\n          indexId: x.indexId,\n          amount: x.amount,\n          subscription: x.subscription.id\n        });\n      case \"SubscriptionRevokedEvent\":\n        return typeGuard({\n          name: \"SubscriptionRevoked\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          token: x.token,\n          subscriber: x.subscriber,\n          publisher: x.publisher,\n          indexId: x.indexId,\n          userData: x.userData,\n          subscription: x.subscription.id\n        });\n      case \"SubscriptionUnitsUpdatedEvent\":\n        return typeGuard({\n          name: \"SubscriptionUnitsUpdated\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          token: x.token,\n          subscriber: x.subscriber,\n          publisher: x.publisher,\n          indexId: x.indexId,\n          units: x.units,\n          userData: x.userData,\n          subscription: x.subscription.id\n        });\n      case \"SuperTokenCreatedEvent\":\n        return typeGuard({\n          name: \"SuperTokenCreated\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          token: x.token\n        });\n      case \"SuperTokenFactoryUpdatedEvent\":\n        return typeGuard({\n          name: \"SuperTokenFactoryUpdated\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          newFactory: x.newFactory\n        });\n      case \"SuperTokenLogicCreatedEvent\":\n        return typeGuard({\n          name: \"SuperTokenLogicCreated\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          tokenLogic: x.tokenLogic\n        });\n      case \"SuperTokenLogicUpdatedEvent\":\n        return typeGuard({\n          name: \"SuperTokenLogicUpdated\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          token: x.token,\n          code: x.code\n        });\n      case \"PPPConfigurationChangedEvent\":\n        return typeGuard({\n          name: \"PPPConfigurationChanged\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          host: x.host,\n          governanceAddress: x.governanceAddress,\n          superToken: x.superToken,\n          isKeySet: x.isKeySet,\n          liquidationPeriod: x.liquidationPeriod,\n          patricianPeriod: x.patricianPeriod\n        });\n      case \"TokenDowngradedEvent\":\n        return typeGuard({\n          name: \"TokenDowngraded\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          amount: x.amount,\n          token: x.token,\n          account: x.account.id\n        });\n      case \"TokenUpgradedEvent\":\n        return typeGuard({\n          name: \"TokenUpgraded\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          amount: x.amount,\n          token: x.token,\n          account: x.account.id\n        });\n      case \"TransferEvent\":\n        return typeGuard({\n          name: \"Transfer\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          from: x.from.id,\n          to: x.to.id,\n          token: x.token,\n          value: x.value\n        });\n      case \"TrustedForwarderChangedEvent\":\n        return typeGuard({\n          name: \"TrustedForwarderChanged\",\n          id: x.id,\n          blockNumber: Number(x.blockNumber),\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: Number(x.order),\n          timestamp: Number(x.timestamp),\n          logIndex: Number(x.logIndex),\n          host: x.host,\n          governanceAddress: x.governanceAddress,\n          superToken: x.superToken,\n          isKeySet: x.isKeySet,\n          forwarder: x.forwarder,\n          enabled: x.enabled\n        });\n      default:\n        console.warn(\"An unknown event was detected which couldn't be mapped. Please update to the latest version of @superfluid-finance/sdk-core.\");\n        return typeGuard({\n          name: \"_Unknown\",\n          id: x.id,\n          blockNumber: x.blockNumber,\n          transactionHash: x.transactionHash,\n          gasPrice: x.gasPrice,\n          order: x.order,\n          timestamp: x.timestamp,\n          logIndex: x.logIndex\n        });\n    }\n  });\n};\nvar mapNumberToFlowUpdateType = function mapNumberToFlowUpdateType(type) {\n  if (type === 0) {\n    return events.FlowUpdateType.Create;\n  } else if (type === 1) {\n    return events.FlowUpdateType.Update;\n  } else if (type === 2) {\n    return events.FlowUpdateType.Terminate;\n  } else {\n    throw Error(\"Mapping error: unknown flow update type ([\".concat(type, \"]).\"));\n  }\n};","map":{"version":3,"sources":["../../src/mapGetAllEventsQueryEvents.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as events from \"./events\";\nimport { typeGuard } from \"./utils\";\nexport const mapGetAllEventsQueryEvents = (queryEvents) => {\n    return queryEvents.map((x) => {\n        switch (x.__typename) {\n            case \"AppRegisteredEvent\":\n                return typeGuard({\n                    name: \"AppRegistered\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    app: x.app,\n                });\n            case \"AgreementClassRegisteredEvent\":\n                return typeGuard({\n                    name: \"AgreementClassRegistered\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    agreementType: x.agreementType,\n                    code: x.code,\n                });\n            case \"AgreementClassUpdatedEvent\":\n                return typeGuard({\n                    name: \"AgreementClassUpdated\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    agreementType: x.agreementType,\n                    code: x.code,\n                });\n            case \"AgreementLiquidatedByEvent\":\n                return typeGuard({\n                    name: \"AgreementLiquidatedBy\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    agreementClass: x.agreementClass,\n                    agreementId: x.agreementId,\n                    bailoutAmount: x.bailoutAmount,\n                    bondAccount: x.bondAccount,\n                    liquidatorAccount: x.liquidatorAccount,\n                    penaltyAccount: x.penaltyAccount,\n                    rewardAmount: x.rewardAmount,\n                    token: x.token,\n                });\n            case \"AgreementLiquidatedV2Event\":\n                return typeGuard({\n                    name: \"AgreementLiquidatedV2\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    token: x.token,\n                    liquidatorAccount: x.liquidatorAccount,\n                    agreementClass: x.agreementClass,\n                    agreementId: x.agreementId,\n                    targetAccount: x.targetAccount,\n                    rewardAmountReceiver: x.rewardAmountReceiver,\n                    rewardAmount: x.rewardAmount,\n                    targetAccountBalanceDelta: x.targetAccountBalanceDelta,\n                    version: x.version,\n                    liquidationType: x.liquidationType,\n                    // TO BE DEPRECATED in v2 endpoint - use rewardAmountReceiver instead\n                    rewardAccount: x.rewardAccount,\n                });\n            case \"BurnedEvent\":\n                return typeGuard({\n                    name: \"Burned\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    amount: x.amount,\n                    data: x.data,\n                    from: x.from,\n                    operator: x.operator,\n                    token: x.token,\n                    operatorData: x.operatorData,\n                });\n            case \"CFAv1LiquidationPeriodChangedEvent\":\n                return typeGuard({\n                    name: \"CFAv1LiquidationPeriodChanged\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    host: x.host,\n                    governanceAddress: x.governanceAddress,\n                    isKeySet: x.isKeySet,\n                    liquidationPeriod: Number(x.liquidationPeriod),\n                    superToken: x.superToken,\n                });\n            case \"ConfigChangedEvent\":\n                return typeGuard({\n                    name: \"ConfigChanged\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    host: x.host,\n                    governanceAddress: x.governanceAddress,\n                    isKeySet: x.isKeySet,\n                    key: x.key,\n                    superToken: x.superToken,\n                    value: x.value,\n                });\n            case \"CustomSuperTokenCreatedEvent\":\n                return typeGuard({\n                    name: \"CustomSuperTokenCreated\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    token: x.token,\n                });\n            case \"FlowUpdatedEvent\":\n                return typeGuard({\n                    name: \"FlowUpdated\",\n                    type: mapNumberToFlowUpdateType(x.type),\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    token: x.token,\n                    flowRate: x.flowRate,\n                    receiver: x.receiver,\n                    sender: x.sender,\n                    flowOperator: x.flowOperator,\n                    deposit: x.deposit,\n                });\n            case \"FlowOperatorUpdatedEvent\":\n                return typeGuard({\n                    name: \"FlowOperatorUpdated\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    token: x.token,\n                    sender: x.sender,\n                    permissions: x.permissions,\n                    flowRateAllowance: x.flowRateAllowance,\n                });\n            case \"GovernanceReplacedEvent\":\n                return typeGuard({\n                    name: \"GovernanceReplaced\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    oldGovernance: x.oldGovernance,\n                    newGovernance: x.newGovernance,\n                });\n            case \"IndexCreatedEvent\":\n                return typeGuard({\n                    name: \"IndexCreated\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    token: x.token,\n                    indexId: x.indexId,\n                    publisher: x.publisher,\n                    userData: x.userData,\n                });\n            case \"IndexDistributionClaimedEvent\":\n                return typeGuard({\n                    name: \"IndexDistributionClaimed\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    token: x.token,\n                    amount: x.amount,\n                    indexId: x.indexId,\n                    publisher: x.publisher,\n                    subscriber: x.subscriber,\n                });\n            case \"IndexSubscribedEvent\":\n                return typeGuard({\n                    name: \"IndexSubscribed\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    token: x.token,\n                    indexId: x.indexId,\n                    publisher: x.publisher,\n                    subscriber: x.subscriber,\n                });\n            case \"IndexUnitsUpdatedEvent\":\n                return typeGuard({\n                    name: \"IndexUnitsUpdated\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    token: x.token,\n                    indexId: x.indexId,\n                    publisher: x.publisher,\n                    subscriber: x.subscriber,\n                    units: x.units,\n                    oldUnits: x.oldUnits,\n                    userData: x.userData,\n                });\n            case \"IndexUnsubscribedEvent\":\n                return typeGuard({\n                    name: \"IndexUnsubscribed\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    token: x.token,\n                    indexId: x.indexId,\n                    publisher: x.publisher,\n                    subscriber: x.subscriber,\n                    userData: x.userData,\n                });\n            case \"IndexUpdatedEvent\":\n                return typeGuard({\n                    name: \"IndexUpdated\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    token: x.token,\n                    indexId: x.indexId,\n                    newIndexValue: x.newIndexValue,\n                    oldIndexValue: x.oldIndexValue,\n                    publisher: x.publisher,\n                    totalUnitsApproved: x.totalUnitsApproved,\n                    totalUnitsPending: x.totalUnitsPending,\n                    userData: x.userData,\n                });\n            case \"JailEvent\":\n                return typeGuard({\n                    name: \"Jail\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    app: x.app,\n                    reason: x.reason,\n                });\n            case \"MintedEvent\":\n                return typeGuard({\n                    name: \"Minted\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    operator: x.operator,\n                    to: x.to,\n                    amount: x.amount,\n                    data: x.data,\n                    token: x.token,\n                    operatorData: x.operatorData,\n                });\n            case \"RewardAddressChangedEvent\":\n                return typeGuard({\n                    name: \"RewardAddressChanged\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    host: x.host,\n                    governanceAddress: x.governanceAddress,\n                    superToken: x.superToken,\n                    isKeySet: x.isKeySet,\n                    rewardAddress: x.rewardAddress,\n                });\n            case \"RoleAdminChangedEvent\":\n                return typeGuard({\n                    name: \"RoleAdminChanged\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    role: x.role,\n                    previousAdminRole: x.previousAdminRole,\n                    newAdminRole: x.newAdminRole,\n                });\n            case \"RoleGrantedEvent\":\n                return typeGuard({\n                    name: \"RoleGranted\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    role: x.role,\n                    account: x.account,\n                    sender: x.sender,\n                });\n            case \"RoleRevokedEvent\":\n                return typeGuard({\n                    name: \"RoleRevoked\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    role: x.role,\n                    account: x.account,\n                    sender: x.sender,\n                });\n            case \"SentEvent\":\n                return typeGuard({\n                    name: \"Sent\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    operator: x.operator,\n                    to: x.to,\n                    amount: x.amount,\n                    data: x.data,\n                    token: x.token,\n                    operatorData: x.operatorData,\n                });\n            case \"SubscriptionApprovedEvent\":\n                return typeGuard({\n                    name: \"SubscriptionApproved\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    token: x.token,\n                    subscriber: x.subscriber,\n                    publisher: x.publisher,\n                    indexId: x.indexId,\n                    userData: x.userData,\n                    subscription: x.subscription.id,\n                });\n            case \"SubscriptionDistributionClaimedEvent\":\n                return typeGuard({\n                    name: \"SubscriptionDistributionClaimed\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    token: x.token,\n                    subscriber: x.subscriber,\n                    publisher: x.publisher,\n                    indexId: x.indexId,\n                    amount: x.amount,\n                    subscription: x.subscription.id,\n                });\n            case \"SubscriptionRevokedEvent\":\n                return typeGuard({\n                    name: \"SubscriptionRevoked\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    token: x.token,\n                    subscriber: x.subscriber,\n                    publisher: x.publisher,\n                    indexId: x.indexId,\n                    userData: x.userData,\n                    subscription: x.subscription.id,\n                });\n            case \"SubscriptionUnitsUpdatedEvent\":\n                return typeGuard({\n                    name: \"SubscriptionUnitsUpdated\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    token: x.token,\n                    subscriber: x.subscriber,\n                    publisher: x.publisher,\n                    indexId: x.indexId,\n                    units: x.units,\n                    userData: x.userData,\n                    subscription: x.subscription.id,\n                });\n            case \"SuperTokenCreatedEvent\":\n                return typeGuard({\n                    name: \"SuperTokenCreated\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    token: x.token,\n                });\n            case \"SuperTokenFactoryUpdatedEvent\":\n                return typeGuard({\n                    name: \"SuperTokenFactoryUpdated\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    newFactory: x.newFactory,\n                });\n            case \"SuperTokenLogicCreatedEvent\":\n                return typeGuard({\n                    name: \"SuperTokenLogicCreated\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    tokenLogic: x.tokenLogic,\n                });\n            case \"SuperTokenLogicUpdatedEvent\":\n                return typeGuard({\n                    name: \"SuperTokenLogicUpdated\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    token: x.token,\n                    code: x.code,\n                });\n            case \"PPPConfigurationChangedEvent\":\n                return typeGuard({\n                    name: \"PPPConfigurationChanged\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    host: x.host,\n                    governanceAddress: x.governanceAddress,\n                    superToken: x.superToken,\n                    isKeySet: x.isKeySet,\n                    liquidationPeriod: x.liquidationPeriod,\n                    patricianPeriod: x.patricianPeriod,\n                });\n            case \"TokenDowngradedEvent\":\n                return typeGuard({\n                    name: \"TokenDowngraded\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    amount: x.amount,\n                    token: x.token,\n                    account: x.account.id,\n                });\n            case \"TokenUpgradedEvent\":\n                return typeGuard({\n                    name: \"TokenUpgraded\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    amount: x.amount,\n                    token: x.token,\n                    account: x.account.id,\n                });\n            case \"TransferEvent\":\n                return typeGuard({\n                    name: \"Transfer\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    from: x.from.id,\n                    to: x.to.id,\n                    token: x.token,\n                    value: x.value,\n                });\n            case \"TrustedForwarderChangedEvent\":\n                return typeGuard({\n                    name: \"TrustedForwarderChanged\",\n                    id: x.id,\n                    blockNumber: Number(x.blockNumber),\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: Number(x.order),\n                    timestamp: Number(x.timestamp),\n                    logIndex: Number(x.logIndex),\n                    host: x.host,\n                    governanceAddress: x.governanceAddress,\n                    superToken: x.superToken,\n                    isKeySet: x.isKeySet,\n                    forwarder: x.forwarder,\n                    enabled: x.enabled,\n                });\n            default:\n                console.warn(\"An unknown event was detected which couldn't be mapped. Please update to the latest version of @superfluid-finance/sdk-core.\");\n                return typeGuard({\n                    name: \"_Unknown\",\n                    id: x.id,\n                    blockNumber: x.blockNumber,\n                    transactionHash: x.transactionHash,\n                    gasPrice: x.gasPrice,\n                    order: x.order,\n                    timestamp: x.timestamp,\n                    logIndex: x.logIndex,\n                });\n        }\n    });\n};\nconst mapNumberToFlowUpdateType = (type) => {\n    if (type === 0) {\n        return events.FlowUpdateType.Create;\n    }\n    else if (type === 1) {\n        return events.FlowUpdateType.Update;\n    }\n    else if (type === 2) {\n        return events.FlowUpdateType.Terminate;\n    }\n    else {\n        throw Error(`Mapping error: unknown flow update type ([${type}]).`);\n    }\n};\n//# sourceMappingURL=mapGetAllEventsQueryEvents.js.map"]},"metadata":{},"sourceType":"module"}