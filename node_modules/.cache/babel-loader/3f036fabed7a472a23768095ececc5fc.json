{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from '@ethersproject/strings';\nexport function looseArrayify(hexString) {\n  if (typeof hexString === 'string' && hexString.substring(0, 2) !== '0x') {\n    hexString = '0x' + hexString;\n  }\n  return arrayify(hexString);\n}\nexport function zpad(value, length) {\n  value = String(value);\n  while (value.length < length) {\n    value = '0' + value;\n  }\n  return value;\n}\nexport function getPassword(password) {\n  if (typeof password === 'string') {\n    return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);\n  }\n  return arrayify(password);\n}\nexport function searchPath(object, path) {\n  var currentChild = object;\n  var comps = path.toLowerCase().split('/');\n  for (var i = 0; i < comps.length; i++) {\n    // Search for a child object with a case-insensitive matching key\n    var matchingChild = null;\n    for (var key in currentChild) {\n      if (key.toLowerCase() === comps[i]) {\n        matchingChild = currentChild[key];\n        break;\n      }\n    }\n    // Didn't find one. :'(\n    if (matchingChild === null) {\n      return null;\n    }\n    // Now check this child...\n    currentChild = matchingChild;\n  }\n  return currentChild;\n}\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\nexport function uuidV4(randomBytes) {\n  var bytes = arrayify(randomBytes);\n  // Section: 4.1.3:\n  // - time_hi_and_version[12:16] = 0b0100\n  bytes[6] = bytes[6] & 0x0f | 0x40;\n  // Section 4.4\n  // - clock_seq_hi_and_reserved[6] = 0b0\n  // - clock_seq_hi_and_reserved[7] = 0b1\n  bytes[8] = bytes[8] & 0x3f | 0x80;\n  var value = hexlify(bytes);\n  return [value.substring(2, 10), value.substring(10, 14), value.substring(14, 18), value.substring(18, 22), value.substring(22, 34)].join(\"-\");\n}","map":{"version":3,"sources":["../src.ts/utils.ts"],"names":[],"mappings":"AAAA,YAAY;;AAEZ,SAAS,QAAQ,EAAoB,OAAO,QAAQ,sBAAsB;AAC1E,SAAS,WAAW,EAAE,wBAAwB,QAAQ,wBAAwB;AAE9E,OAAM,SAAU,aAAa,CAAC,SAAiB,EAAA;EAC3C,IAAI,OAAO,SAAU,KAAK,QAAQ,IAAI,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;IACtE,SAAS,GAAG,IAAI,GAAG,SAAS;EAC/B;EACD,OAAO,QAAQ,CAAC,SAAS,CAAC;AAC9B;AAEA,OAAM,SAAU,IAAI,CAAC,KAAsB,EAAE,MAAc,EAAA;EACvD,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;EACrB,OAAO,KAAK,CAAC,MAAM,GAAG,MAAM,EAAE;IAAE,KAAK,GAAG,GAAG,GAAG,KAAK;EAAG;EACtD,OAAO,KAAK;AAChB;AAEA,OAAM,SAAU,WAAW,CAAC,QAAwB,EAAA;EAChD,IAAI,OAAO,QAAS,KAAK,QAAQ,EAAE;IAC/B,OAAO,WAAW,CAAC,QAAQ,EAAE,wBAAwB,CAAC,IAAI,CAAC;EAC9D;EACD,OAAO,QAAQ,CAAC,QAAQ,CAAC;AAC7B;AAEA,OAAM,SAAU,UAAU,CAAC,MAAW,EAAE,IAAY,EAAA;EAChD,IAAI,YAAY,GAAG,MAAM;EAEzB,IAAM,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC;EAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAEnC;IACA,IAAI,aAAa,GAAG,IAAI;IACxB,KAAK,IAAM,GAAG,IAAI,YAAY,EAAE;MAC3B,IAAI,GAAG,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,EAAE;QAChC,aAAa,GAAG,YAAY,CAAC,GAAG,CAAC;QACjC;MACH;IACL;IAED;IACA,IAAI,aAAa,KAAK,IAAI,EAAE;MACxB,OAAO,IAAI;IACd;IAED;IACA,YAAY,GAAG,aAAa;EAC/B;EAED,OAAO,YAAY;AACvB;AAEA;AACA,OAAM,SAAU,MAAM,CAAC,WAAsB,EAAA;EACzC,IAAM,KAAK,GAAG,QAAQ,CAAC,WAAW,CAAC;EAEnC;EACA;EACA,KAAK,CAAC,CAAC,CAAC,GAAI,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,GAAI,IAAI;EAEnC;EACA;EACA;EACA,KAAK,CAAC,CAAC,CAAC,GAAI,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,GAAI,IAAI;EAEnC,IAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;EAE5B,OAAO,CACJ,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EACtB,KAAK,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EACvB,KAAK,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EACvB,KAAK,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EACvB,KAAK,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CACzB,CAAC,IAAI,CAAC,GAAG,CAAC;AACf","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from '@ethersproject/strings';\nexport function looseArrayify(hexString) {\n    if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {\n        hexString = '0x' + hexString;\n    }\n    return arrayify(hexString);\n}\nexport function zpad(value, length) {\n    value = String(value);\n    while (value.length < length) {\n        value = '0' + value;\n    }\n    return value;\n}\nexport function getPassword(password) {\n    if (typeof (password) === 'string') {\n        return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);\n    }\n    return arrayify(password);\n}\nexport function searchPath(object, path) {\n    let currentChild = object;\n    const comps = path.toLowerCase().split('/');\n    for (let i = 0; i < comps.length; i++) {\n        // Search for a child object with a case-insensitive matching key\n        let matchingChild = null;\n        for (const key in currentChild) {\n            if (key.toLowerCase() === comps[i]) {\n                matchingChild = currentChild[key];\n                break;\n            }\n        }\n        // Didn't find one. :'(\n        if (matchingChild === null) {\n            return null;\n        }\n        // Now check this child...\n        currentChild = matchingChild;\n    }\n    return currentChild;\n}\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\nexport function uuidV4(randomBytes) {\n    const bytes = arrayify(randomBytes);\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n    const value = hexlify(bytes);\n    return [\n        value.substring(2, 10),\n        value.substring(10, 14),\n        value.substring(14, 18),\n        value.substring(18, 22),\n        value.substring(22, 34),\n    ].join(\"-\");\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}