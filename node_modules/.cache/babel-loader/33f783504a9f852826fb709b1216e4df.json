{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// These are load-balancer-based application IDs\nvar defaultApplicationIds = {\n  homestead: \"6004bcd10040261633ade990\",\n  ropsten: \"6004bd4d0040261633ade991\",\n  rinkeby: \"6004bda20040261633ade994\",\n  goerli: \"6004bd860040261633ade992\"\n};\nexport var PocketProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(PocketProvider, _UrlJsonRpcProvider);\n  var _super = _createSuper(PocketProvider);\n  function PocketProvider(network, apiKey) {\n    _classCallCheck(this, PocketProvider);\n    // We need a bit of creativity in the constructor because\n    // Pocket uses different default API keys based on the network\n    if (apiKey == null) {\n      var n = getStatic(this instanceof PocketProvider ? this.constructor : void 0, \"getNetwork\")(network);\n      if (n) {\n        var applicationId = defaultApplicationIds[n.name];\n        if (applicationId) {\n          apiKey = {\n            applicationId: applicationId,\n            loadBalancer: true\n          };\n        }\n      }\n      // If there was any issue above, we don't know this network\n      if (apiKey == null) {\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n      }\n    }\n    return _super.call(this, network, apiKey);\n  }\n  _createClass(PocketProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.applicationId === defaultApplicationIds[this.network.name];\n    }\n  }], [{\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      // Most API Providers allow null to get the default configuration, but\n      // Pocket requires the network to decide the default provider, so we\n      // rely on hijacking the constructor to add a sensible default for us\n      if (apiKey == null) {\n        logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n      }\n      var apiKeyObj = {\n        applicationId: null,\n        loadBalancer: false,\n        applicationSecretKey: null\n      };\n      // Parse applicationId and applicationSecretKey\n      if (typeof apiKey === \"string\") {\n        apiKeyObj.applicationId = apiKey;\n      } else if (apiKey.applicationSecretKey != null) {\n        logger.assertArgument(typeof apiKey.applicationId === \"string\", \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n        logger.assertArgument(typeof apiKey.applicationSecretKey === \"string\", \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n        apiKeyObj.applicationId = apiKey.applicationId;\n        apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n        apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n      } else if (apiKey.applicationId) {\n        logger.assertArgument(typeof apiKey.applicationId === \"string\", \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n        apiKeyObj.applicationId = apiKey.applicationId;\n        apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n      } else {\n        logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n      }\n      return apiKeyObj;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n      switch (network ? network.name : \"unknown\") {\n        case \"homestead\":\n          host = \"eth-mainnet.gateway.pokt.network\";\n          break;\n        case \"ropsten\":\n          host = \"eth-ropsten.gateway.pokt.network\";\n          break;\n        case \"rinkeby\":\n          host = \"eth-rinkeby.gateway.pokt.network\";\n          break;\n        case \"goerli\":\n          host = \"eth-goerli.gateway.pokt.network\";\n          break;\n        default:\n          logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"network\",\n            value: network\n          });\n      }\n      var url = null;\n      if (apiKey.loadBalancer) {\n        url = \"https://\".concat(host, \"/v1/lb/\").concat(apiKey.applicationId);\n      } else {\n        url = \"https://\".concat(host, \"/v1/\").concat(apiKey.applicationId);\n      }\n      var connection = {\n        url: url\n      };\n      // Initialize empty headers\n      connection.headers = {};\n      // Apply application secret key\n      if (apiKey.applicationSecretKey != null) {\n        connection.user = \"\";\n        connection.password = apiKey.applicationSecretKey;\n      }\n      return connection;\n    }\n  }]);\n  return PocketProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"sources":["../src.ts/pocket-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// These are load-balancer-based application IDs\nconst defaultApplicationIds = {\n    homestead: \"6004bcd10040261633ade990\",\n    ropsten: \"6004bd4d0040261633ade991\",\n    rinkeby: \"6004bda20040261633ade994\",\n    goerli: \"6004bd860040261633ade992\",\n};\nexport class PocketProvider extends UrlJsonRpcProvider {\n    constructor(network, apiKey) {\n        // We need a bit of creativity in the constructor because\n        // Pocket uses different default API keys based on the network\n        if (apiKey == null) {\n            const n = getStatic(new.target, \"getNetwork\")(network);\n            if (n) {\n                const applicationId = defaultApplicationIds[n.name];\n                if (applicationId) {\n                    apiKey = {\n                        applicationId: applicationId,\n                        loadBalancer: true\n                    };\n                }\n            }\n            // If there was any issue above, we don't know this network\n            if (apiKey == null) {\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n            }\n        }\n        super(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        // Most API Providers allow null to get the default configuration, but\n        // Pocket requires the network to decide the default provider, so we\n        // rely on hijacking the constructor to add a sensible default for us\n        if (apiKey == null) {\n            logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n        }\n        const apiKeyObj = {\n            applicationId: null,\n            loadBalancer: false,\n            applicationSecretKey: null\n        };\n        // Parse applicationId and applicationSecretKey\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n        }\n        else if (apiKey.applicationSecretKey != null) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"), \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"), \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n        }\n        else if (apiKey.applicationId) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"), \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n        }\n        else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        let url = null;\n        if (apiKey.loadBalancer) {\n            url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n        }\n        else {\n            url = `https:/\\/${host}/v1/${apiKey.applicationId}`;\n        }\n        const connection = { url };\n        // Initialize empty headers\n        connection.headers = {};\n        // Apply application secret key\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.applicationId === defaultApplicationIds[this.network.name]);\n    }\n}\n//# sourceMappingURL=pocket-provider.js.map"]},"metadata":{},"sourceType":"module"}