{"ast":null,"code":"\"use strict\";\n\n// This gets overridden by rollup\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar exportWordlist = false;\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport var logger = new Logger(version);\nexport var Wordlist = /*#__PURE__*/function () {\n  function Wordlist(locale) {\n    _classCallCheck(this, Wordlist);\n    logger.checkAbstract(this instanceof Wordlist ? this.constructor : void 0, Wordlist);\n    defineReadOnly(this, \"locale\", locale);\n  }\n  // Subclasses may override this\n  _createClass(Wordlist, [{\n    key: \"split\",\n    value: function split(mnemonic) {\n      return mnemonic.toLowerCase().split(/ +/g);\n    }\n    // Subclasses may override this\n  }, {\n    key: \"join\",\n    value: function join(words) {\n      return words.join(\" \");\n    }\n  }], [{\n    key: \"check\",\n    value: function check(wordlist) {\n      var words = [];\n      for (var i = 0; i < 2048; i++) {\n        var word = wordlist.getWord(i);\n        /* istanbul ignore if */\n        if (i !== wordlist.getWordIndex(word)) {\n          return \"0x\";\n        }\n        words.push(word);\n      }\n      return id(words.join(\"\\n\") + \"\\n\");\n    }\n  }, {\n    key: \"register\",\n    value: function register(lang, name) {\n      if (!name) {\n        name = lang.locale;\n      }\n      /* istanbul ignore if */\n      if (exportWordlist) {\n        try {\n          var anyGlobal = window;\n          if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n            if (!anyGlobal._ethers.wordlists[name]) {\n              defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n            }\n          }\n        } catch (error) {}\n      }\n    }\n  }]);\n  return Wordlist;\n}();","map":{"version":3,"sources":["../src.ts/wordlist.ts"],"names":[],"mappings":"AAAA,YAAY;;AAEZ;AAAA;AAAA;AACA,IAAM,cAAc,GAAG,KAAK;AAE5B,SAAS,EAAE,QAAQ,qBAAqB;AACxC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,MAAM,QAAQ,uBAAuB;AAC9C,SAAS,OAAO,QAAQ,YAAY;AACpC,OAAO,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC;AAEzC,WAAsB,QAAQ;EAG1B,kBAAY,MAAc,EAAA;IAAA;IACtB,MAAM,CAAC,aAAa,uDAAa,QAAQ,CAAC;IAC1C,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC;EAC1C;EAKA;EAAA;IAAA;IAAA,OACA,eAAM,QAAgB,EAAA;MAClB,OAAO,QAAQ,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC;IAC9C;IAEA;EAAA;IAAA;IAAA,OACA,cAAK,KAAoB,EAAA;MACrB,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;IAC1B;EAAC;IAAA;IAAA,OAED,eAAa,QAAkB,EAAA;MAC3B,IAAM,KAAK,GAAG,EAAE;MAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;QAC3B,IAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;QAChC;QACA,IAAI,CAAC,KAAK,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;UAAE,OAAO,IAAI;QAAG;QACvD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;MACnB;MACD,OAAO,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;IACtC;EAAC;IAAA;IAAA,OAED,kBAAgB,IAAc,EAAE,IAAa,EAAA;MACzC,IAAI,CAAC,IAAI,EAAE;QAAE,IAAI,GAAG,IAAI,CAAC,MAAM;MAAG;MAElC;MACA,IAAI,cAAc,EAAE;QAChB,IAAI;UACA,IAAM,SAAS,GAAI,MAAc;UACjC,IAAI,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,SAAS,EAAE;YAClD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;cACnC,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC;YAC3D;UACJ;SACJ,CAAC,OAAO,KAAK,EAAE,CAAA;MACnB;IACL;EAAC;EAAA;AAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// This gets overridden by rollup\nconst exportWordlist = false;\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport const logger = new Logger(version);\nexport class Wordlist {\n    constructor(locale) {\n        logger.checkAbstract(new.target, Wordlist);\n        defineReadOnly(this, \"locale\", locale);\n    }\n    // Subclasses may override this\n    split(mnemonic) {\n        return mnemonic.toLowerCase().split(/ +/g);\n    }\n    // Subclasses may override this\n    join(words) {\n        return words.join(\" \");\n    }\n    static check(wordlist) {\n        const words = [];\n        for (let i = 0; i < 2048; i++) {\n            const word = wordlist.getWord(i);\n            /* istanbul ignore if */\n            if (i !== wordlist.getWordIndex(word)) {\n                return \"0x\";\n            }\n            words.push(word);\n        }\n        return id(words.join(\"\\n\") + \"\\n\");\n    }\n    static register(lang, name) {\n        if (!name) {\n            name = lang.locale;\n        }\n        /* istanbul ignore if */\n        if (exportWordlist) {\n            try {\n                const anyGlobal = window;\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n                    if (!anyGlobal._ethers.wordlists[name]) {\n                        defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n                    }\n                }\n            }\n            catch (error) { }\n        }\n    }\n}\n//# sourceMappingURL=wordlist.js.map"]},"metadata":{},"sourceType":"module"}