{"ast":null,"code":"import _regeneratorRuntime from\"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import{Card}from\"react-bootstrap\";import\"../css/createFlow.css\";import{jsx as _jsx}from\"react/jsx-runtime\";export var ConnectWallet=function ConnectWallet(){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),currentAccount=_useState2[0],setCurrentAccount=_useState2[1];var connectWallet=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var _window,ethereum,accounts;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_window=window,ethereum=_window.ethereum;if(ethereum){_context.next=5;break;}alert(\"Get MetaMask!\");return _context.abrupt(\"return\");case 5:_context.next=7;return ethereum.request({method:\"eth_requestAccounts\"});case 7:accounts=_context.sent;console.log(\"Connected\",accounts[0]);setCurrentAccount(accounts[0]);// let account = currentAccount;\n// Setup listener! This is for the case where a user comes to our site\n// and connected their wallet for the first time.\n// setupEventListener()\n_context.next=15;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 15:case\"end\":return _context.stop();}}},_callee,null,[[0,12]]);}));return function connectWallet(){return _ref.apply(this,arguments);};}();var checkIfWalletIsConnected=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var _window2,ethereum,accounts,chain,chainId,account;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_window2=window,ethereum=_window2.ethereum;if(ethereum){_context2.next=6;break;}console.log(\"Make sure you have metamask!\");return _context2.abrupt(\"return\");case 6:console.log(\"We have the ethereum object\",ethereum);case 7:_context2.next=9;return ethereum.request({method:\"eth_accounts\"});case 9:accounts=_context2.sent;_context2.next=12;return window.ethereum.request({method:\"eth_chainId\"});case 12:chain=_context2.sent;chainId=chain;console.log(\"chain ID:\",chain);console.log(\"global Chain Id:\",chainId);if(accounts.length!==0){account=accounts[0];console.log(\"Found an authorized account:\",account);setCurrentAccount(account);// Setup listener! This is for the case where a user comes to our site\n// and ALREADY had their wallet connected + authorized.\n// setupEventListener()\n}else{console.log(\"No authorized account found\");}case 17:case\"end\":return _context2.stop();}}},_callee2);}));return function checkIfWalletIsConnected(){return _ref2.apply(this,arguments);};}();useEffect(function(){checkIfWalletIsConnected();},[]);return/*#__PURE__*/_jsx(\"div\",{children:currentAccount===\"\"?/*#__PURE__*/_jsx(\"button\",{id:\"connectWallet\",className:\"button\",onClick:connectWallet,children:\"Connect Wallet\"}):/*#__PURE__*/_jsx(Card,{className:\"connectedWallet\",children:\"\".concat(currentAccount.substring(0,4),\"...\").concat(currentAccount.substring(38))})});};","map":{"version":3,"names":["React","useState","useEffect","Card","ConnectWallet","currentAccount","setCurrentAccount","connectWallet","window","ethereum","alert","request","method","accounts","console","log","checkIfWalletIsConnected","chain","chainId","length","account","substring"],"sources":["/Users/taykim/Desktop/cs98/project-22f-zk-vote/src/components/ConnectWallet.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport \"../css/createFlow.css\";\n\nexport const ConnectWallet = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      // let account = currentAccount;\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      // setupEventListener()\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n    const chain = await window.ethereum.request({ method: \"eth_chainId\" });\n    let chainId = chain;\n    console.log(\"chain ID:\", chain);\n    console.log(\"global Chain Id:\", chainId);\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      // setupEventListener()\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  return(\n  <div>\n      {currentAccount === \"\" ? (\n        <button id=\"connectWallet\" className=\"button\" onClick={connectWallet}>\n          Connect Wallet\n        </button>\n      ) : (\n        <Card className=\"connectedWallet\">\n          {`${currentAccount.substring(0, 4)}...${currentAccount.substring(38)}`}\n        </Card>\n      )}\n  </div>\n  );\n};"],"mappings":"wgBAAA,MAAOA,MAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,IAAI,KAAQ,iBAAiB,CACtC,MAAO,uBAAuB,CAAC,2CAE/B,MAAO,IAAMC,cAAa,CAAG,QAAhBA,cAAa,EAAS,CACjC,cAA4CH,QAAQ,CAAC,EAAE,CAAC,wCAAjDI,cAAc,eAAEC,iBAAiB,eACxC,GAAMC,cAAa,4FAAG,2LAEGC,MAAM,CAAnBC,QAAQ,SAARA,QAAQ,IAEXA,QAAQ,yBACXC,KAAK,CAAC,eAAe,CAAC,CAAC,8DAGFD,SAAQ,CAACE,OAAO,CAAC,CACtCC,MAAM,CAAE,qBACV,CAAC,CAAC,QAFIC,QAAQ,eAGdC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAEF,QAAQ,CAAC,CAAC,CAAC,CAAC,CACrCP,iBAAiB,CAACO,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC9B;AACA;AACA;AACA;AAAA,iFAEAC,OAAO,CAACC,GAAG,aAAO,CAAC,qEAEtB,kBApBKR,cAAa,0CAoBlB,CAED,GAAMS,yBAAwB,6FAAG,wMACVR,MAAM,CAAnBC,QAAQ,UAARA,QAAQ,IAEXA,QAAQ,0BACXK,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAAC,yCAG5CD,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAEN,QAAQ,CAAC,CAAC,8BAGhCA,SAAQ,CAACE,OAAO,CAAC,CAAEC,MAAM,CAAE,cAAe,CAAC,CAAC,QAA7DC,QAAQ,wCACML,OAAM,CAACC,QAAQ,CAACE,OAAO,CAAC,CAAEC,MAAM,CAAE,aAAc,CAAC,CAAC,SAAhEK,KAAK,gBACPC,OAAO,CAAGD,KAAK,CACnBH,OAAO,CAACC,GAAG,CAAC,WAAW,CAAEE,KAAK,CAAC,CAC/BH,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAEG,OAAO,CAAC,CACxC,GAAIL,QAAQ,CAACM,MAAM,GAAK,CAAC,CAAE,CACnBC,OAAO,CAAGP,QAAQ,CAAC,CAAC,CAAC,CAC3BC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAEK,OAAO,CAAC,CACpDd,iBAAiB,CAACc,OAAO,CAAC,CAC1B;AACA;AACA;AACF,CAAC,IAAM,CACLN,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAC5C,CAAC,yDACF,kBAzBKC,yBAAwB,2CAyB7B,CAEDd,SAAS,CAAC,UAAM,CACdc,wBAAwB,EAAE,CAC5B,CAAC,CAAE,EAAE,CAAC,CAEN,mBACA,qBACKX,cAAc,GAAK,EAAE,cACpB,eAAQ,EAAE,CAAC,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAEE,aAAc,4BAE5D,cAET,KAAC,IAAI,EAAC,SAAS,CAAC,iBAAiB,oBAC3BF,cAAc,CAACgB,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC,eAAMhB,cAAc,CAACgB,SAAS,CAAC,EAAE,CAAC,GAEvE,EACC,CAER,CAAC"},"metadata":{},"sourceType":"module"}