{"ast":null,"code":"import _regeneratorRuntime from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { ethers } from \"ethers\";\nimport SuperfluidGovernanceIIABI from \"./abi/SuperfluidGovernanceII.json\";\nvar Governance = /*#__PURE__*/_createClass(function Governance(govAddress, hostAddress) {\n  var _this = this;\n  _classCallCheck(this, Governance);\n  /**\n   * Returns the 3Ps config for the specified token (or default) - the liquidation period and patrician period\n   * @see https://docs.superfluid.finance/superfluid/sentinels/liquidations-and-toga\n   * @param providerOrSigner a provider or signer for executing a web3 call\n   * @param token specified governance parameter token\n   * @returns {Object} liquidationPeriod and patricianPeriod as strings\n   */\n  this.getPPPConfig = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n      var providerOrSigner, _ref$token, token, _yield$_this$contract, liquidationPeriod, patricianPeriod;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              providerOrSigner = _ref.providerOrSigner, _ref$token = _ref.token, token = _ref$token === void 0 ? ethers.constants.AddressZero : _ref$token;\n              _context.next = 3;\n              return _this.contract.connect(providerOrSigner).getPPPConfig(_this.hostAddress, token);\n            case 3:\n              _yield$_this$contract = _context.sent;\n              liquidationPeriod = _yield$_this$contract.liquidationPeriod;\n              patricianPeriod = _yield$_this$contract.patricianPeriod;\n              return _context.abrupt(\"return\", {\n                liquidationPeriod: liquidationPeriod.toString(),\n                patricianPeriod: patricianPeriod.toString()\n              });\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Returns the reward address for the specified token (or default)\n   * @param providerOrSigner a provider or signer for executing a web3 call\n   * @param token specified governance parameter token\n   * @returns {string} the reward address\n   */\n  this.getRewardAddress = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref3) {\n      var providerOrSigner, _ref3$token, token;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              providerOrSigner = _ref3.providerOrSigner, _ref3$token = _ref3.token, token = _ref3$token === void 0 ? ethers.constants.AddressZero : _ref3$token;\n              _context2.next = 3;\n              return _this.contract.connect(providerOrSigner).getRewardAddress(_this.hostAddress, token);\n            case 3:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return function (_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  /**\n   * Returns the minimum deposit for the specified token (or default)\n   * @param providerOrSigner a provider or signer for executing a web3 call\n   * @param token specified governance parameter token\n   * @returns {string} minimum deposit\n   */\n  this.getMinimumDeposit = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref5) {\n      var providerOrSigner, _ref5$token, token, superTokenMinimumDeposit;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              providerOrSigner = _ref5.providerOrSigner, _ref5$token = _ref5.token, token = _ref5$token === void 0 ? ethers.constants.AddressZero : _ref5$token;\n              _context3.next = 3;\n              return _this.contract.connect(providerOrSigner).getSuperTokenMinimumDeposit(_this.hostAddress, token);\n            case 3:\n              superTokenMinimumDeposit = _context3.sent;\n              return _context3.abrupt(\"return\", superTokenMinimumDeposit.toString());\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return function (_x3) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  /**\n   * Returns the relevant governance parameters\n   * @param providerOrSigner a provider or signer for executing a web3 call\n   * @param token specified governance parameter token\n   * @returns {Object} liquidationPeriod, patricianPeriod, rewardAddress and minimumDeposit\n   */\n  this.getGovernanceParameters = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(_ref7) {\n      var providerOrSigner, _ref7$token, token, pppPromise, rewardPromose, minimumDepositPromise, data;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              providerOrSigner = _ref7.providerOrSigner, _ref7$token = _ref7.token, token = _ref7$token === void 0 ? ethers.constants.AddressZero : _ref7$token;\n              pppPromise = _this.getPPPConfig({\n                providerOrSigner: providerOrSigner,\n                token: token\n              });\n              rewardPromose = _this.getRewardAddress({\n                providerOrSigner: providerOrSigner,\n                token: token\n              });\n              minimumDepositPromise = _this.getMinimumDeposit({\n                providerOrSigner: providerOrSigner,\n                token: token\n              });\n              _context4.next = 6;\n              return Promise.all([pppPromise, rewardPromose, minimumDepositPromise]);\n            case 6:\n              data = _context4.sent;\n              return _context4.abrupt(\"return\", {\n                liquidationPeriod: data[0].liquidationPeriod,\n                patricianPeriod: data[0].patricianPeriod,\n                rewardAddress: data[1],\n                minimumDeposit: data[2]\n              });\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return function (_x4) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  this.contract = new ethers.Contract(govAddress, SuperfluidGovernanceIIABI.abi);\n  this.hostAddress = hostAddress;\n});\nexport { Governance as default };","map":{"version":3,"sources":["../../src/Governance.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { ethers } from \"ethers\";\nimport SuperfluidGovernanceIIABI from \"./abi/SuperfluidGovernanceII.json\";\nexport default class Governance {\n    constructor(govAddress, hostAddress) {\n        /**\n         * Returns the 3Ps config for the specified token (or default) - the liquidation period and patrician period\n         * @see https://docs.superfluid.finance/superfluid/sentinels/liquidations-and-toga\n         * @param providerOrSigner a provider or signer for executing a web3 call\n         * @param token specified governance parameter token\n         * @returns {Object} liquidationPeriod and patricianPeriod as strings\n         */\n        this.getPPPConfig = async ({ providerOrSigner, token = ethers.constants.AddressZero, }) => {\n            const { liquidationPeriod, patricianPeriod } = await this.contract\n                .connect(providerOrSigner)\n                .getPPPConfig(this.hostAddress, token);\n            return {\n                liquidationPeriod: liquidationPeriod.toString(),\n                patricianPeriod: patricianPeriod.toString(),\n            };\n        };\n        /**\n         * Returns the reward address for the specified token (or default)\n         * @param providerOrSigner a provider or signer for executing a web3 call\n         * @param token specified governance parameter token\n         * @returns {string} the reward address\n         */\n        this.getRewardAddress = async ({ providerOrSigner, token = ethers.constants.AddressZero, }) => {\n            return await this.contract\n                .connect(providerOrSigner)\n                .getRewardAddress(this.hostAddress, token);\n        };\n        /**\n         * Returns the minimum deposit for the specified token (or default)\n         * @param providerOrSigner a provider or signer for executing a web3 call\n         * @param token specified governance parameter token\n         * @returns {string} minimum deposit\n         */\n        this.getMinimumDeposit = async ({ providerOrSigner, token = ethers.constants.AddressZero, }) => {\n            const superTokenMinimumDeposit = await this.contract\n                .connect(providerOrSigner)\n                .getSuperTokenMinimumDeposit(this.hostAddress, token);\n            return superTokenMinimumDeposit.toString();\n        };\n        /**\n         * Returns the relevant governance parameters\n         * @param providerOrSigner a provider or signer for executing a web3 call\n         * @param token specified governance parameter token\n         * @returns {Object} liquidationPeriod, patricianPeriod, rewardAddress and minimumDeposit\n         */\n        this.getGovernanceParameters = async ({ providerOrSigner, token = ethers.constants.AddressZero, }) => {\n            const pppPromise = this.getPPPConfig({ providerOrSigner, token });\n            const rewardPromose = this.getRewardAddress({\n                providerOrSigner,\n                token,\n            });\n            const minimumDepositPromise = this.getMinimumDeposit({\n                providerOrSigner,\n                token,\n            });\n            const data = await Promise.all([\n                pppPromise,\n                rewardPromose,\n                minimumDepositPromise,\n            ]);\n            return {\n                liquidationPeriod: data[0].liquidationPeriod,\n                patricianPeriod: data[0].patricianPeriod,\n                rewardAddress: data[1],\n                minimumDeposit: data[2],\n            };\n        };\n        this.contract = new ethers.Contract(govAddress, SuperfluidGovernanceIIABI.abi);\n        this.hostAddress = hostAddress;\n    }\n}\n//# sourceMappingURL=Governance.js.map"]},"metadata":{},"sourceType":"module"}