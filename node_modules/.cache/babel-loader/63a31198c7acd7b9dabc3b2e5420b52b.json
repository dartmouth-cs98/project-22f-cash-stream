{"ast":null,"code":"/**\n * Factory function to create a {@link PagedResult}.\n * @param dataPlusOne Subgraph queries are executed with one extra result to get which is over the {@link Paging} `take` amount.\n * @param paging\n */\nexport var createPagedResult = function createPagedResult(dataPlusOne, paging) {\n  var _a;\n  var hasNextPage = dataPlusOne.length > paging.take;\n  var data = dataPlusOne.slice(0, paging.take);\n  var lastId = (_a = data.slice(-1)[0]) === null || _a === void 0 ? void 0 : _a.id;\n  return {\n    paging: {\n      skip: paging.skip,\n      take: paging.take\n    },\n    nextPaging: hasNextPage ? isSkipPaging(paging) ? nextSkipPaging(paging) : isLastIdPaging(paging) ? nextLastIdPaging(paging, lastId) : isPageNumberPaging(paging) ? nextPageNumberPaging(paging) : undefined : undefined,\n    data: data,\n    items: data\n  };\n};\nexport function isSkipPaging(paging) {\n  return (paging === null || paging === void 0 ? void 0 : paging.skip) !== undefined;\n}\nexport function isPageNumberPaging(paging) {\n  return (paging === null || paging === void 0 ? void 0 : paging.pageNumber) !== undefined;\n}\nexport function isLastIdPaging(paging) {\n  return (paging === null || paging === void 0 ? void 0 : paging.lastId) !== undefined;\n}\nexport function isAllPaging(paging) {\n  return paging !== undefined && paging.skip === undefined && paging.lastId === undefined && paging.take === Infinity;\n}\nexport var createSkipPaging = function createSkipPaging() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$skip = _ref.skip,\n    skip = _ref$skip === void 0 ? 0 : _ref$skip,\n    _ref$take = _ref.take,\n    take = _ref$take === void 0 ? 100 : _ref$take;\n  return {\n    skip: skip,\n    take: take\n  };\n};\nexport var createPageNumberPaging = function createPageNumberPaging() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref2$pageNumber = _ref2.pageNumber,\n    pageNumber = _ref2$pageNumber === void 0 ? 1 : _ref2$pageNumber,\n    _ref2$take = _ref2.take,\n    take = _ref2$take === void 0 ? 100 : _ref2$take;\n  return {\n    take: take,\n    pageNumber: pageNumber\n  };\n};\nexport var createLastIdPaging = function createLastIdPaging() {\n  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref3$lastId = _ref3.lastId,\n    lastId = _ref3$lastId === void 0 ? \"\" : _ref3$lastId,\n    _ref3$take = _ref3.take,\n    take = _ref3$take === void 0 ? 100 : _ref3$take;\n  return {\n    take: take,\n    lastId: lastId\n  };\n};\n/**\n * Gets the next page given the skip/take used to initialize the `PagedResult` interface.\n * @returns the `Paging` class with the next page\n */\nexport var nextSkipPaging = function nextSkipPaging(paging) {\n  return {\n    skip: paging.skip + paging.take,\n    take: paging.take\n  };\n};\nexport var nextPageNumberPaging = function nextPageNumberPaging(paging) {\n  return {\n    pageNumber: paging.pageNumber + 1,\n    take: paging.take\n  };\n};\nexport var nextLastIdPaging = function nextLastIdPaging(paging, nextLastId) {\n  return {\n    take: paging.take,\n    lastId: nextLastId\n  };\n};\n/**\n * Used to determine whether there is another page for pagination.\n * @returns the user's specified `take` plus one\n */\nexport var takePlusOne = function takePlusOne(paging) {\n  return paging.take + 1;\n};","map":{"version":3,"sources":["../../src/pagination.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * Factory function to create a {@link PagedResult}.\n * @param dataPlusOne Subgraph queries are executed with one extra result to get which is over the {@link Paging} `take` amount.\n * @param paging\n */\nexport const createPagedResult = (dataPlusOne, paging) => {\n    var _a;\n    const hasNextPage = dataPlusOne.length > paging.take;\n    const data = dataPlusOne.slice(0, paging.take);\n    const lastId = (_a = data.slice(-1)[0]) === null || _a === void 0 ? void 0 : _a.id;\n    return {\n        paging: { skip: paging.skip, take: paging.take },\n        nextPaging: hasNextPage\n            ? isSkipPaging(paging)\n                ? nextSkipPaging(paging)\n                : isLastIdPaging(paging)\n                    ? nextLastIdPaging(paging, lastId)\n                    : isPageNumberPaging(paging)\n                        ? nextPageNumberPaging(paging)\n                        : undefined\n            : undefined,\n        data: data,\n        items: data,\n    };\n};\nexport function isSkipPaging(paging) {\n    return (paging === null || paging === void 0 ? void 0 : paging.skip) !== undefined;\n}\nexport function isPageNumberPaging(paging) {\n    return (paging === null || paging === void 0 ? void 0 : paging.pageNumber) !== undefined;\n}\nexport function isLastIdPaging(paging) {\n    return (paging === null || paging === void 0 ? void 0 : paging.lastId) !== undefined;\n}\nexport function isAllPaging(paging) {\n    return (paging !== undefined &&\n        paging.skip === undefined &&\n        paging.lastId === undefined &&\n        paging.take === Infinity);\n}\nexport const createSkipPaging = ({ skip = 0, take = 100, } = {}) => ({\n    skip: skip,\n    take: take,\n});\nexport const createPageNumberPaging = ({ pageNumber = 1, take = 100, } = {}) => ({\n    take: take,\n    pageNumber: pageNumber,\n});\nexport const createLastIdPaging = ({ lastId = \"\", take = 100, } = {}) => ({\n    take: take,\n    lastId: lastId,\n});\n/**\n * Gets the next page given the skip/take used to initialize the `PagedResult` interface.\n * @returns the `Paging` class with the next page\n */\nexport const nextSkipPaging = (paging) => ({\n    skip: paging.skip + paging.take,\n    take: paging.take,\n});\nexport const nextPageNumberPaging = (paging) => ({\n    pageNumber: paging.pageNumber + 1,\n    take: paging.take,\n});\nexport const nextLastIdPaging = (paging, nextLastId) => ({\n    take: paging.take,\n    lastId: nextLastId,\n});\n/**\n * Used to determine whether there is another page for pagination.\n * @returns the user's specified `take` plus one\n */\nexport const takePlusOne = (paging) => {\n    return paging.take + 1;\n};\n//# sourceMappingURL=pagination.js.map"]},"metadata":{},"sourceType":"module"}