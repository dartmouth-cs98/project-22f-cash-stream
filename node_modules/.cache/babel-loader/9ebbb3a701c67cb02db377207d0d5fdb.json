{"ast":null,"code":"import _createClass from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { ethers } from \"ethers\";\nimport Operation from \"./Operation\";\nimport SuperfluidABI from \"./abi/Superfluid.json\";\n/**\n * Host Helper Class\n * @description A helper class which can be used as a standalone class to populate call agreement transactions.\n */\nvar Host = /*#__PURE__*/_createClass(function Host(hostAddress) {\n  var _this = this;\n  _classCallCheck(this, Host);\n  /**\n   * Creates an Operation of the `callAgreement` function on the host contract.\n   * @param agreementAddress the agreement address (cfa or ida address)\n   * @param callData the encoded callData for the function\n   * @param userData any additional user data\n   * @param overrides ethers overrides object for more control over the transaction sent.\n   * @returns {Operation} an `Operation` class\n   */\n  this.populateCallAgreementTxnAndReturnOperation = function (agreementAddress, callData, userData, overrides) {\n    var txn = _this.contract.populateTransaction.callAgreement(agreementAddress, callData, userData || \"0x\", overrides || {});\n    return new Operation(txn, \"SUPERFLUID_CALL_AGREEMENT\");\n  };\n  this.contract = new ethers.Contract(hostAddress, SuperfluidABI.abi);\n});\nexport { Host as default };","map":{"version":3,"sources":["../../src/Host.ts"],"names":[],"mappings":";;AAAA,SAAS,MAAM,QAAmB,QAAQ;AAE1C,OAAO,SAAS,MAAM,aAAa;AACnC,OAAO,aAAa,MAAM,uBAAuB;AAGjD;;;AAGG;AAHH,IAIqB,IAAI,6BAGrB,cAAY,WAAmB,EAAA;EAAA;EAAA;EAO/B;;;;;;;AAOG;EACH,IAAA,CAAA,0CAA0C,GAAG,UACzC,gBAAwB,EACxB,QAAgB,EAChB,QAA4B,EAC5B,SAA2D,EAChD;IACX,IAAM,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,aAAa,CACvD,gBAAgB,EAChB,QAAQ,EACR,QAAQ,IAAI,IAAI,EAChB,SAAS,IAAI,CAAA,CAAE,CAClB;IACD,OAAO,IAAI,SAAS,CAAC,GAAG,EAAE,2BAA2B,CAAC;EAC1D,CAAC;EA3BG,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAC/B,WAAW,EACX,aAAa,CAAC,GAAG,CACN;AACnB,CAAC;AAAA,SARgB,IAAI","sourceRoot":"","sourcesContent":["import { ethers } from \"ethers\";\nimport Operation from \"./Operation\";\nimport SuperfluidABI from \"./abi/Superfluid.json\";\n/**\n * Host Helper Class\n * @description A helper class which can be used as a standalone class to populate call agreement transactions.\n */\nexport default class Host {\n    constructor(hostAddress) {\n        /**\n         * Creates an Operation of the `callAgreement` function on the host contract.\n         * @param agreementAddress the agreement address (cfa or ida address)\n         * @param callData the encoded callData for the function\n         * @param userData any additional user data\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} an `Operation` class\n         */\n        this.populateCallAgreementTxnAndReturnOperation = (agreementAddress, callData, userData, overrides) => {\n            const txn = this.contract.populateTransaction.callAgreement(agreementAddress, callData, userData || \"0x\", overrides || {});\n            return new Operation(txn, \"SUPERFLUID_CALL_AGREEMENT\");\n        };\n        this.contract = new ethers.Contract(hostAddress, SuperfluidABI.abi);\n    }\n}\n//# sourceMappingURL=Host.js.map"]},"metadata":{},"sourceType":"module"}