{"ast":null,"code":"/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array, depth) {\n  if (depth == null) {\n    depth = 1;\n  }\n  var result = [];\n  var forEach = result.forEach;\n  var flatDeep = function flatDeep(arr, depth) {\n    forEach.call(arr, function (val) {\n      if (depth > 0 && Array.isArray(val)) {\n        flatDeep(val, depth - 1);\n      } else {\n        result.push(val);\n      }\n    });\n  };\n  flatDeep(array, depth);\n  return result;\n}\nfunction fromEntries(array) {\n  var result = {};\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i];\n    result[value[0]] = value[1];\n  }\n  return result;\n}\nexport function decode_arithmetic(bytes) {\n  var pos = 0;\n  function u16() {\n    return bytes[pos++] << 8 | bytes[pos++];\n  }\n  // decode the frequency table\n  var symbol_count = u16();\n  var total = 1;\n  var acc = [0, 1]; // first symbol has frequency 1\n  for (var i = 1; i < symbol_count; i++) {\n    acc.push(total += u16());\n  }\n  // skip the sized-payload that the last 3 symbols index into\n  var skip = u16();\n  var pos_payload = pos;\n  pos += skip;\n  var read_width = 0;\n  var read_buffer = 0;\n  function read_bit() {\n    if (read_width == 0) {\n      // this will read beyond end of buffer\n      // but (undefined|0) => zero pad\n      read_buffer = read_buffer << 8 | bytes[pos++];\n      read_width = 8;\n    }\n    return read_buffer >> --read_width & 1;\n  }\n  var N = 31;\n  var FULL = Math.pow(2, N);\n  var HALF = FULL >>> 1;\n  var QRTR = HALF >> 1;\n  var MASK = FULL - 1;\n  // fill register\n  var register = 0;\n  for (var _i = 0; _i < N; _i++) {\n    register = register << 1 | read_bit();\n  }\n  var symbols = [];\n  var low = 0;\n  var range = FULL; // treat like a float\n  while (true) {\n    var value = Math.floor(((register - low + 1) * total - 1) / range);\n    var start = 0;\n    var end = symbol_count;\n    while (end - start > 1) {\n      // binary search\n      var mid = start + end >>> 1;\n      if (value < acc[mid]) {\n        end = mid;\n      } else {\n        start = mid;\n      }\n    }\n    if (start == 0) break; // first symbol is end mark\n    symbols.push(start);\n    var a = low + Math.floor(range * acc[start] / total);\n    var b = low + Math.floor(range * acc[start + 1] / total) - 1;\n    while (((a ^ b) & HALF) == 0) {\n      register = register << 1 & MASK | read_bit();\n      a = a << 1 & MASK;\n      b = b << 1 & MASK | 1;\n    }\n    while (a & ~b & QRTR) {\n      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();\n      a = a << 1 ^ HALF;\n      b = (b ^ HALF) << 1 | HALF | 1;\n    }\n    low = a;\n    range = 1 + b - a;\n  }\n  var offset = symbol_count - 4;\n  return symbols.map(function (x) {\n    switch (x - offset) {\n      case 3:\n        return offset + 0x10100 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n      case 2:\n        return offset + 0x100 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n      case 1:\n        return offset + bytes[pos_payload++];\n      default:\n        return x - 1;\n    }\n  });\n}\n// returns an iterator which returns the next symbol\nexport function read_payload(v) {\n  var pos = 0;\n  return function () {\n    return v[pos++];\n  };\n}\nexport function read_compressed_payload(bytes) {\n  return read_payload(decode_arithmetic(bytes));\n}\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nexport function signed(i) {\n  return i & 1 ? ~i >> 1 : i >> 1;\n}\nfunction read_counts(n, next) {\n  var v = Array(n);\n  for (var i = 0; i < n; i++) {\n    v[i] = 1 + next();\n  }\n  return v;\n}\nfunction read_ascending(n, next) {\n  var v = Array(n);\n  for (var i = 0, x = -1; i < n; i++) {\n    v[i] = x += 1 + next();\n  }\n  return v;\n}\nfunction read_deltas(n, next) {\n  var v = Array(n);\n  for (var i = 0, x = 0; i < n; i++) {\n    v[i] = x += signed(next());\n  }\n  return v;\n}\nexport function read_member_array(next, lookup) {\n  var v = read_ascending(next(), next);\n  var n = next();\n  var vX = read_ascending(n, next);\n  var vN = read_counts(n, next);\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < vN[i]; j++) {\n      v.push(vX[i] + j);\n    }\n  }\n  return lookup ? v.map(function (x) {\n    return lookup[x];\n  }) : v;\n}\n// returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\nexport function read_mapped_map(next) {\n  var ret = [];\n  while (true) {\n    var w = next();\n    if (w == 0) break;\n    ret.push(read_linear_table(w, next));\n  }\n  while (true) {\n    var _w = next() - 1;\n    if (_w < 0) break;\n    ret.push(read_replacement_table(_w, next));\n  }\n  return fromEntries(flat(ret));\n}\nexport function read_zero_terminated_array(next) {\n  var v = [];\n  while (true) {\n    var i = next();\n    if (i == 0) break;\n    v.push(i);\n  }\n  return v;\n}\nfunction read_transposed(n, w, next) {\n  var m = Array(n).fill(undefined).map(function () {\n    return [];\n  });\n  for (var i = 0; i < w; i++) {\n    read_deltas(n, next).forEach(function (x, j) {\n      return m[j].push(x);\n    });\n  }\n  return m;\n}\nfunction read_linear_table(w, next) {\n  var dx = 1 + next();\n  var dy = next();\n  var vN = read_zero_terminated_array(next);\n  var m = read_transposed(vN.length, 1 + w, next);\n  return flat(m.map(function (v, i) {\n    var x = v[0],\n      ys = v.slice(1);\n    //let [x, ...ys] = v;\n    //return Array(vN[i]).fill().map((_, j) => {\n    return Array(vN[i]).fill(undefined).map(function (_, j) {\n      var j_dy = j * dy;\n      return [x + j * dx, ys.map(function (y) {\n        return y + j_dy;\n      })];\n    });\n  }));\n}\nfunction read_replacement_table(w, next) {\n  var n = 1 + next();\n  var m = read_transposed(n, 1 + w, next);\n  return m.map(function (v) {\n    return [v[0], v.slice(1)];\n  });\n}\nexport function read_emoji_trie(next) {\n  var sorted = read_member_array(next).sort(function (a, b) {\n    return a - b;\n  });\n  return read();\n  function read() {\n    var branches = [];\n    while (true) {\n      var keys = read_member_array(next, sorted);\n      if (keys.length == 0) break;\n      branches.push({\n        set: new Set(keys),\n        node: read()\n      });\n    }\n    branches.sort(function (a, b) {\n      return b.set.size - a.set.size;\n    }); // sort by likelihood\n    var temp = next();\n    var valid = temp % 3;\n    temp = temp / 3 | 0;\n    var fe0f = !!(temp & 1);\n    temp >>= 1;\n    var save = temp == 1;\n    var check = temp == 2;\n    return {\n      branches: branches,\n      valid: valid,\n      fe0f: fe0f,\n      save: save,\n      check: check\n    };\n  }\n}","map":{"version":3,"sources":["../../src.ts/ens-normalize/decoder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array, depth) {\n    if (depth == null) {\n        depth = 1;\n    }\n    const result = [];\n    const forEach = result.forEach;\n    const flatDeep = function (arr, depth) {\n        forEach.call(arr, function (val) {\n            if (depth > 0 && Array.isArray(val)) {\n                flatDeep(val, depth - 1);\n            }\n            else {\n                result.push(val);\n            }\n        });\n    };\n    flatDeep(array, depth);\n    return result;\n}\nfunction fromEntries(array) {\n    const result = {};\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        result[value[0]] = value[1];\n    }\n    return result;\n}\nexport function decode_arithmetic(bytes) {\n    let pos = 0;\n    function u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\n    // decode the frequency table\n    let symbol_count = u16();\n    let total = 1;\n    let acc = [0, 1]; // first symbol has frequency 1\n    for (let i = 1; i < symbol_count; i++) {\n        acc.push(total += u16());\n    }\n    // skip the sized-payload that the last 3 symbols index into\n    let skip = u16();\n    let pos_payload = pos;\n    pos += skip;\n    let read_width = 0;\n    let read_buffer = 0;\n    function read_bit() {\n        if (read_width == 0) {\n            // this will read beyond end of buffer\n            // but (undefined|0) => zero pad\n            read_buffer = (read_buffer << 8) | bytes[pos++];\n            read_width = 8;\n        }\n        return (read_buffer >> --read_width) & 1;\n    }\n    const N = 31;\n    const FULL = Math.pow(2, N);\n    const HALF = FULL >>> 1;\n    const QRTR = HALF >> 1;\n    const MASK = FULL - 1;\n    // fill register\n    let register = 0;\n    for (let i = 0; i < N; i++)\n        register = (register << 1) | read_bit();\n    let symbols = [];\n    let low = 0;\n    let range = FULL; // treat like a float\n    while (true) {\n        let value = Math.floor((((register - low + 1) * total) - 1) / range);\n        let start = 0;\n        let end = symbol_count;\n        while (end - start > 1) { // binary search\n            let mid = (start + end) >>> 1;\n            if (value < acc[mid]) {\n                end = mid;\n            }\n            else {\n                start = mid;\n            }\n        }\n        if (start == 0)\n            break; // first symbol is end mark\n        symbols.push(start);\n        let a = low + Math.floor(range * acc[start] / total);\n        let b = low + Math.floor(range * acc[start + 1] / total) - 1;\n        while (((a ^ b) & HALF) == 0) {\n            register = (register << 1) & MASK | read_bit();\n            a = (a << 1) & MASK;\n            b = (b << 1) & MASK | 1;\n        }\n        while (a & ~b & QRTR) {\n            register = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\n            a = (a << 1) ^ HALF;\n            b = ((b ^ HALF) << 1) | HALF | 1;\n        }\n        low = a;\n        range = 1 + b - a;\n    }\n    let offset = symbol_count - 4;\n    return symbols.map(x => {\n        switch (x - offset) {\n            case 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n            case 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n            case 1: return offset + bytes[pos_payload++];\n            default: return x - 1;\n        }\n    });\n}\n// returns an iterator which returns the next symbol\nexport function read_payload(v) {\n    let pos = 0;\n    return () => v[pos++];\n}\nexport function read_compressed_payload(bytes) {\n    return read_payload(decode_arithmetic(bytes));\n}\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nexport function signed(i) {\n    return (i & 1) ? (~i >> 1) : (i >> 1);\n}\nfunction read_counts(n, next) {\n    let v = Array(n);\n    for (let i = 0; i < n; i++)\n        v[i] = 1 + next();\n    return v;\n}\nfunction read_ascending(n, next) {\n    let v = Array(n);\n    for (let i = 0, x = -1; i < n; i++)\n        v[i] = x += 1 + next();\n    return v;\n}\nfunction read_deltas(n, next) {\n    let v = Array(n);\n    for (let i = 0, x = 0; i < n; i++)\n        v[i] = x += signed(next());\n    return v;\n}\nexport function read_member_array(next, lookup) {\n    let v = read_ascending(next(), next);\n    let n = next();\n    let vX = read_ascending(n, next);\n    let vN = read_counts(n, next);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < vN[i]; j++) {\n            v.push(vX[i] + j);\n        }\n    }\n    return lookup ? v.map(x => lookup[x]) : v;\n}\n// returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\nexport function read_mapped_map(next) {\n    let ret = [];\n    while (true) {\n        let w = next();\n        if (w == 0)\n            break;\n        ret.push(read_linear_table(w, next));\n    }\n    while (true) {\n        let w = next() - 1;\n        if (w < 0)\n            break;\n        ret.push(read_replacement_table(w, next));\n    }\n    return fromEntries(flat(ret));\n}\nexport function read_zero_terminated_array(next) {\n    let v = [];\n    while (true) {\n        let i = next();\n        if (i == 0)\n            break;\n        v.push(i);\n    }\n    return v;\n}\nfunction read_transposed(n, w, next) {\n    let m = Array(n).fill(undefined).map(() => []);\n    for (let i = 0; i < w; i++) {\n        read_deltas(n, next).forEach((x, j) => m[j].push(x));\n    }\n    return m;\n}\nfunction read_linear_table(w, next) {\n    let dx = 1 + next();\n    let dy = next();\n    let vN = read_zero_terminated_array(next);\n    let m = read_transposed(vN.length, 1 + w, next);\n    return flat(m.map((v, i) => {\n        const x = v[0], ys = v.slice(1);\n        //let [x, ...ys] = v;\n        //return Array(vN[i]).fill().map((_, j) => {\n        return Array(vN[i]).fill(undefined).map((_, j) => {\n            let j_dy = j * dy;\n            return [x + j * dx, ys.map(y => y + j_dy)];\n        });\n    }));\n}\nfunction read_replacement_table(w, next) {\n    let n = 1 + next();\n    let m = read_transposed(n, 1 + w, next);\n    return m.map(v => [v[0], v.slice(1)]);\n}\nexport function read_emoji_trie(next) {\n    let sorted = read_member_array(next).sort((a, b) => a - b);\n    return read();\n    function read() {\n        let branches = [];\n        while (true) {\n            let keys = read_member_array(next, sorted);\n            if (keys.length == 0)\n                break;\n            branches.push({ set: new Set(keys), node: read() });\n        }\n        branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood\n        let temp = next();\n        let valid = temp % 3;\n        temp = (temp / 3) | 0;\n        let fe0f = !!(temp & 1);\n        temp >>= 1;\n        let save = temp == 1;\n        let check = temp == 2;\n        return { branches, valid, fe0f, save, check };\n    }\n}\n//# sourceMappingURL=decoder.js.map"]},"metadata":{},"sourceType":"module"}