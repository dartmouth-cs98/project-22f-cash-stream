{"ast":null,"code":"/** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.URI = global.URI || {});\n})(this, function (exports) {\n  'use strict';\n\n  function merge() {\n    for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {\n      sets[_key] = arguments[_key];\n    }\n    if (sets.length > 1) {\n      sets[0] = sets[0].slice(0, -1);\n      var xl = sets.length - 1;\n      for (var x = 1; x < xl; ++x) {\n        sets[x] = sets[x].slice(1, -1);\n      }\n      sets[xl] = sets[xl].slice(1);\n      return sets.join('');\n    } else {\n      return sets[0];\n    }\n  }\n  function subexp(str) {\n    return \"(?:\" + str + \")\";\n  }\n  function typeOf(o) {\n    return o === undefined ? \"undefined\" : o === null ? \"null\" : Object.prototype.toString.call(o).split(\" \").pop().split(\"]\").shift().toLowerCase();\n  }\n  function toUpperCase(str) {\n    return str.toUpperCase();\n  }\n  function toArray(obj) {\n    return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== \"number\" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];\n  }\n  function assign(target, source) {\n    var obj = target;\n    if (source) {\n      for (var key in source) {\n        obj[key] = source[key];\n      }\n    }\n    return obj;\n  }\n  function buildExps(isIRI) {\n    var ALPHA$$ = \"[A-Za-z]\",\n      CR$ = \"[\\\\x0D]\",\n      DIGIT$$ = \"[0-9]\",\n      DQUOTE$$ = \"[\\\\x22]\",\n      HEXDIG$$ = merge(DIGIT$$, \"[A-Fa-f]\"),\n      //case-insensitive\n      LF$$ = \"[\\\\x0A]\",\n      SP$$ = \"[\\\\x20]\",\n      PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)),\n      //expanded\n      GEN_DELIMS$$ = \"[\\\\:\\\\/\\\\?\\\\#\\\\[\\\\]\\\\@]\",\n      SUB_DELIMS$$ = \"[\\\\!\\\\$\\\\&\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\=]\",\n      RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),\n      UCSCHAR$$ = isIRI ? \"[\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]\" : \"[]\",\n      //subset, excludes bidi control characters\n      IPRIVATE$$ = isIRI ? \"[\\\\uE000-\\\\uF8FF]\" : \"[]\",\n      //subset\n      UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, \"[\\\\-\\\\.\\\\_\\\\~]\", UCSCHAR$$),\n      SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\") + \"*\"),\n      USERINFO$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\")) + \"*\"),\n      DEC_OCTET$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"[1-9]\" + DIGIT$$) + \"|\" + DIGIT$$),\n      DEC_OCTET_RELAXED$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"0?[1-9]\" + DIGIT$$) + \"|0?0?\" + DIGIT$$),\n      //relaxed parsing rules\n      IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$),\n      H16$ = subexp(HEXDIG$$ + \"{1,4}\"),\n      LS32$ = subexp(subexp(H16$ + \"\\\\:\" + H16$) + \"|\" + IPV4ADDRESS$),\n      IPV6ADDRESS1$ = subexp(subexp(H16$ + \"\\\\:\") + \"{6}\" + LS32$),\n      //                           6( h16 \":\" ) ls32\n      IPV6ADDRESS2$ = subexp(\"\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{5}\" + LS32$),\n      //                      \"::\" 5( h16 \":\" ) ls32\n      IPV6ADDRESS3$ = subexp(subexp(H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{4}\" + LS32$),\n      //[               h16 ] \"::\" 4( h16 \":\" ) ls32\n      IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,1}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{3}\" + LS32$),\n      //[ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n      IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,2}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{2}\" + LS32$),\n      //[ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n      IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,3}\" + H16$) + \"?\\\\:\\\\:\" + H16$ + \"\\\\:\" + LS32$),\n      //[ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n      IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,4}\" + H16$) + \"?\\\\:\\\\:\" + LS32$),\n      //[ *4( h16 \":\" ) h16 ] \"::\"              ls32\n      IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,5}\" + H16$) + \"?\\\\:\\\\:\" + H16$),\n      //[ *5( h16 \":\" ) h16 ] \"::\"              h16\n      IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,6}\" + H16$) + \"?\\\\:\\\\:\"),\n      //[ *6( h16 \":\" ) h16 ] \"::\"\n      IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join(\"|\")),\n      ZONEID$ = subexp(subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$) + \"+\"),\n      //RFC 6874\n      IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + \"\\\\%25\" + ZONEID$),\n      //RFC 6874\n      IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + ZONEID$),\n      //RFC 6874, with relaxed parsing rules\n      IPVFUTURE$ = subexp(\"[vV]\" + HEXDIG$$ + \"+\\\\.\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\") + \"+\"),\n      IP_LITERAL$ = subexp(\"\\\\[\" + subexp(IPV6ADDRZ_RELAXED$ + \"|\" + IPV6ADDRESS$ + \"|\" + IPVFUTURE$) + \"\\\\]\"),\n      //RFC 6874\n      REG_NAME$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$)) + \"*\"),\n      HOST$ = subexp(IP_LITERAL$ + \"|\" + IPV4ADDRESS$ + \"(?!\" + REG_NAME$ + \")\" + \"|\" + REG_NAME$),\n      PORT$ = subexp(DIGIT$$ + \"*\"),\n      AUTHORITY$ = subexp(subexp(USERINFO$ + \"@\") + \"?\" + HOST$ + subexp(\"\\\\:\" + PORT$) + \"?\"),\n      PCHAR$ = subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@]\")),\n      SEGMENT$ = subexp(PCHAR$ + \"*\"),\n      SEGMENT_NZ$ = subexp(PCHAR$ + \"+\"),\n      SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\@]\")) + \"+\"),\n      PATH_ABEMPTY$ = subexp(subexp(\"\\\\/\" + SEGMENT$) + \"*\"),\n      PATH_ABSOLUTE$ = subexp(\"\\\\/\" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + \"?\"),\n      //simplified\n      PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),\n      //simplified\n      PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),\n      //simplified\n      PATH_EMPTY$ = \"(?!\" + PCHAR$ + \")\",\n      PATH$ = subexp(PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n      QUERY$ = subexp(subexp(PCHAR$ + \"|\" + merge(\"[\\\\/\\\\?]\", IPRIVATE$$)) + \"*\"),\n      FRAGMENT$ = subexp(subexp(PCHAR$ + \"|[\\\\/\\\\?]\") + \"*\"),\n      HIER_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n      URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n      RELATIVE_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$),\n      RELATIVE$ = subexp(RELATIVE_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n      URI_REFERENCE$ = subexp(URI$ + \"|\" + RELATIVE$),\n      ABSOLUTE_URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\"),\n      GENERIC_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n      RELATIVE_REF$ = \"^(){0}\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n      ABSOLUTE_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?$\",\n      SAMEDOC_REF$ = \"^\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n      AUTHORITY_REF$ = \"^\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?$\";\n    return {\n      NOT_SCHEME: new RegExp(merge(\"[^]\", ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\"), \"g\"),\n      NOT_USERINFO: new RegExp(merge(\"[^\\\\%\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n      NOT_HOST: new RegExp(merge(\"[^\\\\%\\\\[\\\\]\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n      NOT_PATH: new RegExp(merge(\"[^\\\\%\\\\/\\\\:\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n      NOT_PATH_NOSCHEME: new RegExp(merge(\"[^\\\\%\\\\/\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n      NOT_QUERY: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\", IPRIVATE$$), \"g\"),\n      NOT_FRAGMENT: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\"), \"g\"),\n      ESCAPE: new RegExp(merge(\"[^]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n      UNRESERVED: new RegExp(UNRESERVED$$, \"g\"),\n      OTHER_CHARS: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, RESERVED$$), \"g\"),\n      PCT_ENCODED: new RegExp(PCT_ENCODED$, \"g\"),\n      IPV4ADDRESS: new RegExp(\"^(\" + IPV4ADDRESS$ + \")$\"),\n      IPV6ADDRESS: new RegExp(\"^\\\\[?(\" + IPV6ADDRESS$ + \")\" + subexp(subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + \"(\" + ZONEID$ + \")\") + \"?\\\\]?$\") //RFC 6874, with relaxed parsing rules\n    };\n  }\n\n  var URI_PROTOCOL = buildExps(false);\n  var IRI_PROTOCOL = buildExps(true);\n  var slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n      return _arr;\n    }\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n  var toConsumableArray = function toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  };\n\n  /** Highest positive signed 32-bit float value */\n\n  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n  /** Bootstring parameters */\n  var base = 36;\n  var tMin = 1;\n  var tMax = 26;\n  var skew = 38;\n  var damp = 700;\n  var initialBias = 72;\n  var initialN = 128; // 0x80\n  var delimiter = '-'; // '\\x2D'\n\n  /** Regular expressions */\n  var regexPunycode = /^xn--/;\n  var regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\n  var regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n  /** Error messages */\n  var errors = {\n    'overflow': 'Overflow: input needs wider integers to process',\n    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n    'invalid-input': 'Invalid input'\n  };\n\n  /** Convenience shortcuts */\n  var baseMinusTMin = base - tMin;\n  var floor = Math.floor;\n  var stringFromCharCode = String.fromCharCode;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A generic error utility function.\n   * @private\n   * @param {String} type The error type.\n   * @returns {Error} Throws a `RangeError` with the applicable error message.\n   */\n  function error$1(type) {\n    throw new RangeError(errors[type]);\n  }\n\n  /**\n   * A generic `Array#map` utility function.\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} callback The function that gets called for every array\n   * item.\n   * @returns {Array} A new array of values returned by the callback function.\n   */\n  function map(array, fn) {\n    var result = [];\n    var length = array.length;\n    while (length--) {\n      result[length] = fn(array[length]);\n    }\n    return result;\n  }\n\n  /**\n   * A simple `Array#map`-like wrapper to work with domain name strings or email\n   * addresses.\n   * @private\n   * @param {String} domain The domain name or email address.\n   * @param {Function} callback The function that gets called for every\n   * character.\n   * @returns {Array} A new string of characters returned by the callback\n   * function.\n   */\n  function mapDomain(string, fn) {\n    var parts = string.split('@');\n    var result = '';\n    if (parts.length > 1) {\n      // In email addresses, only the domain name should be punycoded. Leave\n      // the local part (i.e. everything up to `@`) intact.\n      result = parts[0] + '@';\n      string = parts[1];\n    }\n    // Avoid `split(regex)` for IE8 compatibility. See #17.\n    string = string.replace(regexSeparators, '\\x2E');\n    var labels = string.split('.');\n    var encoded = map(labels, fn).join('.');\n    return result + encoded;\n  }\n\n  /**\n   * Creates an array containing the numeric code points of each Unicode\n   * character in the string. While JavaScript uses UCS-2 internally,\n   * this function will convert a pair of surrogate halves (each of which\n   * UCS-2 exposes as separate characters) into a single code point,\n   * matching UTF-16.\n   * @see `punycode.ucs2.encode`\n   * @see <https://mathiasbynens.be/notes/javascript-encoding>\n   * @memberOf punycode.ucs2\n   * @name decode\n   * @param {String} string The Unicode input string (UCS-2).\n   * @returns {Array} The new array of code points.\n   */\n  function ucs2decode(string) {\n    var output = [];\n    var counter = 0;\n    var length = string.length;\n    while (counter < length) {\n      var value = string.charCodeAt(counter++);\n      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n        // It's a high surrogate, and there is a next character.\n        var extra = string.charCodeAt(counter++);\n        if ((extra & 0xFC00) == 0xDC00) {\n          // Low surrogate.\n          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n        } else {\n          // It's an unmatched surrogate; only append this code unit, in case the\n          // next code unit is the high surrogate of a surrogate pair.\n          output.push(value);\n          counter--;\n        }\n      } else {\n        output.push(value);\n      }\n    }\n    return output;\n  }\n\n  /**\n   * Creates a string based on an array of numeric code points.\n   * @see `punycode.ucs2.decode`\n   * @memberOf punycode.ucs2\n   * @name encode\n   * @param {Array} codePoints The array of numeric code points.\n   * @returns {String} The new Unicode string (UCS-2).\n   */\n  var ucs2encode = function ucs2encode(array) {\n    return String.fromCodePoint.apply(String, toConsumableArray(array));\n  };\n\n  /**\n   * Converts a basic code point into a digit/integer.\n   * @see `digitToBasic()`\n   * @private\n   * @param {Number} codePoint The basic numeric code point value.\n   * @returns {Number} The numeric value of a basic code point (for use in\n   * representing integers) in the range `0` to `base - 1`, or `base` if\n   * the code point does not represent a value.\n   */\n  var basicToDigit = function basicToDigit(codePoint) {\n    if (codePoint - 0x30 < 0x0A) {\n      return codePoint - 0x16;\n    }\n    if (codePoint - 0x41 < 0x1A) {\n      return codePoint - 0x41;\n    }\n    if (codePoint - 0x61 < 0x1A) {\n      return codePoint - 0x61;\n    }\n    return base;\n  };\n\n  /**\n   * Converts a digit/integer into a basic code point.\n   * @see `basicToDigit()`\n   * @private\n   * @param {Number} digit The numeric value of a basic code point.\n   * @returns {Number} The basic code point whose value (when used for\n   * representing integers) is `digit`, which needs to be in the range\n   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n   * used; else, the lowercase form is used. The behavior is undefined\n   * if `flag` is non-zero and `digit` has no uppercase form.\n   */\n  var digitToBasic = function digitToBasic(digit, flag) {\n    //  0..25 map to ASCII a..z or A..Z\n    // 26..35 map to ASCII 0..9\n    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n  };\n\n  /**\n   * Bias adaptation function as per section 3.4 of RFC 3492.\n   * https://tools.ietf.org/html/rfc3492#section-3.4\n   * @private\n   */\n  var adapt = function adapt(delta, numPoints, firstTime) {\n    var k = 0;\n    delta = firstTime ? floor(delta / damp) : delta >> 1;\n    delta += floor(delta / numPoints);\n    for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {\n      delta = floor(delta / baseMinusTMin);\n    }\n    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n  };\n\n  /**\n   * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n   * symbols.\n   * @memberOf punycode\n   * @param {String} input The Punycode string of ASCII-only symbols.\n   * @returns {String} The resulting string of Unicode symbols.\n   */\n  var decode = function decode(input) {\n    // Don't use UCS-2.\n    var output = [];\n    var inputLength = input.length;\n    var i = 0;\n    var n = initialN;\n    var bias = initialBias;\n\n    // Handle the basic code points: let `basic` be the number of input code\n    // points before the last delimiter, or `0` if there is none, then copy\n    // the first basic code points to the output.\n\n    var basic = input.lastIndexOf(delimiter);\n    if (basic < 0) {\n      basic = 0;\n    }\n    for (var j = 0; j < basic; ++j) {\n      // if it's not a basic code point\n      if (input.charCodeAt(j) >= 0x80) {\n        error$1('not-basic');\n      }\n      output.push(input.charCodeAt(j));\n    }\n\n    // Main decoding loop: start just after the last delimiter if any basic code\n    // points were copied; start at the beginning otherwise.\n\n    for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{\n      // `index` is the index of the next character to be consumed.\n      // Decode a generalized variable-length integer into `delta`,\n      // which gets added to `i`. The overflow checking is easier\n      // if we increase `i` as we go, then subtract off its starting\n      // value at the end to obtain `delta`.\n      var oldi = i;\n      for (var w = 1, k = base;; /* no condition */k += base) {\n        if (index >= inputLength) {\n          error$1('invalid-input');\n        }\n        var digit = basicToDigit(input.charCodeAt(index++));\n        if (digit >= base || digit > floor((maxInt - i) / w)) {\n          error$1('overflow');\n        }\n        i += digit * w;\n        var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n        if (digit < t) {\n          break;\n        }\n        var baseMinusT = base - t;\n        if (w > floor(maxInt / baseMinusT)) {\n          error$1('overflow');\n        }\n        w *= baseMinusT;\n      }\n      var out = output.length + 1;\n      bias = adapt(i - oldi, out, oldi == 0);\n\n      // `i` was supposed to wrap around from `out` to `0`,\n      // incrementing `n` each time, so we'll fix that now:\n      if (floor(i / out) > maxInt - n) {\n        error$1('overflow');\n      }\n      n += floor(i / out);\n      i %= out;\n\n      // Insert `n` at position `i` of the output.\n      output.splice(i++, 0, n);\n    }\n    return String.fromCodePoint.apply(String, output);\n  };\n\n  /**\n   * Converts a string of Unicode symbols (e.g. a domain name label) to a\n   * Punycode string of ASCII-only symbols.\n   * @memberOf punycode\n   * @param {String} input The string of Unicode symbols.\n   * @returns {String} The resulting Punycode string of ASCII-only symbols.\n   */\n  var encode = function encode(input) {\n    var output = [];\n\n    // Convert the input in UCS-2 to an array of Unicode code points.\n    input = ucs2decode(input);\n\n    // Cache the length.\n    var inputLength = input.length;\n\n    // Initialize the state.\n    var n = initialN;\n    var delta = 0;\n    var bias = initialBias;\n\n    // Handle the basic code points.\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n    try {\n      for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _currentValue2 = _step.value;\n        if (_currentValue2 < 0x80) {\n          output.push(stringFromCharCode(_currentValue2));\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n    var basicLength = output.length;\n    var handledCPCount = basicLength;\n\n    // `handledCPCount` is the number of code points that have been handled;\n    // `basicLength` is the number of basic code points.\n\n    // Finish the basic string with a delimiter unless it's empty.\n    if (basicLength) {\n      output.push(delimiter);\n    }\n\n    // Main encoding loop:\n    while (handledCPCount < inputLength) {\n      // All non-basic code points < n have been handled already. Find the next\n      // larger one:\n      var m = maxInt;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n      try {\n        for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var currentValue = _step2.value;\n          if (currentValue >= n && currentValue < m) {\n            m = currentValue;\n          }\n        }\n\n        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n        // but guard against overflow.\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n      var handledCPCountPlusOne = handledCPCount + 1;\n      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n        error$1('overflow');\n      }\n      delta += (m - n) * handledCPCountPlusOne;\n      n = m;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n      try {\n        for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _currentValue = _step3.value;\n          if (_currentValue < n && ++delta > maxInt) {\n            error$1('overflow');\n          }\n          if (_currentValue == n) {\n            // Represent delta as a generalized variable-length integer.\n            var q = delta;\n            for (var k = base;; /* no condition */k += base) {\n              var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n              if (q < t) {\n                break;\n              }\n              var qMinusT = q - t;\n              var baseMinusT = base - t;\n              output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n              q = floor(qMinusT / baseMinusT);\n            }\n            output.push(stringFromCharCode(digitToBasic(q, 0)));\n            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n            delta = 0;\n            ++handledCPCount;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n      ++delta;\n      ++n;\n    }\n    return output.join('');\n  };\n\n  /**\n   * Converts a Punycode string representing a domain name or an email address\n   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n   * it doesn't matter if you call it on a string that has already been\n   * converted to Unicode.\n   * @memberOf punycode\n   * @param {String} input The Punycoded domain name or email address to\n   * convert to Unicode.\n   * @returns {String} The Unicode representation of the given Punycode\n   * string.\n   */\n  var toUnicode = function toUnicode(input) {\n    return mapDomain(input, function (string) {\n      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n    });\n  };\n\n  /**\n   * Converts a Unicode string representing a domain name or an email address to\n   * Punycode. Only the non-ASCII parts of the domain name will be converted,\n   * i.e. it doesn't matter if you call it with a domain that's already in\n   * ASCII.\n   * @memberOf punycode\n   * @param {String} input The domain name or email address to convert, as a\n   * Unicode string.\n   * @returns {String} The Punycode representation of the given domain name or\n   * email address.\n   */\n  var toASCII = function toASCII(input) {\n    return mapDomain(input, function (string) {\n      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;\n    });\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /** Define the public API */\n  var punycode = {\n    /**\n     * A string representing the current Punycode.js version number.\n     * @memberOf punycode\n     * @type String\n     */\n    'version': '2.1.0',\n    /**\n     * An object of methods to convert from JavaScript's internal character\n     * representation (UCS-2) to Unicode code points, and back.\n     * @see <https://mathiasbynens.be/notes/javascript-encoding>\n     * @memberOf punycode\n     * @type Object\n     */\n    'ucs2': {\n      'decode': ucs2decode,\n      'encode': ucs2encode\n    },\n    'decode': decode,\n    'encode': encode,\n    'toASCII': toASCII,\n    'toUnicode': toUnicode\n  };\n\n  /**\n   * URI.js\n   *\n   * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.\n   * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n   * @see http://github.com/garycourt/uri-js\n   */\n  /**\n   * Copyright 2011 Gary Court. All rights reserved.\n   *\n   * Redistribution and use in source and binary forms, with or without modification, are\n   * permitted provided that the following conditions are met:\n   *\n   *    1. Redistributions of source code must retain the above copyright notice, this list of\n   *       conditions and the following disclaimer.\n   *\n   *    2. Redistributions in binary form must reproduce the above copyright notice, this list\n   *       of conditions and the following disclaimer in the documentation and/or other materials\n   *       provided with the distribution.\n   *\n   * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED\n   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n   * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR\n   * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n   * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n   * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   *\n   * The views and conclusions contained in the software and documentation are those of the\n   * authors and should not be interpreted as representing official policies, either expressed\n   * or implied, of Gary Court.\n   */\n  var SCHEMES = {};\n  function pctEncChar(chr) {\n    var c = chr.charCodeAt(0);\n    var e = void 0;\n    if (c < 16) e = \"%0\" + c.toString(16).toUpperCase();else if (c < 128) e = \"%\" + c.toString(16).toUpperCase();else if (c < 2048) e = \"%\" + (c >> 6 | 192).toString(16).toUpperCase() + \"%\" + (c & 63 | 128).toString(16).toUpperCase();else e = \"%\" + (c >> 12 | 224).toString(16).toUpperCase() + \"%\" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + \"%\" + (c & 63 | 128).toString(16).toUpperCase();\n    return e;\n  }\n  function pctDecChars(str) {\n    var newStr = \"\";\n    var i = 0;\n    var il = str.length;\n    while (i < il) {\n      var c = parseInt(str.substr(i + 1, 2), 16);\n      if (c < 128) {\n        newStr += String.fromCharCode(c);\n        i += 3;\n      } else if (c >= 194 && c < 224) {\n        if (il - i >= 6) {\n          var c2 = parseInt(str.substr(i + 4, 2), 16);\n          newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);\n        } else {\n          newStr += str.substr(i, 6);\n        }\n        i += 6;\n      } else if (c >= 224) {\n        if (il - i >= 9) {\n          var _c = parseInt(str.substr(i + 4, 2), 16);\n          var c3 = parseInt(str.substr(i + 7, 2), 16);\n          newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);\n        } else {\n          newStr += str.substr(i, 9);\n        }\n        i += 9;\n      } else {\n        newStr += str.substr(i, 3);\n        i += 3;\n      }\n    }\n    return newStr;\n  }\n  function _normalizeComponentEncoding(components, protocol) {\n    function decodeUnreserved(str) {\n      var decStr = pctDecChars(str);\n      return !decStr.match(protocol.UNRESERVED) ? str : decStr;\n    }\n    if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, \"\");\n    if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    return components;\n  }\n  function _stripLeadingZeros(str) {\n    return str.replace(/^0*(.*)/, \"$1\") || \"0\";\n  }\n  function _normalizeIPv4(host, protocol) {\n    var matches = host.match(protocol.IPV4ADDRESS) || [];\n    var _matches = slicedToArray(matches, 2),\n      address = _matches[1];\n    if (address) {\n      return address.split(\".\").map(_stripLeadingZeros).join(\".\");\n    } else {\n      return host;\n    }\n  }\n  function _normalizeIPv6(host, protocol) {\n    var matches = host.match(protocol.IPV6ADDRESS) || [];\n    var _matches2 = slicedToArray(matches, 3),\n      address = _matches2[1],\n      zone = _matches2[2];\n    if (address) {\n      var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),\n        _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),\n        last = _address$toLowerCase$2[0],\n        first = _address$toLowerCase$2[1];\n      var firstFields = first ? first.split(\":\").map(_stripLeadingZeros) : [];\n      var lastFields = last.split(\":\").map(_stripLeadingZeros);\n      var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);\n      var fieldCount = isLastFieldIPv4Address ? 7 : 8;\n      var lastFieldsStart = lastFields.length - fieldCount;\n      var fields = Array(fieldCount);\n      for (var x = 0; x < fieldCount; ++x) {\n        fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';\n      }\n      if (isLastFieldIPv4Address) {\n        fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);\n      }\n      var allZeroFields = fields.reduce(function (acc, field, index) {\n        if (!field || field === \"0\") {\n          var lastLongest = acc[acc.length - 1];\n          if (lastLongest && lastLongest.index + lastLongest.length === index) {\n            lastLongest.length++;\n          } else {\n            acc.push({\n              index: index,\n              length: 1\n            });\n          }\n        }\n        return acc;\n      }, []);\n      var longestZeroFields = allZeroFields.sort(function (a, b) {\n        return b.length - a.length;\n      })[0];\n      var newHost = void 0;\n      if (longestZeroFields && longestZeroFields.length > 1) {\n        var newFirst = fields.slice(0, longestZeroFields.index);\n        var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);\n        newHost = newFirst.join(\":\") + \"::\" + newLast.join(\":\");\n      } else {\n        newHost = fields.join(\":\");\n      }\n      if (zone) {\n        newHost += \"%\" + zone;\n      }\n      return newHost;\n    } else {\n      return host;\n    }\n  }\n  var URI_PARSE = /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:([^\\/?#@]*)@)?(\\[[^\\/?#\\]]+\\]|[^\\/?#:]*)(?:\\:(\\d*))?))?([^?#]*)(?:\\?([^#]*))?(?:#((?:.|\\n|\\r)*))?/i;\n  var NO_MATCH_IS_UNDEFINED = \"\".match(/(){0}/)[1] === undefined;\n  function parse(uriString) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var components = {};\n    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;\n    if (options.reference === \"suffix\") uriString = (options.scheme ? options.scheme + \":\" : \"\") + \"//\" + uriString;\n    var matches = uriString.match(URI_PARSE);\n    if (matches) {\n      if (NO_MATCH_IS_UNDEFINED) {\n        //store each component\n        components.scheme = matches[1];\n        components.userinfo = matches[3];\n        components.host = matches[4];\n        components.port = parseInt(matches[5], 10);\n        components.path = matches[6] || \"\";\n        components.query = matches[7];\n        components.fragment = matches[8];\n        //fix port number\n        if (isNaN(components.port)) {\n          components.port = matches[5];\n        }\n      } else {\n        //IE FIX for improper RegExp matching\n        //store each component\n        components.scheme = matches[1] || undefined;\n        components.userinfo = uriString.indexOf(\"@\") !== -1 ? matches[3] : undefined;\n        components.host = uriString.indexOf(\"//\") !== -1 ? matches[4] : undefined;\n        components.port = parseInt(matches[5], 10);\n        components.path = matches[6] || \"\";\n        components.query = uriString.indexOf(\"?\") !== -1 ? matches[7] : undefined;\n        components.fragment = uriString.indexOf(\"#\") !== -1 ? matches[8] : undefined;\n        //fix port number\n        if (isNaN(components.port)) {\n          components.port = uriString.match(/\\/\\/(?:.|\\n)*\\:(?:\\/|\\?|\\#|$)/) ? matches[4] : undefined;\n        }\n      }\n      if (components.host) {\n        //normalize IP hosts\n        components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);\n      }\n      //determine reference type\n      if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {\n        components.reference = \"same-document\";\n      } else if (components.scheme === undefined) {\n        components.reference = \"relative\";\n      } else if (components.fragment === undefined) {\n        components.reference = \"absolute\";\n      } else {\n        components.reference = \"uri\";\n      }\n      //check for reference errors\n      if (options.reference && options.reference !== \"suffix\" && options.reference !== components.reference) {\n        components.error = components.error || \"URI is not a \" + options.reference + \" reference.\";\n      }\n      //find scheme handler\n      var schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n      //check if scheme can't handle IRIs\n      if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n        //if host component is a domain name\n        if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {\n          //convert Unicode IDN -> ASCII IDN\n          try {\n            components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());\n          } catch (e) {\n            components.error = components.error || \"Host's domain name can not be converted to ASCII via punycode: \" + e;\n          }\n        }\n        //convert IRI -> URI\n        _normalizeComponentEncoding(components, URI_PROTOCOL);\n      } else {\n        //normalize encodings\n        _normalizeComponentEncoding(components, protocol);\n      }\n      //perform scheme specific parsing\n      if (schemeHandler && schemeHandler.parse) {\n        schemeHandler.parse(components, options);\n      }\n    } else {\n      components.error = components.error || \"URI can not be parsed.\";\n    }\n    return components;\n  }\n  function _recomposeAuthority(components, options) {\n    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;\n    var uriTokens = [];\n    if (components.userinfo !== undefined) {\n      uriTokens.push(components.userinfo);\n      uriTokens.push(\"@\");\n    }\n    if (components.host !== undefined) {\n      //normalize IP hosts, add brackets and escape zone separator for IPv6\n      uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {\n        return \"[\" + $1 + ($2 ? \"%25\" + $2 : \"\") + \"]\";\n      }));\n    }\n    if (typeof components.port === \"number\" || typeof components.port === \"string\") {\n      uriTokens.push(\":\");\n      uriTokens.push(String(components.port));\n    }\n    return uriTokens.length ? uriTokens.join(\"\") : undefined;\n  }\n  var RDS1 = /^\\.\\.?\\//;\n  var RDS2 = /^\\/\\.(\\/|$)/;\n  var RDS3 = /^\\/\\.\\.(\\/|$)/;\n  var RDS5 = /^\\/?(?:.|\\n)*?(?=\\/|$)/;\n  function removeDotSegments(input) {\n    var output = [];\n    while (input.length) {\n      if (input.match(RDS1)) {\n        input = input.replace(RDS1, \"\");\n      } else if (input.match(RDS2)) {\n        input = input.replace(RDS2, \"/\");\n      } else if (input.match(RDS3)) {\n        input = input.replace(RDS3, \"/\");\n        output.pop();\n      } else if (input === \".\" || input === \"..\") {\n        input = \"\";\n      } else {\n        var im = input.match(RDS5);\n        if (im) {\n          var s = im[0];\n          input = input.slice(s.length);\n          output.push(s);\n        } else {\n          throw new Error(\"Unexpected dot segment condition\");\n        }\n      }\n    }\n    return output.join(\"\");\n  }\n  function serialize(components) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;\n    var uriTokens = [];\n    //find scheme handler\n    var schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n    //perform scheme specific serialization\n    if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);\n    if (components.host) {\n      //if host component is an IPv6 address\n      if (protocol.IPV6ADDRESS.test(components.host)) {}\n      //TODO: normalize IPv6 address as per RFC 5952\n\n      //if host component is a domain name\n      else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {\n        //convert IDN via punycode\n        try {\n          components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);\n        } catch (e) {\n          components.error = components.error || \"Host's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n        }\n      }\n    }\n    //normalize encoding\n    _normalizeComponentEncoding(components, protocol);\n    if (options.reference !== \"suffix\" && components.scheme) {\n      uriTokens.push(components.scheme);\n      uriTokens.push(\":\");\n    }\n    var authority = _recomposeAuthority(components, options);\n    if (authority !== undefined) {\n      if (options.reference !== \"suffix\") {\n        uriTokens.push(\"//\");\n      }\n      uriTokens.push(authority);\n      if (components.path && components.path.charAt(0) !== \"/\") {\n        uriTokens.push(\"/\");\n      }\n    }\n    if (components.path !== undefined) {\n      var s = components.path;\n      if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n        s = removeDotSegments(s);\n      }\n      if (authority === undefined) {\n        s = s.replace(/^\\/\\//, \"/%2F\"); //don't allow the path to start with \"//\"\n      }\n\n      uriTokens.push(s);\n    }\n    if (components.query !== undefined) {\n      uriTokens.push(\"?\");\n      uriTokens.push(components.query);\n    }\n    if (components.fragment !== undefined) {\n      uriTokens.push(\"#\");\n      uriTokens.push(components.fragment);\n    }\n    return uriTokens.join(\"\"); //merge tokens into a string\n  }\n\n  function resolveComponents(base, relative) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var skipNormalization = arguments[3];\n    var target = {};\n    if (!skipNormalization) {\n      base = parse(serialize(base, options), options); //normalize base components\n      relative = parse(serialize(relative, options), options); //normalize relative components\n    }\n\n    options = options || {};\n    if (!options.tolerant && relative.scheme) {\n      target.scheme = relative.scheme;\n      //target.authority = relative.authority;\n      target.userinfo = relative.userinfo;\n      target.host = relative.host;\n      target.port = relative.port;\n      target.path = removeDotSegments(relative.path || \"\");\n      target.query = relative.query;\n    } else {\n      if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n        //target.authority = relative.authority;\n        target.userinfo = relative.userinfo;\n        target.host = relative.host;\n        target.port = relative.port;\n        target.path = removeDotSegments(relative.path || \"\");\n        target.query = relative.query;\n      } else {\n        if (!relative.path) {\n          target.path = base.path;\n          if (relative.query !== undefined) {\n            target.query = relative.query;\n          } else {\n            target.query = base.query;\n          }\n        } else {\n          if (relative.path.charAt(0) === \"/\") {\n            target.path = removeDotSegments(relative.path);\n          } else {\n            if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {\n              target.path = \"/\" + relative.path;\n            } else if (!base.path) {\n              target.path = relative.path;\n            } else {\n              target.path = base.path.slice(0, base.path.lastIndexOf(\"/\") + 1) + relative.path;\n            }\n            target.path = removeDotSegments(target.path);\n          }\n          target.query = relative.query;\n        }\n        //target.authority = base.authority;\n        target.userinfo = base.userinfo;\n        target.host = base.host;\n        target.port = base.port;\n      }\n      target.scheme = base.scheme;\n    }\n    target.fragment = relative.fragment;\n    return target;\n  }\n  function resolve(baseURI, relativeURI, options) {\n    var schemelessOptions = assign({\n      scheme: 'null'\n    }, options);\n    return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);\n  }\n  function normalize(uri, options) {\n    if (typeof uri === \"string\") {\n      uri = serialize(parse(uri, options), options);\n    } else if (typeOf(uri) === \"object\") {\n      uri = parse(serialize(uri, options), options);\n    }\n    return uri;\n  }\n  function equal(uriA, uriB, options) {\n    if (typeof uriA === \"string\") {\n      uriA = serialize(parse(uriA, options), options);\n    } else if (typeOf(uriA) === \"object\") {\n      uriA = serialize(uriA, options);\n    }\n    if (typeof uriB === \"string\") {\n      uriB = serialize(parse(uriB, options), options);\n    } else if (typeOf(uriB) === \"object\") {\n      uriB = serialize(uriB, options);\n    }\n    return uriA === uriB;\n  }\n  function escapeComponent(str, options) {\n    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);\n  }\n  function unescapeComponent(str, options) {\n    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);\n  }\n  var handler = {\n    scheme: \"http\",\n    domainHost: true,\n    parse: function parse(components, options) {\n      //report missing host\n      if (!components.host) {\n        components.error = components.error || \"HTTP URIs must have a host.\";\n      }\n      return components;\n    },\n    serialize: function serialize(components, options) {\n      var secure = String(components.scheme).toLowerCase() === \"https\";\n      //normalize the default port\n      if (components.port === (secure ? 443 : 80) || components.port === \"\") {\n        components.port = undefined;\n      }\n      //normalize the empty path\n      if (!components.path) {\n        components.path = \"/\";\n      }\n      //NOTE: We do not parse query strings for HTTP URIs\n      //as WWW Form Url Encoded query strings are part of the HTML4+ spec,\n      //and not the HTTP spec.\n      return components;\n    }\n  };\n  var handler$1 = {\n    scheme: \"https\",\n    domainHost: handler.domainHost,\n    parse: handler.parse,\n    serialize: handler.serialize\n  };\n  function isSecure(wsComponents) {\n    return typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === \"wss\";\n  }\n  //RFC 6455\n  var handler$2 = {\n    scheme: \"ws\",\n    domainHost: true,\n    parse: function parse(components, options) {\n      var wsComponents = components;\n      //indicate if the secure flag is set\n      wsComponents.secure = isSecure(wsComponents);\n      //construct resouce name\n      wsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');\n      wsComponents.path = undefined;\n      wsComponents.query = undefined;\n      return wsComponents;\n    },\n    serialize: function serialize(wsComponents, options) {\n      //normalize the default port\n      if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === \"\") {\n        wsComponents.port = undefined;\n      }\n      //ensure scheme matches secure flag\n      if (typeof wsComponents.secure === 'boolean') {\n        wsComponents.scheme = wsComponents.secure ? 'wss' : 'ws';\n        wsComponents.secure = undefined;\n      }\n      //reconstruct path from resource name\n      if (wsComponents.resourceName) {\n        var _wsComponents$resourc = wsComponents.resourceName.split('?'),\n          _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2),\n          path = _wsComponents$resourc2[0],\n          query = _wsComponents$resourc2[1];\n        wsComponents.path = path && path !== '/' ? path : undefined;\n        wsComponents.query = query;\n        wsComponents.resourceName = undefined;\n      }\n      //forbid fragment component\n      wsComponents.fragment = undefined;\n      return wsComponents;\n    }\n  };\n  var handler$3 = {\n    scheme: \"wss\",\n    domainHost: handler$2.domainHost,\n    parse: handler$2.parse,\n    serialize: handler$2.serialize\n  };\n  var O = {};\n  var isIRI = true;\n  //RFC 3986\n  var UNRESERVED$$ = \"[A-Za-z0-9\\\\-\\\\.\\\\_\\\\~\" + (isIRI ? \"\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF\" : \"\") + \"]\";\n  var HEXDIG$$ = \"[0-9A-Fa-f]\"; //case-insensitive\n  var PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)); //expanded\n  //RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =\n  //const ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\#\\\\$\\\\%\\\\&\\\\'\\\\*\\\\+\\\\-\\\\/\\\\=\\\\?\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\n  //const WSP$$ = \"[\\\\x20\\\\x09]\";\n  //const OBS_QTEXT$$ = \"[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x7F]\";  //(%d1-8 / %d11-12 / %d14-31 / %d127)\n  //const QTEXT$$ = merge(\"[\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E]\", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext\n  //const VCHAR$$ = \"[\\\\x21-\\\\x7E]\";\n  //const WSP$$ = \"[\\\\x20\\\\x09]\";\n  //const OBS_QP$ = subexp(\"\\\\\\\\\" + merge(\"[\\\\x00\\\\x0D\\\\x0A]\", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext\n  //const FWS$ = subexp(subexp(WSP$$ + \"*\" + \"\\\\x0D\\\\x0A\") + \"?\" + WSP$$ + \"+\");\n  //const QUOTED_PAIR$ = subexp(subexp(\"\\\\\\\\\" + subexp(VCHAR$$ + \"|\" + WSP$$)) + \"|\" + OBS_QP$);\n  //const QUOTED_STRING$ = subexp('\\\\\"' + subexp(FWS$ + \"?\" + QCONTENT$) + \"*\" + FWS$ + \"?\" + '\\\\\"');\n  var ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\$\\\\%\\\\'\\\\*\\\\+\\\\-\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\n  var QTEXT$$ = \"[\\\\!\\\\$\\\\%\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.0-9\\\\<\\\\>A-Z\\\\x5E-\\\\x7E]\";\n  var VCHAR$$ = merge(QTEXT$$, \"[\\\\\\\"\\\\\\\\]\");\n  var SOME_DELIMS$$ = \"[\\\\!\\\\$\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\:\\\\@]\";\n  var UNRESERVED = new RegExp(UNRESERVED$$, \"g\");\n  var PCT_ENCODED = new RegExp(PCT_ENCODED$, \"g\");\n  var NOT_LOCAL_PART = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", '[\\\\\"]', VCHAR$$), \"g\");\n  var NOT_HFNAME = new RegExp(merge(\"[^]\", UNRESERVED$$, SOME_DELIMS$$), \"g\");\n  var NOT_HFVALUE = NOT_HFNAME;\n  function decodeUnreserved(str) {\n    var decStr = pctDecChars(str);\n    return !decStr.match(UNRESERVED) ? str : decStr;\n  }\n  var handler$4 = {\n    scheme: \"mailto\",\n    parse: function parse$$1(components, options) {\n      var mailtoComponents = components;\n      var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(\",\") : [];\n      mailtoComponents.path = undefined;\n      if (mailtoComponents.query) {\n        var unknownHeaders = false;\n        var headers = {};\n        var hfields = mailtoComponents.query.split(\"&\");\n        for (var x = 0, xl = hfields.length; x < xl; ++x) {\n          var hfield = hfields[x].split(\"=\");\n          switch (hfield[0]) {\n            case \"to\":\n              var toAddrs = hfield[1].split(\",\");\n              for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {\n                to.push(toAddrs[_x]);\n              }\n              break;\n            case \"subject\":\n              mailtoComponents.subject = unescapeComponent(hfield[1], options);\n              break;\n            case \"body\":\n              mailtoComponents.body = unescapeComponent(hfield[1], options);\n              break;\n            default:\n              unknownHeaders = true;\n              headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);\n              break;\n          }\n        }\n        if (unknownHeaders) mailtoComponents.headers = headers;\n      }\n      mailtoComponents.query = undefined;\n      for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {\n        var addr = to[_x2].split(\"@\");\n        addr[0] = unescapeComponent(addr[0]);\n        if (!options.unicodeSupport) {\n          //convert Unicode IDN -> ASCII IDN\n          try {\n            addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());\n          } catch (e) {\n            mailtoComponents.error = mailtoComponents.error || \"Email address's domain name can not be converted to ASCII via punycode: \" + e;\n          }\n        } else {\n          addr[1] = unescapeComponent(addr[1], options).toLowerCase();\n        }\n        to[_x2] = addr.join(\"@\");\n      }\n      return mailtoComponents;\n    },\n    serialize: function serialize$$1(mailtoComponents, options) {\n      var components = mailtoComponents;\n      var to = toArray(mailtoComponents.to);\n      if (to) {\n        for (var x = 0, xl = to.length; x < xl; ++x) {\n          var toAddr = String(to[x]);\n          var atIdx = toAddr.lastIndexOf(\"@\");\n          var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);\n          var domain = toAddr.slice(atIdx + 1);\n          //convert IDN via punycode\n          try {\n            domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);\n          } catch (e) {\n            components.error = components.error || \"Email address's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n          }\n          to[x] = localPart + \"@\" + domain;\n        }\n        components.path = to.join(\",\");\n      }\n      var headers = mailtoComponents.headers = mailtoComponents.headers || {};\n      if (mailtoComponents.subject) headers[\"subject\"] = mailtoComponents.subject;\n      if (mailtoComponents.body) headers[\"body\"] = mailtoComponents.body;\n      var fields = [];\n      for (var name in headers) {\n        if (headers[name] !== O[name]) {\n          fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + \"=\" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));\n        }\n      }\n      if (fields.length) {\n        components.query = fields.join(\"&\");\n      }\n      return components;\n    }\n  };\n  var URN_PARSE = /^([^\\:]+)\\:(.*)/;\n  //RFC 2141\n  var handler$5 = {\n    scheme: \"urn\",\n    parse: function parse$$1(components, options) {\n      var matches = components.path && components.path.match(URN_PARSE);\n      var urnComponents = components;\n      if (matches) {\n        var scheme = options.scheme || urnComponents.scheme || \"urn\";\n        var nid = matches[1].toLowerCase();\n        var nss = matches[2];\n        var urnScheme = scheme + \":\" + (options.nid || nid);\n        var schemeHandler = SCHEMES[urnScheme];\n        urnComponents.nid = nid;\n        urnComponents.nss = nss;\n        urnComponents.path = undefined;\n        if (schemeHandler) {\n          urnComponents = schemeHandler.parse(urnComponents, options);\n        }\n      } else {\n        urnComponents.error = urnComponents.error || \"URN can not be parsed.\";\n      }\n      return urnComponents;\n    },\n    serialize: function serialize$$1(urnComponents, options) {\n      var scheme = options.scheme || urnComponents.scheme || \"urn\";\n      var nid = urnComponents.nid;\n      var urnScheme = scheme + \":\" + (options.nid || nid);\n      var schemeHandler = SCHEMES[urnScheme];\n      if (schemeHandler) {\n        urnComponents = schemeHandler.serialize(urnComponents, options);\n      }\n      var uriComponents = urnComponents;\n      var nss = urnComponents.nss;\n      uriComponents.path = (nid || options.nid) + \":\" + nss;\n      return uriComponents;\n    }\n  };\n  var UUID = /^[0-9A-Fa-f]{8}(?:\\-[0-9A-Fa-f]{4}){3}\\-[0-9A-Fa-f]{12}$/;\n  //RFC 4122\n  var handler$6 = {\n    scheme: \"urn:uuid\",\n    parse: function parse(urnComponents, options) {\n      var uuidComponents = urnComponents;\n      uuidComponents.uuid = uuidComponents.nss;\n      uuidComponents.nss = undefined;\n      if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {\n        uuidComponents.error = uuidComponents.error || \"UUID is not valid.\";\n      }\n      return uuidComponents;\n    },\n    serialize: function serialize(uuidComponents, options) {\n      var urnComponents = uuidComponents;\n      //normalize UUID\n      urnComponents.nss = (uuidComponents.uuid || \"\").toLowerCase();\n      return urnComponents;\n    }\n  };\n  SCHEMES[handler.scheme] = handler;\n  SCHEMES[handler$1.scheme] = handler$1;\n  SCHEMES[handler$2.scheme] = handler$2;\n  SCHEMES[handler$3.scheme] = handler$3;\n  SCHEMES[handler$4.scheme] = handler$4;\n  SCHEMES[handler$5.scheme] = handler$5;\n  SCHEMES[handler$6.scheme] = handler$6;\n  exports.SCHEMES = SCHEMES;\n  exports.pctEncChar = pctEncChar;\n  exports.pctDecChars = pctDecChars;\n  exports.parse = parse;\n  exports.removeDotSegments = removeDotSegments;\n  exports.serialize = serialize;\n  exports.resolveComponents = resolveComponents;\n  exports.resolve = resolve;\n  exports.normalize = normalize;\n  exports.equal = equal;\n  exports.escapeComponent = escapeComponent;\n  exports.unescapeComponent = unescapeComponent;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["../../src/index.ts","../../src/schemes/urn-uuid.ts","../../src/schemes/urn.ts","../../src/schemes/mailto.ts","../../src/schemes/wss.ts","../../src/schemes/ws.ts","../../src/schemes/https.ts","../../src/schemes/http.ts","../../src/uri.ts","../../node_modules/punycode/punycode.es6.js","../../src/regexps-iri.ts","../../src/regexps-uri.ts","../../src/util.ts"],"names":["SCHEMES","http","scheme","https","ws","wss","mailto","urn","uuid","UUID","handler","urnComponents","options","uuidComponents","nss","undefined","tolerant","match","error","toLowerCase","URN_PARSE","components","matches","path","nid","urnScheme","schemeHandler","parse","serialize","uriComponents","O","isIRI","UNRESERVED$$","HEXDIG$$","PCT_ENCODED$","subexp","ATEXT$$","QTEXT$$","VCHAR$$","merge","SOME_DELIMS$$","UNRESERVED","RegExp","PCT_ENCODED","NOT_LOCAL_PART","NOT_HFNAME","NOT_HFVALUE","str","decStr","pctDecChars","mailtoComponents","to","split","query","unknownHeaders","headers","hfields","x","xl","length","hfield","toAddrs","push","subject","unescapeComponent","body","addr","unicodeSupport","punycode","toASCII","e","join","toArray","toAddr","String","atIdx","lastIndexOf","localPart","slice","replace","decodeUnreserved","toUpperCase","pctEncChar","domain","iri","toUnicode","fields","name","domainHost","wsComponents","secure","isSecure","resourceName","port","fragment","host","chr","c","charCodeAt","toString","newStr","i","il","parseInt","substr","fromCharCode","c2","c3","protocol","NOT_SCHEME","userinfo","NOT_USERINFO","NOT_HOST","NOT_PATH","NOT_PATH_NOSCHEME","NOT_QUERY","NOT_FRAGMENT","IPV4ADDRESS","address","map","_stripLeadingZeros","IPV6ADDRESS","zone","last","first","reverse","firstFields","lastFields","isLastFieldIPv4Address","test","fieldCount","lastFieldsStart","Array","_normalizeIPv4","allZeroFields","reduce","acc","field","index","lastLongest","longestZeroFields","sort","a","b","newHost","newFirst","newLast","URI_PARSE","NO_MATCH_IS_UNDEFINED","uriString","IRI_PROTOCOL","URI_PROTOCOL","reference","isNaN","indexOf","_normalizeIPv6","uriTokens","_","$1","$2","RDS1","RDS2","RDS3","RDS5","input","output","pop","im","s","Error","authority","_recomposeAuthority","charAt","absolutePath","removeDotSegments","base","relative","skipNormalization","target","baseURI","relativeURI","schemelessOptions","assign","resolveComponents","uri","typeOf","uriA","uriB","ESCAPE","maxInt","tMin","tMax","skew","damp","initialBias","initialN","delimiter","regexPunycode","regexNonASCII","regexSeparators","errors","baseMinusTMin","floor","Math","stringFromCharCode","type","RangeError","array","fn","result","mapDomain","string","parts","labels","encoded","ucs2decode","counter","value","extra","ucs2encode","fromCodePoint","basicToDigit","codePoint","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","decode","inputLength","n","bias","basic","j","oldi","w","t","baseMinusT","out","splice","encode","currentValue","basicLength","handledCPCount","m","handledCPCountPlusOne","q","qMinusT","buildExps","ALPHA$$","CR$","DIGIT$$","DQUOTE$$","SP$$","SUB_DELIMS$$","RESERVED$$","GEN_DELIMS$$","UCSCHAR$$","SCHEME$","USERINFO$","DEC_OCTET$","DEC_OCTET_RELAXED$","H16$","LS32$","IPV4ADDRESS$","IPV6ADDRESS1$","IPV6ADDRESS2$","IPV6ADDRESS3$","IPV6ADDRESS4$","IPV6ADDRESS5$","IPV6ADDRESS6$","IPV6ADDRESS7$","IPV6ADDRESS8$","IPV6ADDRESS9$","ZONEID$","IPV6ADDRESS$","IP_LITERAL$","IPV6ADDRZ_RELAXED$","IPVFUTURE$","HOST$","REG_NAME$","PORT$","AUTHORITY$","PCHAR$","SEGMENT$","SEGMENT_NZ$","SEGMENT_NZ_NC$","PATH_ABEMPTY$","PATH_ABSOLUTE$","PATH$","PATH_NOSCHEME$","PATH_ROOTLESS$","PATH_EMPTY$","QUERY$","IPRIVATE$$","FRAGMENT$","HIER_PART$","URI$","RELATIVE_PART$","RELATIVE$","URI_REFERENCE$","ABSOLUTE_URI$","GENERIC_REF$","RELATIVE_REF$","ABSOLUTE_REF$","SAMEDOC_REF$","AUTHORITY_REF$","sets","o","Object","prototype","call","shift","obj","setInterval","source","key"],"mappings":"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","sourcesContent":["import { SCHEMES } from \"./uri\";\n\nimport http from \"./schemes/http\";\nSCHEMES[http.scheme] = http;\n\nimport https from \"./schemes/https\";\nSCHEMES[https.scheme] = https;\n\nimport ws from \"./schemes/ws\";\nSCHEMES[ws.scheme] = ws;\n\nimport wss from \"./schemes/wss\";\nSCHEMES[wss.scheme] = wss;\n\nimport mailto from \"./schemes/mailto\";\nSCHEMES[mailto.scheme] = mailto;\n\nimport urn from \"./schemes/urn\";\nSCHEMES[urn.scheme] = urn;\n\nimport uuid from \"./schemes/urn-uuid\";\nSCHEMES[uuid.scheme] = uuid;\n\nexport * from \"./uri\";\n","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { URNComponents } from \"./urn\";\nimport { SCHEMES } from \"../uri\";\n\nexport interface UUIDComponents extends URNComponents {\n\tuuid?: string;\n}\n\nconst UUID = /^[0-9A-Fa-f]{8}(?:\\-[0-9A-Fa-f]{4}){3}\\-[0-9A-Fa-f]{12}$/;\nconst UUID_PARSE = /^[0-9A-Fa-f\\-]{36}/;\n\n//RFC 4122\nconst handler:URISchemeHandler<UUIDComponents, URIOptions, URNComponents> = {\n\tscheme : \"urn:uuid\",\n\n\tparse : function (urnComponents:URNComponents, options:URIOptions):UUIDComponents {\n\t\tconst uuidComponents = urnComponents as UUIDComponents;\n\t\tuuidComponents.uuid = uuidComponents.nss;\n\t\tuuidComponents.nss = undefined;\n\n\t\tif (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {\n\t\t\tuuidComponents.error = uuidComponents.error || \"UUID is not valid.\";\n\t\t}\n\n\t\treturn uuidComponents;\n\t},\n\n\tserialize : function (uuidComponents:UUIDComponents, options:URIOptions):URNComponents {\n\t\tconst urnComponents = uuidComponents as URNComponents;\n\t\t//normalize UUID\n\t\turnComponents.nss = (uuidComponents.uuid || \"\").toLowerCase();\n\t\treturn urnComponents;\n\t},\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { pctEncChar, SCHEMES } from \"../uri\";\n\nexport interface URNComponents extends URIComponents {\n\tnid?:string;\n\tnss?:string;\n}\n\nexport interface URNOptions extends URIOptions {\n\tnid?:string;\n}\n\nconst NID$ = \"(?:[0-9A-Za-z][0-9A-Za-z\\\\-]{1,31})\";\nconst PCT_ENCODED$ = \"(?:\\\\%[0-9A-Fa-f]{2})\";\nconst TRANS$$ = \"[0-9A-Za-z\\\\(\\\\)\\\\+\\\\,\\\\-\\\\.\\\\:\\\\=\\\\@\\\\;\\\\$\\\\_\\\\!\\\\*\\\\'\\\\/\\\\?\\\\#]\";\nconst NSS$ = \"(?:(?:\" + PCT_ENCODED$ + \"|\" + TRANS$$ + \")+)\";\nconst URN_SCHEME = new RegExp(\"^urn\\\\:(\" + NID$ + \")$\");\nconst URN_PATH = new RegExp(\"^(\" + NID$ + \")\\\\:(\" + NSS$ + \")$\");\nconst URN_PARSE = /^([^\\:]+)\\:(.*)/;\nconst URN_EXCLUDED = /[\\x00-\\x20\\\\\\\"\\&\\<\\>\\[\\]\\^\\`\\{\\|\\}\\~\\x7F-\\xFF]/g;\n\n//RFC 2141\nconst handler:URISchemeHandler<URNComponents,URNOptions> = {\n\tscheme : \"urn\",\n\n\tparse : function (components:URIComponents, options:URNOptions):URNComponents {\n\t\tconst matches = components.path && components.path.match(URN_PARSE);\n\t\tlet urnComponents = components as URNComponents;\n\n\t\tif (matches) {\n\t\t\tconst scheme = options.scheme || urnComponents.scheme || \"urn\";\n\t\t\tconst nid = matches[1].toLowerCase();\n\t\t\tconst nss = matches[2];\n\t\t\tconst urnScheme = `${scheme}:${options.nid || nid}`;\n\t\t\tconst schemeHandler = SCHEMES[urnScheme];\n\n\t\t\turnComponents.nid = nid;\n\t\t\turnComponents.nss = nss;\n\t\t\turnComponents.path = undefined;\n\n\t\t\tif (schemeHandler) {\n\t\t\t\turnComponents = schemeHandler.parse(urnComponents, options) as URNComponents;\n\t\t\t}\n\t\t} else {\n\t\t\turnComponents.error = urnComponents.error || \"URN can not be parsed.\";\n\t\t}\n\n\t\treturn urnComponents;\n\t},\n\n\tserialize : function (urnComponents:URNComponents, options:URNOptions):URIComponents {\n\t\tconst scheme = options.scheme || urnComponents.scheme || \"urn\";\n\t\tconst nid = urnComponents.nid;\n\t\tconst urnScheme = `${scheme}:${options.nid || nid}`;\n\t\tconst schemeHandler = SCHEMES[urnScheme];\n\n\t\tif (schemeHandler) {\n\t\t\turnComponents = schemeHandler.serialize(urnComponents, options) as URNComponents;\n\t\t}\n\n\t\tconst uriComponents = urnComponents as URIComponents;\n\t\tconst nss = urnComponents.nss;\n\t\turiComponents.path = `${nid || options.nid}:${nss}`;\n\n\t\treturn uriComponents;\n\t},\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { pctEncChar, pctDecChars, unescapeComponent } from \"../uri\";\nimport punycode from \"punycode\";\nimport { merge, subexp, toUpperCase, toArray } from \"../util\";\n\nexport interface MailtoHeaders {\n\t[hfname:string]:string\n}\n\nexport interface MailtoComponents extends URIComponents {\n\tto:Array<string>,\n\theaders?:MailtoHeaders,\n\tsubject?:string,\n\tbody?:string\n}\n\nconst O:MailtoHeaders = {};\nconst isIRI = true;\n\n//RFC 3986\nconst UNRESERVED$$ = \"[A-Za-z0-9\\\\-\\\\.\\\\_\\\\~\" + (isIRI ? \"\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF\" : \"\") + \"]\";\nconst HEXDIG$$ = \"[0-9A-Fa-f]\";  //case-insensitive\nconst PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$));  //expanded\n\n//RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =\n//const ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\#\\\\$\\\\%\\\\&\\\\'\\\\*\\\\+\\\\-\\\\/\\\\=\\\\?\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QTEXT$$ = \"[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x7F]\";  //(%d1-8 / %d11-12 / %d14-31 / %d127)\n//const QTEXT$$ = merge(\"[\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E]\", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext\n//const VCHAR$$ = \"[\\\\x21-\\\\x7E]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QP$ = subexp(\"\\\\\\\\\" + merge(\"[\\\\x00\\\\x0D\\\\x0A]\", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext\n//const FWS$ = subexp(subexp(WSP$$ + \"*\" + \"\\\\x0D\\\\x0A\") + \"?\" + WSP$$ + \"+\");\n//const QUOTED_PAIR$ = subexp(subexp(\"\\\\\\\\\" + subexp(VCHAR$$ + \"|\" + WSP$$)) + \"|\" + OBS_QP$);\n//const QUOTED_STRING$ = subexp('\\\\\"' + subexp(FWS$ + \"?\" + QCONTENT$) + \"*\" + FWS$ + \"?\" + '\\\\\"');\nconst ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\$\\\\%\\\\'\\\\*\\\\+\\\\-\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\nconst QTEXT$$ = \"[\\\\!\\\\$\\\\%\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.0-9\\\\<\\\\>A-Z\\\\x5E-\\\\x7E]\";\nconst VCHAR$$ = merge(QTEXT$$, \"[\\\\\\\"\\\\\\\\]\");\nconst DOT_ATOM_TEXT$ = subexp(ATEXT$$ + \"+\" + subexp(\"\\\\.\" + ATEXT$$ + \"+\") + \"*\");\nconst QUOTED_PAIR$ = subexp(\"\\\\\\\\\" + VCHAR$$);\nconst QCONTENT$ = subexp(QTEXT$$ + \"|\" + QUOTED_PAIR$);\nconst QUOTED_STRING$ = subexp('\\\\\"' + QCONTENT$ + \"*\" + '\\\\\"');\n\n//RFC 6068\nconst DTEXT_NO_OBS$$ = \"[\\\\x21-\\\\x5A\\\\x5E-\\\\x7E]\";  //%d33-90 / %d94-126\nconst SOME_DELIMS$$ = \"[\\\\!\\\\$\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\:\\\\@]\";\nconst QCHAR$ = subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$ + \"|\" + SOME_DELIMS$$);\nconst DOMAIN$ = subexp(DOT_ATOM_TEXT$ + \"|\" + \"\\\\[\" + DTEXT_NO_OBS$$ + \"*\" + \"\\\\]\");\nconst LOCAL_PART$ = subexp(DOT_ATOM_TEXT$ + \"|\" + QUOTED_STRING$);\nconst ADDR_SPEC$ = subexp(LOCAL_PART$ + \"\\\\@\" + DOMAIN$);\nconst TO$ = subexp(ADDR_SPEC$ + subexp(\"\\\\,\" + ADDR_SPEC$) + \"*\");\nconst HFNAME$ = subexp(QCHAR$ + \"*\");\nconst HFVALUE$ = HFNAME$;\nconst HFIELD$ = subexp(HFNAME$ + \"\\\\=\" + HFVALUE$);\nconst HFIELDS2$ = subexp(HFIELD$ + subexp(\"\\\\&\" + HFIELD$) + \"*\");\nconst HFIELDS$ = subexp(\"\\\\?\" + HFIELDS2$);\nconst MAILTO_URI = new RegExp(\"^mailto\\\\:\" + TO$ + \"?\" + HFIELDS$ + \"?$\");\n\nconst UNRESERVED = new RegExp(UNRESERVED$$, \"g\");\nconst PCT_ENCODED = new RegExp(PCT_ENCODED$, \"g\");\nconst NOT_LOCAL_PART = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", '[\\\\\"]', VCHAR$$), \"g\");\nconst NOT_DOMAIN = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", \"[\\\\[]\", DTEXT_NO_OBS$$, \"[\\\\]]\"), \"g\");\nconst NOT_HFNAME = new RegExp(merge(\"[^]\", UNRESERVED$$, SOME_DELIMS$$), \"g\");\nconst NOT_HFVALUE = NOT_HFNAME;\nconst TO = new RegExp(\"^\" + TO$ + \"$\");\nconst HFIELDS = new RegExp(\"^\" + HFIELDS2$ + \"$\");\n\nfunction decodeUnreserved(str:string):string {\n\tconst decStr = pctDecChars(str);\n\treturn (!decStr.match(UNRESERVED) ? str : decStr);\n}\n\nconst handler:URISchemeHandler<MailtoComponents> =  {\n\tscheme : \"mailto\",\n\n\tparse : function (components:URIComponents, options:URIOptions):MailtoComponents {\n\t\tconst mailtoComponents = components as MailtoComponents;\n\t\tconst to = mailtoComponents.to = (mailtoComponents.path ? mailtoComponents.path.split(\",\") : []);\n\t\tmailtoComponents.path = undefined;\n\n\t\tif (mailtoComponents.query) {\n\t\t\tlet unknownHeaders = false\n\t\t\tconst headers:MailtoHeaders = {};\n\t\t\tconst hfields = mailtoComponents.query.split(\"&\");\n\n\t\t\tfor (let x = 0, xl = hfields.length; x < xl; ++x) {\n\t\t\t\tconst hfield = hfields[x].split(\"=\");\n\n\t\t\t\tswitch (hfield[0]) {\n\t\t\t\t\tcase \"to\":\n\t\t\t\t\t\tconst toAddrs = hfield[1].split(\",\");\n\t\t\t\t\t\tfor (let x = 0, xl = toAddrs.length; x < xl; ++x) {\n\t\t\t\t\t\t\tto.push(toAddrs[x]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"subject\":\n\t\t\t\t\t\tmailtoComponents.subject = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"body\":\n\t\t\t\t\t\tmailtoComponents.body = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tunknownHeaders = true;\n\t\t\t\t\t\theaders[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (unknownHeaders) mailtoComponents.headers = headers;\n\t\t}\n\n\t\tmailtoComponents.query = undefined;\n\n\t\tfor (let x = 0, xl = to.length; x < xl; ++x) {\n\t\t\tconst addr = to[x].split(\"@\");\n\n\t\t\taddr[0] = unescapeComponent(addr[0]);\n\n\t\t\tif (!options.unicodeSupport) {\n\t\t\t\t//convert Unicode IDN -> ASCII IDN\n\t\t\t\ttry {\n\t\t\t\t\taddr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tmailtoComponents.error = mailtoComponents.error || \"Email address's domain name can not be converted to ASCII via punycode: \" + e;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\taddr[1] = unescapeComponent(addr[1], options).toLowerCase();\n\t\t\t}\n\n\t\t\tto[x] = addr.join(\"@\");\n\t\t}\n\n\t\treturn mailtoComponents;\n\t},\n\n\tserialize : function (mailtoComponents:MailtoComponents, options:URIOptions):URIComponents {\n\t\tconst components = mailtoComponents as URIComponents;\n\t\tconst to = toArray(mailtoComponents.to);\n\t\tif (to) {\n\t\t\tfor (let x = 0, xl = to.length; x < xl; ++x) {\n\t\t\t\tconst toAddr = String(to[x]);\n\t\t\t\tconst atIdx = toAddr.lastIndexOf(\"@\");\n\t\t\t\tconst localPart = (toAddr.slice(0, atIdx)).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);\n\t\t\t\tlet domain = toAddr.slice(atIdx + 1);\n\n\t\t\t\t//convert IDN via punycode\n\t\t\t\ttry {\n\t\t\t\t\tdomain = (!options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcomponents.error = components.error || \"Email address's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n\t\t\t\t}\n\n\t\t\t\tto[x] = localPart + \"@\" + domain;\n\t\t\t}\n\n\t\t\tcomponents.path = to.join(\",\");\n\t\t}\n\n\t\tconst headers = mailtoComponents.headers = mailtoComponents.headers || {};\n\n\t\tif (mailtoComponents.subject) headers[\"subject\"] = mailtoComponents.subject;\n\t\tif (mailtoComponents.body) headers[\"body\"] = mailtoComponents.body;\n\n\t\tconst fields = [];\n\t\tfor (const name in headers) {\n\t\t\tif (headers[name] !== O[name]) {\n\t\t\t\tfields.push(\n\t\t\t\t\tname.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) +\n\t\t\t\t\t\"=\" +\n\t\t\t\t\theaders[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (fields.length) {\n\t\t\tcomponents.query = fields.join(\"&\");\n\t\t}\n\n\t\treturn components;\n\t}\n}\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport ws from \"./ws\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"wss\",\n\tdomainHost : ws.domainHost,\n\tparse : ws.parse,\n\tserialize : ws.serialize\n}\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\n\nexport interface WSComponents extends URIComponents {\n\tresourceName?: string;\n\tsecure?: boolean;\n}\n\nfunction isSecure(wsComponents:WSComponents):boolean {\n\treturn typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === \"wss\";\n}\n\n//RFC 6455\nconst handler:URISchemeHandler = {\n\tscheme : \"ws\",\n\n\tdomainHost : true,\n\n\tparse : function (components:URIComponents, options:URIOptions):WSComponents {\n\t\tconst wsComponents = components as WSComponents;\n\n\t\t//indicate if the secure flag is set\n\t\twsComponents.secure = isSecure(wsComponents);\n\n\t\t//construct resouce name\n\t\twsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');\n\t\twsComponents.path = undefined;\n\t\twsComponents.query = undefined;\n\n\t\treturn wsComponents;\n\t},\n\n\tserialize : function (wsComponents:WSComponents, options:URIOptions):URIComponents {\n\t\t//normalize the default port\n\t\tif (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === \"\") {\n\t\t\twsComponents.port = undefined;\n\t\t}\n\n\t\t//ensure scheme matches secure flag\n\t\tif (typeof wsComponents.secure === 'boolean') {\n\t\t\twsComponents.scheme = (wsComponents.secure ? 'wss' : 'ws');\n\t\t\twsComponents.secure = undefined;\n\t\t}\n\n\t\t//reconstruct path from resource name\n\t\tif (wsComponents.resourceName) {\n\t\t\tconst [path, query] = wsComponents.resourceName.split('?');\n\t\t\twsComponents.path = (path && path !== '/' ? path : undefined);\n\t\t\twsComponents.query = query;\n\t\t\twsComponents.resourceName = undefined;\n\t\t}\n\n\t\t//forbid fragment component\n\t\twsComponents.fragment = undefined;\n\n\t\treturn wsComponents;\n\t}\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport http from \"./http\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"https\",\n\tdomainHost : http.domainHost,\n\tparse : http.parse,\n\tserialize : http.serialize\n}\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"http\",\n\n\tdomainHost : true,\n\n\tparse : function (components:URIComponents, options:URIOptions):URIComponents {\n\t\t//report missing host\n\t\tif (!components.host) {\n\t\t\tcomponents.error = components.error || \"HTTP URIs must have a host.\";\n\t\t}\n\n\t\treturn components;\n\t},\n\n\tserialize : function (components:URIComponents, options:URIOptions):URIComponents {\n\t\tconst secure = String(components.scheme).toLowerCase() === \"https\";\n\n\t\t//normalize the default port\n\t\tif (components.port === (secure ? 443 : 80) || components.port === \"\") {\n\t\t\tcomponents.port = undefined;\n\t\t}\n\t\t\n\t\t//normalize the empty path\n\t\tif (!components.path) {\n\t\t\tcomponents.path = \"/\";\n\t\t}\n\n\t\t//NOTE: We do not parse query strings for HTTP URIs\n\t\t//as WWW Form Url Encoded query strings are part of the HTML4+ spec,\n\t\t//and not the HTTP spec.\n\n\t\treturn components;\n\t}\n};\n\nexport default handler;","/**\n * URI.js\n *\n * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/uri-js\n */\n\n/**\n * Copyright 2011 Gary Court. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are\n * permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice, this list of\n *       conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above copyright notice, this list\n *       of conditions and the following disclaimer in the documentation and/or other materials\n *       provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation are those of the\n * authors and should not be interpreted as representing official policies, either expressed\n * or implied, of Gary Court.\n */\n\nimport URI_PROTOCOL from \"./regexps-uri\";\nimport IRI_PROTOCOL from \"./regexps-iri\";\nimport punycode from \"punycode\";\nimport { toUpperCase, typeOf, assign } from \"./util\";\n\nexport interface URIComponents {\n\tscheme?:string;\n\tuserinfo?:string;\n\thost?:string;\n\tport?:number|string;\n\tpath?:string;\n\tquery?:string;\n\tfragment?:string;\n\treference?:string;\n\terror?:string;\n}\n\nexport interface URIOptions {\n\tscheme?:string;\n\treference?:string;\n\ttolerant?:boolean;\n\tabsolutePath?:boolean;\n\tiri?:boolean;\n\tunicodeSupport?:boolean;\n\tdomainHost?:boolean;\n}\n\nexport interface URISchemeHandler<Components extends URIComponents = URIComponents, Options extends URIOptions = URIOptions, ParentComponents extends URIComponents = URIComponents> {\n\tscheme:string;\n\tparse(components:ParentComponents, options:Options):Components;\n\tserialize(components:Components, options:Options):ParentComponents;\n\tunicodeSupport?:boolean;\n\tdomainHost?:boolean;\n\tabsolutePath?:boolean;\n}\n\nexport interface URIRegExps {\n\tNOT_SCHEME : RegExp,\n\tNOT_USERINFO : RegExp,\n\tNOT_HOST : RegExp,\n\tNOT_PATH : RegExp,\n\tNOT_PATH_NOSCHEME : RegExp,\n\tNOT_QUERY : RegExp,\n\tNOT_FRAGMENT : RegExp,\n\tESCAPE : RegExp,\n\tUNRESERVED : RegExp,\n\tOTHER_CHARS : RegExp,\n\tPCT_ENCODED : RegExp,\n\tIPV4ADDRESS : RegExp,\n\tIPV6ADDRESS : RegExp,\n}\n\nexport const SCHEMES:{[scheme:string]:URISchemeHandler} = {};\n\nexport function pctEncChar(chr:string):string {\n\tconst c = chr.charCodeAt(0);\n\tlet e:string;\n\n\tif (c < 16) e = \"%0\" + c.toString(16).toUpperCase();\n\telse if (c < 128) e = \"%\" + c.toString(16).toUpperCase();\n\telse if (c < 2048) e = \"%\" + ((c >> 6) | 192).toString(16).toUpperCase() + \"%\" + ((c & 63) | 128).toString(16).toUpperCase();\n\telse e = \"%\" + ((c >> 12) | 224).toString(16).toUpperCase() + \"%\" + (((c >> 6) & 63) | 128).toString(16).toUpperCase() + \"%\" + ((c & 63) | 128).toString(16).toUpperCase();\n\n\treturn e;\n}\n\nexport function pctDecChars(str:string):string {\n\tlet newStr = \"\";\n\tlet i = 0;\n\tconst il = str.length;\n\n\twhile (i < il) {\n\t\tconst c = parseInt(str.substr(i + 1, 2), 16);\n\n\t\tif (c < 128) {\n\t\t\tnewStr += String.fromCharCode(c);\n\t\t\ti += 3;\n\t\t}\n\t\telse if (c >= 194 && c < 224) {\n\t\t\tif ((il - i) >= 6) {\n\t\t\t\tconst c2 = parseInt(str.substr(i + 4, 2), 16);\n\t\t\t\tnewStr += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n\t\t\t} else {\n\t\t\t\tnewStr += str.substr(i, 6);\n\t\t\t}\n\t\t\ti += 6;\n\t\t}\n\t\telse if (c >= 224) {\n\t\t\tif ((il - i) >= 9) {\n\t\t\t\tconst c2 = parseInt(str.substr(i + 4, 2), 16);\n\t\t\t\tconst c3 = parseInt(str.substr(i + 7, 2), 16);\n\t\t\t\tnewStr += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\t\t\t} else {\n\t\t\t\tnewStr += str.substr(i, 9);\n\t\t\t}\n\t\t\ti += 9;\n\t\t}\n\t\telse {\n\t\t\tnewStr += str.substr(i, 3);\n\t\t\ti += 3;\n\t\t}\n\t}\n\n\treturn newStr;\n}\n\nfunction _normalizeComponentEncoding(components:URIComponents, protocol:URIRegExps) {\n\tfunction decodeUnreserved(str:string):string {\n\t\tconst decStr = pctDecChars(str);\n\t\treturn (!decStr.match(protocol.UNRESERVED) ? str : decStr);\n\t}\n\n\tif (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, \"\");\n\tif (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace((components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME), pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\n\treturn components;\n};\n\nfunction _stripLeadingZeros(str:string):string {\n\treturn str.replace(/^0*(.*)/, \"$1\") || \"0\";\n}\n\nfunction _normalizeIPv4(host:string, protocol:URIRegExps):string {\n\tconst matches = host.match(protocol.IPV4ADDRESS) || [];\n\tconst [, address] = matches;\n\t\n\tif (address) {\n\t\treturn address.split(\".\").map(_stripLeadingZeros).join(\".\");\n\t} else {\n\t\treturn host;\n\t}\n}\n\nfunction _normalizeIPv6(host:string, protocol:URIRegExps):string {\n\tconst matches = host.match(protocol.IPV6ADDRESS) || [];\n\tconst [, address, zone] = matches;\n\n\tif (address) {\n\t\tconst [last, first] = address.toLowerCase().split('::').reverse();\n\t\tconst firstFields = first ? first.split(\":\").map(_stripLeadingZeros) : [];\n\t\tconst lastFields = last.split(\":\").map(_stripLeadingZeros);\n\t\tconst isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);\n\t\tconst fieldCount = isLastFieldIPv4Address ? 7 : 8;\n\t\tconst lastFieldsStart = lastFields.length - fieldCount;\n\t\tconst fields = Array<string>(fieldCount);\n\n\t\tfor (let x = 0; x < fieldCount; ++x) {\n\t\t\tfields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';\n\t\t}\n\n\t\tif (isLastFieldIPv4Address) {\n\t\t\tfields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);\n\t\t}\n\n\t\tconst allZeroFields = fields.reduce<Array<{index:number,length:number}>>((acc, field, index) => {\n\t\t\tif (!field || field === \"0\") {\n\t\t\t\tconst lastLongest = acc[acc.length - 1];\n\t\t\t\tif (lastLongest && lastLongest.index + lastLongest.length === index) {\n\t\t\t\t\tlastLongest.length++;\n\t\t\t\t} else {\n\t\t\t\t\tacc.push({ index, length : 1 });\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, []);\n\n\t\tconst longestZeroFields = allZeroFields.sort((a, b) => b.length - a.length)[0];\n\n\t\tlet newHost:string;\n\t\tif (longestZeroFields && longestZeroFields.length > 1) {\n\t\t\tconst newFirst = fields.slice(0, longestZeroFields.index) ;\n\t\t\tconst newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);\n\t\t\tnewHost = newFirst.join(\":\") + \"::\" + newLast.join(\":\");\n\t\t} else {\n\t\t\tnewHost = fields.join(\":\");\n\t\t}\n\n\t\tif (zone) {\n\t\t\tnewHost += \"%\" + zone;\n\t\t}\n\n\t\treturn newHost;\n\t} else {\n\t\treturn host;\n\t}\n}\n\nconst URI_PARSE = /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:([^\\/?#@]*)@)?(\\[[^\\/?#\\]]+\\]|[^\\/?#:]*)(?:\\:(\\d*))?))?([^?#]*)(?:\\?([^#]*))?(?:#((?:.|\\n|\\r)*))?/i;\nconst NO_MATCH_IS_UNDEFINED = (<RegExpMatchArray>(\"\").match(/(){0}/))[1] === undefined;\n\nexport function parse(uriString:string, options:URIOptions = {}):URIComponents {\n\tconst components:URIComponents = {};\n\tconst protocol = (options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL);\n\n\tif (options.reference === \"suffix\") uriString = (options.scheme ? options.scheme + \":\" : \"\") + \"//\" + uriString;\n\n\tconst matches = uriString.match(URI_PARSE);\n\n\tif (matches) {\n\t\tif (NO_MATCH_IS_UNDEFINED) {\n\t\t\t//store each component\n\t\t\tcomponents.scheme = matches[1];\n\t\t\tcomponents.userinfo = matches[3];\n\t\t\tcomponents.host = matches[4];\n\t\t\tcomponents.port = parseInt(matches[5], 10);\n\t\t\tcomponents.path = matches[6] || \"\";\n\t\t\tcomponents.query = matches[7];\n\t\t\tcomponents.fragment = matches[8];\n\n\t\t\t//fix port number\n\t\t\tif (isNaN(components.port)) {\n\t\t\t\tcomponents.port = matches[5];\n\t\t\t}\n\t\t} else {  //IE FIX for improper RegExp matching\n\t\t\t//store each component\n\t\t\tcomponents.scheme = matches[1] || undefined;\n\t\t\tcomponents.userinfo = (uriString.indexOf(\"@\") !== -1 ? matches[3] : undefined);\n\t\t\tcomponents.host = (uriString.indexOf(\"//\") !== -1 ? matches[4] : undefined);\n\t\t\tcomponents.port = parseInt(matches[5], 10);\n\t\t\tcomponents.path = matches[6] || \"\";\n\t\t\tcomponents.query = (uriString.indexOf(\"?\") !== -1 ? matches[7] : undefined);\n\t\t\tcomponents.fragment = (uriString.indexOf(\"#\") !== -1 ? matches[8] : undefined);\n\n\t\t\t//fix port number\n\t\t\tif (isNaN(components.port)) {\n\t\t\t\tcomponents.port = (uriString.match(/\\/\\/(?:.|\\n)*\\:(?:\\/|\\?|\\#|$)/) ? matches[4] : undefined);\n\t\t\t}\n\t\t}\n\n\t\tif (components.host) {\n\t\t\t//normalize IP hosts\n\t\t\tcomponents.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);\n\t\t}\n\n\t\t//determine reference type\n\t\tif (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {\n\t\t\tcomponents.reference = \"same-document\";\n\t\t} else if (components.scheme === undefined) {\n\t\t\tcomponents.reference = \"relative\";\n\t\t} else if (components.fragment === undefined) {\n\t\t\tcomponents.reference = \"absolute\";\n\t\t} else {\n\t\t\tcomponents.reference = \"uri\";\n\t\t}\n\n\t\t//check for reference errors\n\t\tif (options.reference && options.reference !== \"suffix\" && options.reference !== components.reference) {\n\t\t\tcomponents.error = components.error || \"URI is not a \" + options.reference + \" reference.\";\n\t\t}\n\n\t\t//find scheme handler\n\t\tconst schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n\n\t\t//check if scheme can't handle IRIs\n\t\tif (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n\t\t\t//if host component is a domain name\n\t\t\tif (components.host && (options.domainHost || (schemeHandler && schemeHandler.domainHost))) {\n\t\t\t\t//convert Unicode IDN -> ASCII IDN\n\t\t\t\ttry {\n\t\t\t\t\tcomponents.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcomponents.error = components.error || \"Host's domain name can not be converted to ASCII via punycode: \" + e;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//convert IRI -> URI\n\t\t\t_normalizeComponentEncoding(components, URI_PROTOCOL);\n\t\t} else {\n\t\t\t//normalize encodings\n\t\t\t_normalizeComponentEncoding(components, protocol);\n\t\t}\n\n\t\t//perform scheme specific parsing\n\t\tif (schemeHandler && schemeHandler.parse) {\n\t\t\tschemeHandler.parse(components, options);\n\t\t}\n\t} else {\n\t\tcomponents.error = components.error || \"URI can not be parsed.\";\n\t}\n\n\treturn components;\n};\n\nfunction _recomposeAuthority(components:URIComponents, options:URIOptions):string|undefined {\n\tconst protocol = (options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL);\n\tconst uriTokens:Array<string> = [];\n\n\tif (components.userinfo !== undefined) {\n\t\turiTokens.push(components.userinfo);\n\t\turiTokens.push(\"@\");\n\t}\n\n\tif (components.host !== undefined) {\n\t\t//normalize IP hosts, add brackets and escape zone separator for IPv6\n\t\turiTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, (_, $1, $2) => \"[\" + $1 + ($2 ? \"%25\" + $2 : \"\") + \"]\"));\n\t}\n\n\tif (typeof components.port === \"number\" || typeof components.port === \"string\") {\n\t\turiTokens.push(\":\");\n\t\turiTokens.push(String(components.port));\n\t}\n\n\treturn uriTokens.length ? uriTokens.join(\"\") : undefined;\n};\n\nconst RDS1 = /^\\.\\.?\\//;\nconst RDS2 = /^\\/\\.(\\/|$)/;\nconst RDS3 = /^\\/\\.\\.(\\/|$)/;\nconst RDS4 = /^\\.\\.?$/;\nconst RDS5 = /^\\/?(?:.|\\n)*?(?=\\/|$)/;\n\nexport function removeDotSegments(input:string):string {\n\tconst output:Array<string> = [];\n\n\twhile (input.length) {\n\t\tif (input.match(RDS1)) {\n\t\t\tinput = input.replace(RDS1, \"\");\n\t\t} else if (input.match(RDS2)) {\n\t\t\tinput = input.replace(RDS2, \"/\");\n\t\t} else if (input.match(RDS3)) {\n\t\t\tinput = input.replace(RDS3, \"/\");\n\t\t\toutput.pop();\n\t\t} else if (input === \".\" || input === \"..\") {\n\t\t\tinput = \"\";\n\t\t} else {\n\t\t\tconst im = input.match(RDS5);\n\t\t\tif (im) {\n\t\t\t\tconst s = im[0];\n\t\t\t\tinput = input.slice(s.length);\n\t\t\t\toutput.push(s);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unexpected dot segment condition\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn output.join(\"\");\n};\n\nexport function serialize(components:URIComponents, options:URIOptions = {}):string {\n\tconst protocol = (options.iri ? IRI_PROTOCOL : URI_PROTOCOL);\n\tconst uriTokens:Array<string> = [];\n\n\t//find scheme handler\n\tconst schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n\n\t//perform scheme specific serialization\n\tif (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);\n\n\tif (components.host) {\n\t\t//if host component is an IPv6 address\n\t\tif (protocol.IPV6ADDRESS.test(components.host)) {\n\t\t\t//TODO: normalize IPv6 address as per RFC 5952\n\t\t}\n\n\t\t//if host component is a domain name\n\t\telse if (options.domainHost || (schemeHandler && schemeHandler.domainHost)) {\n\t\t\t//convert IDN via punycode\n\t\t\ttry {\n\t\t\t\tcomponents.host = (!options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host));\n\t\t\t} catch (e) {\n\t\t\t\tcomponents.error = components.error || \"Host's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n\t\t\t}\n\t\t}\n\t}\n\n\t//normalize encoding\n\t_normalizeComponentEncoding(components, protocol);\n\n\tif (options.reference !== \"suffix\" && components.scheme) {\n\t\turiTokens.push(components.scheme);\n\t\turiTokens.push(\":\");\n\t}\n\n\tconst authority = _recomposeAuthority(components, options);\n\tif (authority !== undefined) {\n\t\tif (options.reference !== \"suffix\") {\n\t\t\turiTokens.push(\"//\");\n\t\t}\n\n\t\turiTokens.push(authority);\n\n\t\tif (components.path && components.path.charAt(0) !== \"/\") {\n\t\t\turiTokens.push(\"/\");\n\t\t}\n\t}\n\n\tif (components.path !== undefined) {\n\t\tlet s = components.path;\n\n\t\tif (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n\t\t\ts = removeDotSegments(s);\n\t\t}\n\n\t\tif (authority === undefined) {\n\t\t\ts = s.replace(/^\\/\\//, \"/%2F\");  //don't allow the path to start with \"//\"\n\t\t}\n\n\t\turiTokens.push(s);\n\t}\n\n\tif (components.query !== undefined) {\n\t\turiTokens.push(\"?\");\n\t\turiTokens.push(components.query);\n\t}\n\n\tif (components.fragment !== undefined) {\n\t\turiTokens.push(\"#\");\n\t\turiTokens.push(components.fragment);\n\t}\n\n\treturn uriTokens.join(\"\");  //merge tokens into a string\n};\n\nexport function resolveComponents(base:URIComponents, relative:URIComponents, options:URIOptions = {}, skipNormalization?:boolean):URIComponents {\n\tconst target:URIComponents = {};\n\n\tif (!skipNormalization) {\n\t\tbase = parse(serialize(base, options), options);  //normalize base components\n\t\trelative = parse(serialize(relative, options), options);  //normalize relative components\n\t}\n\toptions = options || {};\n\n\tif (!options.tolerant && relative.scheme) {\n\t\ttarget.scheme = relative.scheme;\n\t\t//target.authority = relative.authority;\n\t\ttarget.userinfo = relative.userinfo;\n\t\ttarget.host = relative.host;\n\t\ttarget.port = relative.port;\n\t\ttarget.path = removeDotSegments(relative.path || \"\");\n\t\ttarget.query = relative.query;\n\t} else {\n\t\tif (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n\t\t\t//target.authority = relative.authority;\n\t\t\ttarget.userinfo = relative.userinfo;\n\t\t\ttarget.host = relative.host;\n\t\t\ttarget.port = relative.port;\n\t\t\ttarget.path = removeDotSegments(relative.path || \"\");\n\t\t\ttarget.query = relative.query;\n\t\t} else {\n\t\t\tif (!relative.path) {\n\t\t\t\ttarget.path = base.path;\n\t\t\t\tif (relative.query !== undefined) {\n\t\t\t\t\ttarget.query = relative.query;\n\t\t\t\t} else {\n\t\t\t\t\ttarget.query = base.query;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (relative.path.charAt(0) === \"/\") {\n\t\t\t\t\ttarget.path = removeDotSegments(relative.path);\n\t\t\t\t} else {\n\t\t\t\t\tif ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {\n\t\t\t\t\t\ttarget.path = \"/\" + relative.path;\n\t\t\t\t\t} else if (!base.path) {\n\t\t\t\t\t\ttarget.path = relative.path;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget.path = base.path.slice(0, base.path.lastIndexOf(\"/\") + 1) + relative.path;\n\t\t\t\t\t}\n\t\t\t\t\ttarget.path = removeDotSegments(target.path);\n\t\t\t\t}\n\t\t\t\ttarget.query = relative.query;\n\t\t\t}\n\t\t\t//target.authority = base.authority;\n\t\t\ttarget.userinfo = base.userinfo;\n\t\t\ttarget.host = base.host;\n\t\t\ttarget.port = base.port;\n\t\t}\n\t\ttarget.scheme = base.scheme;\n\t}\n\n\ttarget.fragment = relative.fragment;\n\n\treturn target;\n};\n\nexport function resolve(baseURI:string, relativeURI:string, options?:URIOptions):string {\n\tconst schemelessOptions = assign({ scheme : 'null' }, options);\n\treturn serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);\n};\n\nexport function normalize(uri:string, options?:URIOptions):string;\nexport function normalize(uri:URIComponents, options?:URIOptions):URIComponents;\nexport function normalize(uri:any, options?:URIOptions):any {\n\tif (typeof uri === \"string\") {\n\t\turi = serialize(parse(uri, options), options);\n\t} else if (typeOf(uri) === \"object\") {\n\t\turi = parse(serialize(<URIComponents>uri, options), options);\n\t}\n\n\treturn uri;\n};\n\nexport function equal(uriA:string, uriB:string, options?: URIOptions):boolean;\nexport function equal(uriA:URIComponents, uriB:URIComponents, options?:URIOptions):boolean;\nexport function equal(uriA:any, uriB:any, options?:URIOptions):boolean {\n\tif (typeof uriA === \"string\") {\n\t\turiA = serialize(parse(uriA, options), options);\n\t} else if (typeOf(uriA) === \"object\") {\n\t\turiA = serialize(<URIComponents>uriA, options);\n\t}\n\n\tif (typeof uriB === \"string\") {\n\t\turiB = serialize(parse(uriB, options), options);\n\t} else if (typeOf(uriB) === \"object\") {\n\t\turiB = serialize(<URIComponents>uriB, options);\n\t}\n\n\treturn uriA === uriB;\n};\n\nexport function escapeComponent(str:string, options?:URIOptions):string {\n\treturn str && str.toString().replace((!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE), pctEncChar);\n};\n\nexport function unescapeComponent(str:string, options?:URIOptions):string {\n\treturn str && str.toString().replace((!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED), pctDecChars);\n};\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tconst parts = string.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tconst labels = string.split('.');\n\tconst encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = array => String.fromCodePoint(...array);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tlet oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tlet inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tlet basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue == n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.1.0',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport default punycode;\n","import { URIRegExps } from \"./uri\";\nimport { buildExps } from \"./regexps-uri\";\n\nexport default buildExps(true);\n","import { URIRegExps } from \"./uri\";\nimport { merge, subexp } from \"./util\";\n\nexport function buildExps(isIRI:boolean):URIRegExps {\n\tconst\n\t\tALPHA$$ = \"[A-Za-z]\",\n\t\tCR$ = \"[\\\\x0D]\",\n\t\tDIGIT$$ = \"[0-9]\",\n\t\tDQUOTE$$ = \"[\\\\x22]\",\n\t\tHEXDIG$$ = merge(DIGIT$$, \"[A-Fa-f]\"),  //case-insensitive\n\t\tLF$$ = \"[\\\\x0A]\",\n\t\tSP$$ = \"[\\\\x20]\",\n\t\tPCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)),  //expanded\n\t\tGEN_DELIMS$$ = \"[\\\\:\\\\/\\\\?\\\\#\\\\[\\\\]\\\\@]\",\n\t\tSUB_DELIMS$$ = \"[\\\\!\\\\$\\\\&\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\=]\",\n\t\tRESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),\n\t\tUCSCHAR$$ = isIRI ? \"[\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]\" : \"[]\",  //subset, excludes bidi control characters\n\t\tIPRIVATE$$ = isIRI ? \"[\\\\uE000-\\\\uF8FF]\" : \"[]\",  //subset\n\t\tUNRESERVED$$ = merge(ALPHA$$, DIGIT$$, \"[\\\\-\\\\.\\\\_\\\\~]\", UCSCHAR$$),\n\t\tSCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\") + \"*\"),\n\t\tUSERINFO$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\")) + \"*\"),\n\t\tDEC_OCTET$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"[1-9]\" + DIGIT$$) + \"|\" + DIGIT$$),\n\t\tDEC_OCTET_RELAXED$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"0?[1-9]\" + DIGIT$$) + \"|0?0?\" + DIGIT$$),  //relaxed parsing rules\n\t\tIPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$),\n\t\tH16$ = subexp(HEXDIG$$ + \"{1,4}\"),\n\t\tLS32$ = subexp(subexp(H16$ + \"\\\\:\" + H16$) + \"|\" + IPV4ADDRESS$),\n\t\tIPV6ADDRESS1$ = subexp(                                                            subexp(H16$ + \"\\\\:\") + \"{6}\" + LS32$), //                           6( h16 \":\" ) ls32\n\t\tIPV6ADDRESS2$ = subexp(                                                 \"\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{5}\" + LS32$), //                      \"::\" 5( h16 \":\" ) ls32\n\t\tIPV6ADDRESS3$ = subexp(subexp(                                 H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{4}\" + LS32$), //[               h16 ] \"::\" 4( h16 \":\" ) ls32\n\t\tIPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,1}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{3}\" + LS32$), //[ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n\t\tIPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,2}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{2}\" + LS32$), //[ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n\t\tIPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,3}\" + H16$) + \"?\\\\:\\\\:\" +        H16$ + \"\\\\:\"          + LS32$), //[ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n\t\tIPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,4}\" + H16$) + \"?\\\\:\\\\:\"                                + LS32$), //[ *4( h16 \":\" ) h16 ] \"::\"              ls32\n\t\tIPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,5}\" + H16$) + \"?\\\\:\\\\:\"                                + H16$ ), //[ *5( h16 \":\" ) h16 ] \"::\"              h16\n\t\tIPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,6}\" + H16$) + \"?\\\\:\\\\:\"                                       ), //[ *6( h16 \":\" ) h16 ] \"::\"\n\t\tIPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join(\"|\")),\n\t\tZONEID$ = subexp(subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$) + \"+\"),  //RFC 6874\n\t\tIPV6ADDRZ$ = subexp(IPV6ADDRESS$ + \"\\\\%25\" + ZONEID$),  //RFC 6874\n\t\tIPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + ZONEID$),  //RFC 6874, with relaxed parsing rules\n\t\tIPVFUTURE$ = subexp(\"[vV]\" + HEXDIG$$ + \"+\\\\.\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\") + \"+\"),\n\t\tIP_LITERAL$ = subexp(\"\\\\[\" + subexp(IPV6ADDRZ_RELAXED$ + \"|\" + IPV6ADDRESS$ + \"|\" + IPVFUTURE$) + \"\\\\]\"),  //RFC 6874\n\t\tREG_NAME$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$)) + \"*\"),\n\t\tHOST$ = subexp(IP_LITERAL$ + \"|\" + IPV4ADDRESS$ + \"(?!\" + REG_NAME$ + \")\" + \"|\" + REG_NAME$),\n\t\tPORT$ = subexp(DIGIT$$ + \"*\"),\n\t\tAUTHORITY$ = subexp(subexp(USERINFO$ + \"@\") + \"?\" + HOST$ + subexp(\"\\\\:\" + PORT$) + \"?\"),\n\t\tPCHAR$ = subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@]\")),\n\t\tSEGMENT$ = subexp(PCHAR$ + \"*\"),\n\t\tSEGMENT_NZ$ = subexp(PCHAR$ + \"+\"),\n\t\tSEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\@]\")) + \"+\"),\n\t\tPATH_ABEMPTY$ = subexp(subexp(\"\\\\/\" + SEGMENT$) + \"*\"),\n\t\tPATH_ABSOLUTE$ = subexp(\"\\\\/\" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + \"?\"),  //simplified\n\t\tPATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),  //simplified\n\t\tPATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),  //simplified\n\t\tPATH_EMPTY$ = \"(?!\" + PCHAR$ + \")\",\n\t\tPATH$ = subexp(PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n\t\tQUERY$ = subexp(subexp(PCHAR$ + \"|\" + merge(\"[\\\\/\\\\?]\", IPRIVATE$$)) + \"*\"),\n\t\tFRAGMENT$ = subexp(subexp(PCHAR$ + \"|[\\\\/\\\\?]\") + \"*\"),\n\t\tHIER_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n\t\tURI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n\t\tRELATIVE_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$),\n\t\tRELATIVE$ = subexp(RELATIVE_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n\t\tURI_REFERENCE$ = subexp(URI$ + \"|\" + RELATIVE$),\n\t\tABSOLUTE_URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\"),\n\n\t\tGENERIC_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tRELATIVE_REF$ = \"^(){0}\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tABSOLUTE_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?$\",\n\t\tSAMEDOC_REF$ = \"^\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tAUTHORITY_REF$ = \"^\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?$\"\n\t;\n\n\treturn {\n\t\tNOT_SCHEME : new RegExp(merge(\"[^]\", ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\"), \"g\"),\n\t\tNOT_USERINFO : new RegExp(merge(\"[^\\\\%\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_HOST : new RegExp(merge(\"[^\\\\%\\\\[\\\\]\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_PATH : new RegExp(merge(\"[^\\\\%\\\\/\\\\:\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_PATH_NOSCHEME : new RegExp(merge(\"[^\\\\%\\\\/\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_QUERY : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\", IPRIVATE$$), \"g\"),\n\t\tNOT_FRAGMENT : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\"), \"g\"),\n\t\tESCAPE : new RegExp(merge(\"[^]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tUNRESERVED : new RegExp(UNRESERVED$$, \"g\"),\n\t\tOTHER_CHARS : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, RESERVED$$), \"g\"),\n\t\tPCT_ENCODED : new RegExp(PCT_ENCODED$, \"g\"),\n\t\tIPV4ADDRESS : new RegExp(\"^(\" + IPV4ADDRESS$ + \")$\"),\n\t\tIPV6ADDRESS : new RegExp(\"^\\\\[?(\" + IPV6ADDRESS$ + \")\" + subexp(subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + \"(\" + ZONEID$ + \")\") + \"?\\\\]?$\")  //RFC 6874, with relaxed parsing rules\n\t};\n}\n\nexport default buildExps(false);\n","export function merge(...sets:Array<string>):string {\n\tif (sets.length > 1) {\n\t\tsets[0] = sets[0].slice(0, -1);\n\t\tconst xl = sets.length - 1;\n\t\tfor (let x = 1; x < xl; ++x) {\n\t\t\tsets[x] = sets[x].slice(1, -1);\n\t\t}\n\t\tsets[xl] = sets[xl].slice(1);\n\t\treturn sets.join('');\n\t} else {\n\t\treturn sets[0];\n\t}\n}\n\nexport function subexp(str:string):string {\n\treturn \"(?:\" + str + \")\";\n}\n\nexport function typeOf(o:any):string {\n\treturn o === undefined ? \"undefined\" : (o === null ? \"null\" : Object.prototype.toString.call(o).split(\" \").pop().split(\"]\").shift().toLowerCase());\n}\n\nexport function toUpperCase(str:string):string {\n\treturn str.toUpperCase();\n}\n\nexport function toArray(obj:any):Array<any> {\n\treturn obj !== undefined && obj !== null ? (obj instanceof Array ? obj : (typeof obj.length !== \"number\" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj))) : [];\n}\n\n\nexport function assign(target: object, source: any): any {\n\tconst obj = target as any;\n\tif (source) {\n\t\tfor (const key in source) {\n\t\t\tobj[key] = source[key];\n\t\t}\n\t}\n\treturn obj;\n}"]},"metadata":{},"sourceType":"script"}