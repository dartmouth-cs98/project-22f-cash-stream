{"ast":null,"code":"\"use strict\";\n\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport function ripemd160(data) {\n  return \"0x\" + hash.ripemd160().update(arrayify(data)).digest(\"hex\");\n}\nexport function sha256(data) {\n  return \"0x\" + hash.sha256().update(arrayify(data)).digest(\"hex\");\n}\nexport function sha512(data) {\n  return \"0x\" + hash.sha512().update(arrayify(data)).digest(\"hex\");\n}\nexport function computeHmac(algorithm, key, data) {\n  if (!SupportedAlgorithm[algorithm]) {\n    logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"hmac\",\n      algorithm: algorithm\n    });\n  }\n  return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}","map":{"version":3,"sources":["../src.ts/browser-sha2.ts"],"names":[],"mappings":"AAAA,YAAY;;AAEZ,OAAO,IAAI,MAAM,SAAS;AAC1B;AAEA,SAAS,QAAQ,QAAmB,sBAAsB;AAE1D,SAAS,kBAAkB,QAAQ,SAAS;AAE5C,SAAS,MAAM,QAAQ,uBAAuB;AAC9C,SAAS,OAAO,QAAQ,YAAY;AACpC,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC;AAElC,OAAM,SAAU,SAAS,CAAC,IAAe,EAAA;EACrC,OAAO,IAAI,GAAI,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAE;AACzE;AAEA,OAAM,SAAU,MAAM,CAAC,IAAe,EAAA;EAClC,OAAO,IAAI,GAAI,IAAI,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAE;AACtE;AAEA,OAAM,SAAU,MAAM,CAAC,IAAe,EAAA;EAClC,OAAO,IAAI,GAAI,IAAI,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAE;AACtE;AAEA,OAAM,SAAU,WAAW,CAAC,SAA6B,EAAE,GAAc,EAAE,IAAe,EAAA;EACtF,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,EAAE;IAChC,MAAM,CAAC,UAAU,CAAC,wBAAwB,GAAG,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC,qBAAqB,EAAE;MACzF,SAAS,EAAE,MAAM;MACjB,SAAS,EAAE;KACd,CAAC;EACL;EAED,OAAO,IAAI,GAAG,IAAI,CAAC,IAAI,CAAO,IAAK,CAAC,SAAS,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;AACvG","sourceRoot":"","sourcesContent":["\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map"]},"metadata":{},"sourceType":"module"}