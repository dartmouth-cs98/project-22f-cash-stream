{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nvar logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n  var arrayValues = null;\n  if (Array.isArray(values)) {\n    arrayValues = values;\n  } else if (values && typeof values === \"object\") {\n    var unique = {};\n    arrayValues = coders.map(function (coder) {\n      var name = coder.localName;\n      if (!name) {\n        logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n      if (unique[name]) {\n        logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n      unique[name] = true;\n      return values[name];\n    });\n  } else {\n    logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n  }\n  if (coders.length !== arrayValues.length) {\n    logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n  }\n  var staticWriter = new Writer(writer.wordSize);\n  var dynamicWriter = new Writer(writer.wordSize);\n  var updateFuncs = [];\n  coders.forEach(function (coder, index) {\n    var value = arrayValues[index];\n    if (coder.dynamic) {\n      // Get current dynamic offset (for the future pointer)\n      var dynamicOffset = dynamicWriter.length;\n      // Encode the dynamic value into the dynamicWriter\n      coder.encode(dynamicWriter, value);\n      // Prepare to populate the correct offset once we are done\n      var updateFunc = staticWriter.writeUpdatableValue();\n      updateFuncs.push(function (baseOffset) {\n        updateFunc(baseOffset + dynamicOffset);\n      });\n    } else {\n      coder.encode(staticWriter, value);\n    }\n  });\n  // Backfill all the dynamic offsets, now that we know the static length\n  updateFuncs.forEach(function (func) {\n    func(staticWriter.length);\n  });\n  var length = writer.appendWriter(staticWriter);\n  length += writer.appendWriter(dynamicWriter);\n  return length;\n}\nexport function unpack(reader, coders) {\n  var values = [];\n  // A reader anchored to this base\n  var baseReader = reader.subReader(0);\n  coders.forEach(function (coder) {\n    var value = null;\n    if (coder.dynamic) {\n      var offset = reader.readValue();\n      var offsetReader = baseReader.subReader(offset.toNumber());\n      try {\n        value = coder.decode(offsetReader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    } else {\n      try {\n        value = coder.decode(reader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    }\n    if (value != undefined) {\n      values.push(value);\n    }\n  });\n  // We only output named properties for uniquely named coders\n  var uniqueNames = coders.reduce(function (accum, coder) {\n    var name = coder.localName;\n    if (name) {\n      if (!accum[name]) {\n        accum[name] = 0;\n      }\n      accum[name]++;\n    }\n    return accum;\n  }, {});\n  // Add any named parameters (i.e. tuples)\n  coders.forEach(function (coder, index) {\n    var name = coder.localName;\n    if (!name || uniqueNames[name] !== 1) {\n      return;\n    }\n    if (name === \"length\") {\n      name = \"_length\";\n    }\n    if (values[name] != null) {\n      return;\n    }\n    var value = values[index];\n    if (value instanceof Error) {\n      Object.defineProperty(values, name, {\n        enumerable: true,\n        get: function get() {\n          throw value;\n        }\n      });\n    } else {\n      values[name] = value;\n    }\n  });\n  var _loop = function _loop(i) {\n    var value = values[i];\n    if (value instanceof Error) {\n      Object.defineProperty(values, i, {\n        enumerable: true,\n        get: function get() {\n          throw value;\n        }\n      });\n    }\n  };\n  for (var i = 0; i < values.length; i++) {\n    _loop(i);\n  }\n  return Object.freeze(values);\n}\nexport var ArrayCoder = /*#__PURE__*/function (_Coder) {\n  _inherits(ArrayCoder, _Coder);\n  var _super = _createSuper(ArrayCoder);\n  function ArrayCoder(coder, length, localName) {\n    var _this;\n    _classCallCheck(this, ArrayCoder);\n    var type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n    var dynamic = length === -1 || coder.dynamic;\n    _this = _super.call(this, \"array\", type, localName, dynamic);\n    _this.coder = coder;\n    _this.length = length;\n    return _this;\n  }\n  _createClass(ArrayCoder, [{\n    key: \"defaultValue\",\n    value: function defaultValue() {\n      // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n      var defaultChild = this.coder.defaultValue();\n      var result = [];\n      for (var i = 0; i < this.length; i++) {\n        result.push(defaultChild);\n      }\n      return result;\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(writer, value) {\n      if (!Array.isArray(value)) {\n        this._throwError(\"expected array value\", value);\n      }\n      var count = this.length;\n      if (count === -1) {\n        count = value.length;\n        writer.writeValue(value.length);\n      }\n      logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n      var coders = [];\n      for (var i = 0; i < value.length; i++) {\n        coders.push(this.coder);\n      }\n      return pack(writer, coders, value);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(reader) {\n      var count = this.length;\n      if (count === -1) {\n        count = reader.readValue().toNumber();\n        // Check that there is *roughly* enough data to ensure\n        // stray random data is not being read as a length. Each\n        // slot requires at least 32 bytes for their value (or 32\n        // bytes as a link to the data). This could use a much\n        // tighter bound, but we are erroring on the side of safety.\n        if (count * 32 > reader._data.length) {\n          logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n            length: reader._data.length,\n            count: count\n          });\n        }\n      }\n      var coders = [];\n      for (var i = 0; i < count; i++) {\n        coders.push(new AnonymousCoder(this.coder));\n      }\n      return reader.coerce(this.name, unpack(reader, coders));\n    }\n  }]);\n  return ArrayCoder;\n}(Coder);","map":{"version":3,"sources":["../../src.ts/coders/array.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n    let arrayValues = null;\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    }\n    else if (values && typeof (values) === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            if (unique[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            unique[name] = true;\n            return values[name];\n        });\n    }\n    else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\nexport function unpack(reader, coders) {\n    let values = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder) => {\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder) => {\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) {\n                accum[name] = 0;\n            }\n            accum[name]++;\n        }\n        return accum;\n    }, {});\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder, index) => {\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) {\n            return;\n        }\n        if (name === \"length\") {\n            name = \"_length\";\n        }\n        if (values[name] != null) {\n            return;\n        }\n        const value = values[index];\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n        else {\n            values[name] = value;\n        }\n    });\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n    }\n    return Object.freeze(values);\n}\nexport class ArrayCoder extends Coder {\n    constructor(coder, length, localName) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        this.coder = coder;\n        this.length = length;\n    }\n    defaultValue() {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n        const result = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n    encode(writer, value) {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        let coders = [];\n        for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder(this.coder));\n        }\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n//# sourceMappingURL=array.js.map"]},"metadata":{},"sourceType":"module"}