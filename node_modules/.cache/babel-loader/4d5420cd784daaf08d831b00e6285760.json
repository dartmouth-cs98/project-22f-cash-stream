{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexDataSlice, hexZeroPad, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from \"@ethersproject/strings\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { wordlists } from \"@ethersproject/wordlists\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar N = BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// \"Bitcoin seed\"\nvar MasterSecret = toUtf8Bytes(\"Bitcoin seed\");\nvar HardenedBit = 0x80000000;\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits) {\n  return (1 << bits) - 1 << 8 - bits;\n}\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits) {\n  return (1 << bits) - 1;\n}\nfunction bytes32(value) {\n  return hexZeroPad(hexlify(value), 32);\n}\nfunction base58check(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nfunction getWordlist(wordlist) {\n  if (wordlist == null) {\n    return wordlists[\"en\"];\n  }\n  if (typeof wordlist === \"string\") {\n    var words = wordlists[wordlist];\n    if (words == null) {\n      logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n    }\n    return words;\n  }\n  return wordlist;\n}\nvar _constructorGuard = {};\nexport var defaultPath = \"m/44'/60'/0'/0/0\";\n;\nexport var HDNode = /*#__PURE__*/function () {\n  /**\n   *  This constructor should not be called directly.\n   *\n   *  Please use:\n   *   - fromMnemonic\n   *   - fromSeed\n   */\n  function HDNode(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {\n    _classCallCheck(this, HDNode);\n    logger.checkNew(this instanceof HDNode ? this.constructor : void 0, HDNode);\n    /* istanbul ignore if */\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"HDNode constructor cannot be called directly\");\n    }\n    if (privateKey) {\n      var signingKey = new SigningKey(privateKey);\n      defineReadOnly(this, \"privateKey\", signingKey.privateKey);\n      defineReadOnly(this, \"publicKey\", signingKey.compressedPublicKey);\n    } else {\n      defineReadOnly(this, \"privateKey\", null);\n      defineReadOnly(this, \"publicKey\", hexlify(publicKey));\n    }\n    defineReadOnly(this, \"parentFingerprint\", parentFingerprint);\n    defineReadOnly(this, \"fingerprint\", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));\n    defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n    defineReadOnly(this, \"chainCode\", chainCode);\n    defineReadOnly(this, \"index\", index);\n    defineReadOnly(this, \"depth\", depth);\n    if (mnemonicOrPath == null) {\n      // From a source that does not preserve the path (e.g. extended keys)\n      defineReadOnly(this, \"mnemonic\", null);\n      defineReadOnly(this, \"path\", null);\n    } else if (typeof mnemonicOrPath === \"string\") {\n      // From a source that does not preserve the mnemonic (e.g. neutered)\n      defineReadOnly(this, \"mnemonic\", null);\n      defineReadOnly(this, \"path\", mnemonicOrPath);\n    } else {\n      // From a fully qualified source\n      defineReadOnly(this, \"mnemonic\", mnemonicOrPath);\n      defineReadOnly(this, \"path\", mnemonicOrPath.path);\n    }\n  }\n  _createClass(HDNode, [{\n    key: \"extendedKey\",\n    get: function get() {\n      // We only support the mainnet values for now, but if anyone needs\n      // testnet values, let me know. I believe current sentiment is that\n      // we should always use mainnet, and use BIP-44 to derive the network\n      //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n      //   - Testnet: public=0x043587CF, private=0x04358394\n      if (this.depth >= 256) {\n        throw new Error(\"Depth too large!\");\n      }\n      return base58check(concat([this.privateKey != null ? \"0x0488ADE4\" : \"0x0488B21E\", hexlify(this.depth), this.parentFingerprint, hexZeroPad(hexlify(this.index), 4), this.chainCode, this.privateKey != null ? concat([\"0x00\", this.privateKey]) : this.publicKey]));\n    }\n  }, {\n    key: \"neuter\",\n    value: function neuter() {\n      return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n    }\n  }, {\n    key: \"_derive\",\n    value: function _derive(index) {\n      if (index > 0xffffffff) {\n        throw new Error(\"invalid index - \" + String(index));\n      }\n      // Base path\n      var path = this.path;\n      if (path) {\n        path += \"/\" + (index & ~HardenedBit);\n      }\n      var data = new Uint8Array(37);\n      if (index & HardenedBit) {\n        if (!this.privateKey) {\n          throw new Error(\"cannot derive child of neutered node\");\n        }\n        // Data = 0x00 || ser_256(k_par)\n        data.set(arrayify(this.privateKey), 1);\n        // Hardened path\n        if (path) {\n          path += \"'\";\n        }\n      } else {\n        // Data = ser_p(point(k_par))\n        data.set(arrayify(this.publicKey));\n      }\n      // Data += ser_32(i)\n      for (var i = 24; i >= 0; i -= 8) {\n        data[33 + (i >> 3)] = index >> 24 - i & 0xff;\n      }\n      var I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));\n      var IL = I.slice(0, 32);\n      var IR = I.slice(32);\n      // The private key\n      var ki = null;\n      // The public key\n      var Ki = null;\n      if (this.privateKey) {\n        ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));\n      } else {\n        var ek = new SigningKey(hexlify(IL));\n        Ki = ek._addPoint(this.publicKey);\n      }\n      var mnemonicOrPath = path;\n      var srcMnemonic = this.mnemonic;\n      if (srcMnemonic) {\n        mnemonicOrPath = Object.freeze({\n          phrase: srcMnemonic.phrase,\n          path: path,\n          locale: srcMnemonic.locale || \"en\"\n        });\n      }\n      return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n    }\n  }, {\n    key: \"derivePath\",\n    value: function derivePath(path) {\n      var components = path.split(\"/\");\n      if (components.length === 0 || components[0] === \"m\" && this.depth !== 0) {\n        throw new Error(\"invalid path - \" + path);\n      }\n      if (components[0] === \"m\") {\n        components.shift();\n      }\n      var result = this;\n      for (var i = 0; i < components.length; i++) {\n        var component = components[i];\n        if (component.match(/^[0-9]+'$/)) {\n          var index = parseInt(component.substring(0, component.length - 1));\n          if (index >= HardenedBit) {\n            throw new Error(\"invalid path index - \" + component);\n          }\n          result = result._derive(HardenedBit + index);\n        } else if (component.match(/^[0-9]+$/)) {\n          var _index = parseInt(component);\n          if (_index >= HardenedBit) {\n            throw new Error(\"invalid path index - \" + component);\n          }\n          result = result._derive(_index);\n        } else {\n          throw new Error(\"invalid path component - \" + component);\n        }\n      }\n      return result;\n    }\n  }], [{\n    key: \"_fromSeed\",\n    value: function _fromSeed(seed, mnemonic) {\n      var seedArray = arrayify(seed);\n      if (seedArray.length < 16 || seedArray.length > 64) {\n        throw new Error(\"invalid seed\");\n      }\n      var I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));\n      return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n    }\n  }, {\n    key: \"fromMnemonic\",\n    value: function fromMnemonic(mnemonic, password, wordlist) {\n      // If a locale name was passed in, find the associated wordlist\n      wordlist = getWordlist(wordlist);\n      // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n      mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n      return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n        phrase: mnemonic,\n        path: \"m\",\n        locale: wordlist.locale\n      });\n    }\n  }, {\n    key: \"fromSeed\",\n    value: function fromSeed(seed) {\n      return HDNode._fromSeed(seed, null);\n    }\n  }, {\n    key: \"fromExtendedKey\",\n    value: function fromExtendedKey(extendedKey) {\n      var bytes = Base58.decode(extendedKey);\n      if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n        logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n      }\n      var depth = bytes[4];\n      var parentFingerprint = hexlify(bytes.slice(5, 9));\n      var index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n      var chainCode = hexlify(bytes.slice(13, 45));\n      var key = bytes.slice(45, 78);\n      switch (hexlify(bytes.slice(0, 4))) {\n        // Public Key\n        case \"0x0488b21e\":\n        case \"0x043587cf\":\n          return new HDNode(_constructorGuard, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);\n        // Private Key\n        case \"0x0488ade4\":\n        case \"0x04358394 \":\n          if (key[0] !== 0) {\n            break;\n          }\n          return new HDNode(_constructorGuard, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n      }\n      return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    }\n  }]);\n  return HDNode;\n}();\nexport function mnemonicToSeed(mnemonic, password) {\n  if (!password) {\n    password = \"\";\n  }\n  var salt = toUtf8Bytes(\"mnemonic\" + password, UnicodeNormalizationForm.NFKD);\n  return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\nexport function mnemonicToEntropy(mnemonic, wordlist) {\n  wordlist = getWordlist(wordlist);\n  logger.checkNormalize();\n  var words = wordlist.split(mnemonic);\n  if (words.length % 3 !== 0) {\n    throw new Error(\"invalid mnemonic\");\n  }\n  var entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n  var offset = 0;\n  for (var i = 0; i < words.length; i++) {\n    var index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n    if (index === -1) {\n      throw new Error(\"invalid mnemonic\");\n    }\n    for (var bit = 0; bit < 11; bit++) {\n      if (index & 1 << 10 - bit) {\n        entropy[offset >> 3] |= 1 << 7 - offset % 8;\n      }\n      offset++;\n    }\n  }\n  var entropyBits = 32 * words.length / 3;\n  var checksumBits = words.length / 3;\n  var checksumMask = getUpperMask(checksumBits);\n  var checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n    throw new Error(\"invalid checksum\");\n  }\n  return hexlify(entropy.slice(0, entropyBits / 8));\n}\nexport function entropyToMnemonic(entropy, wordlist) {\n  wordlist = getWordlist(wordlist);\n  entropy = arrayify(entropy);\n  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n    throw new Error(\"invalid entropy\");\n  }\n  var indices = [0];\n  var remainingBits = 11;\n  for (var i = 0; i < entropy.length; i++) {\n    // Consume the whole byte (with still more to go)\n    if (remainingBits > 8) {\n      indices[indices.length - 1] <<= 8;\n      indices[indices.length - 1] |= entropy[i];\n      remainingBits -= 8;\n      // This byte will complete an 11-bit index\n    } else {\n      indices[indices.length - 1] <<= remainingBits;\n      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;\n      // Start the next word\n      indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n      remainingBits += 3;\n    }\n  }\n  // Compute the checksum bits\n  var checksumBits = entropy.length / 4;\n  var checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n  // Shift the checksum into the word indices\n  indices[indices.length - 1] <<= checksumBits;\n  indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n  return wordlist.join(indices.map(function (index) {\n    return wordlist.getWord(index);\n  }));\n}\nexport function isValidMnemonic(mnemonic, wordlist) {\n  try {\n    mnemonicToEntropy(mnemonic, wordlist);\n    return true;\n  } catch (error) {}\n  return false;\n}\nexport function getAccountPath(index) {\n  if (typeof index !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n    logger.throwArgumentError(\"invalid account index\", \"index\", index);\n  }\n  return \"m/44'/60'/\".concat(index, \"'/0/0\");\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexDataSlice, hexZeroPad, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from \"@ethersproject/strings\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { wordlists } from \"@ethersproject/wordlists\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst N = BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// \"Bitcoin seed\"\nconst MasterSecret = toUtf8Bytes(\"Bitcoin seed\");\nconst HardenedBit = 0x80000000;\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits) {\n    return ((1 << bits) - 1) << (8 - bits);\n}\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits) {\n    return (1 << bits) - 1;\n}\nfunction bytes32(value) {\n    return hexZeroPad(hexlify(value), 32);\n}\nfunction base58check(data) {\n    return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nfunction getWordlist(wordlist) {\n    if (wordlist == null) {\n        return wordlists[\"en\"];\n    }\n    if (typeof (wordlist) === \"string\") {\n        const words = wordlists[wordlist];\n        if (words == null) {\n            logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n        }\n        return words;\n    }\n    return wordlist;\n}\nconst _constructorGuard = {};\nexport const defaultPath = \"m/44'/60'/0'/0/0\";\n;\nexport class HDNode {\n    /**\n     *  This constructor should not be called directly.\n     *\n     *  Please use:\n     *   - fromMnemonic\n     *   - fromSeed\n     */\n    constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {\n        logger.checkNew(new.target, HDNode);\n        /* istanbul ignore if */\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"HDNode constructor cannot be called directly\");\n        }\n        if (privateKey) {\n            const signingKey = new SigningKey(privateKey);\n            defineReadOnly(this, \"privateKey\", signingKey.privateKey);\n            defineReadOnly(this, \"publicKey\", signingKey.compressedPublicKey);\n        }\n        else {\n            defineReadOnly(this, \"privateKey\", null);\n            defineReadOnly(this, \"publicKey\", hexlify(publicKey));\n        }\n        defineReadOnly(this, \"parentFingerprint\", parentFingerprint);\n        defineReadOnly(this, \"fingerprint\", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));\n        defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n        defineReadOnly(this, \"chainCode\", chainCode);\n        defineReadOnly(this, \"index\", index);\n        defineReadOnly(this, \"depth\", depth);\n        if (mnemonicOrPath == null) {\n            // From a source that does not preserve the path (e.g. extended keys)\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", null);\n        }\n        else if (typeof (mnemonicOrPath) === \"string\") {\n            // From a source that does not preserve the mnemonic (e.g. neutered)\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", mnemonicOrPath);\n        }\n        else {\n            // From a fully qualified source\n            defineReadOnly(this, \"mnemonic\", mnemonicOrPath);\n            defineReadOnly(this, \"path\", mnemonicOrPath.path);\n        }\n    }\n    get extendedKey() {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n        if (this.depth >= 256) {\n            throw new Error(\"Depth too large!\");\n        }\n        return base58check(concat([\n            ((this.privateKey != null) ? \"0x0488ADE4\" : \"0x0488B21E\"),\n            hexlify(this.depth),\n            this.parentFingerprint,\n            hexZeroPad(hexlify(this.index), 4),\n            this.chainCode,\n            ((this.privateKey != null) ? concat([\"0x00\", this.privateKey]) : this.publicKey),\n        ]));\n    }\n    neuter() {\n        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n    }\n    _derive(index) {\n        if (index > 0xffffffff) {\n            throw new Error(\"invalid index - \" + String(index));\n        }\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n        }\n        const data = new Uint8Array(37);\n        if (index & HardenedBit) {\n            if (!this.privateKey) {\n                throw new Error(\"cannot derive child of neutered node\");\n            }\n            // Data = 0x00 || ser_256(k_par)\n            data.set(arrayify(this.privateKey), 1);\n            // Hardened path\n            if (path) {\n                path += \"'\";\n            }\n        }\n        else {\n            // Data = ser_p(point(k_par))\n            data.set(arrayify(this.publicKey));\n        }\n        // Data += ser_32(i)\n        for (let i = 24; i >= 0; i -= 8) {\n            data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);\n        }\n        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));\n        const IL = I.slice(0, 32);\n        const IR = I.slice(32);\n        // The private key\n        let ki = null;\n        // The public key\n        let Ki = null;\n        if (this.privateKey) {\n            ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));\n        }\n        else {\n            const ek = new SigningKey(hexlify(IL));\n            Ki = ek._addPoint(this.publicKey);\n        }\n        let mnemonicOrPath = path;\n        const srcMnemonic = this.mnemonic;\n        if (srcMnemonic) {\n            mnemonicOrPath = Object.freeze({\n                phrase: srcMnemonic.phrase,\n                path: path,\n                locale: (srcMnemonic.locale || \"en\")\n            });\n        }\n        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n    }\n    derivePath(path) {\n        const components = path.split(\"/\");\n        if (components.length === 0 || (components[0] === \"m\" && this.depth !== 0)) {\n            throw new Error(\"invalid path - \" + path);\n        }\n        if (components[0] === \"m\") {\n            components.shift();\n        }\n        let result = this;\n        for (let i = 0; i < components.length; i++) {\n            const component = components[i];\n            if (component.match(/^[0-9]+'$/)) {\n                const index = parseInt(component.substring(0, component.length - 1));\n                if (index >= HardenedBit) {\n                    throw new Error(\"invalid path index - \" + component);\n                }\n                result = result._derive(HardenedBit + index);\n            }\n            else if (component.match(/^[0-9]+$/)) {\n                const index = parseInt(component);\n                if (index >= HardenedBit) {\n                    throw new Error(\"invalid path index - \" + component);\n                }\n                result = result._derive(index);\n            }\n            else {\n                throw new Error(\"invalid path component - \" + component);\n            }\n        }\n        return result;\n    }\n    static _fromSeed(seed, mnemonic) {\n        const seedArray = arrayify(seed);\n        if (seedArray.length < 16 || seedArray.length > 64) {\n            throw new Error(\"invalid seed\");\n        }\n        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));\n        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n    }\n    static fromMnemonic(mnemonic, password, wordlist) {\n        // If a locale name was passed in, find the associated wordlist\n        wordlist = getWordlist(wordlist);\n        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n            phrase: mnemonic,\n            path: \"m\",\n            locale: wordlist.locale\n        });\n    }\n    static fromSeed(seed) {\n        return HDNode._fromSeed(seed, null);\n    }\n    static fromExtendedKey(extendedKey) {\n        const bytes = Base58.decode(extendedKey);\n        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n            logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n        }\n        const depth = bytes[4];\n        const parentFingerprint = hexlify(bytes.slice(5, 9));\n        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = hexlify(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n        switch (hexlify(bytes.slice(0, 4))) {\n            // Public Key\n            case \"0x0488b21e\":\n            case \"0x043587cf\":\n                return new HDNode(_constructorGuard, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);\n            // Private Key\n            case \"0x0488ade4\":\n            case \"0x04358394 \":\n                if (key[0] !== 0) {\n                    break;\n                }\n                return new HDNode(_constructorGuard, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n        }\n        return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    }\n}\nexport function mnemonicToSeed(mnemonic, password) {\n    if (!password) {\n        password = \"\";\n    }\n    const salt = toUtf8Bytes(\"mnemonic\" + password, UnicodeNormalizationForm.NFKD);\n    return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\nexport function mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = getWordlist(wordlist);\n    logger.checkNormalize();\n    const words = wordlist.split(mnemonic);\n    if ((words.length % 3) !== 0) {\n        throw new Error(\"invalid mnemonic\");\n    }\n    const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n    let offset = 0;\n    for (let i = 0; i < words.length; i++) {\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        if (index === -1) {\n            throw new Error(\"invalid mnemonic\");\n        }\n        for (let bit = 0; bit < 11; bit++) {\n            if (index & (1 << (10 - bit))) {\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\n            }\n            offset++;\n        }\n    }\n    const entropyBits = 32 * words.length / 3;\n    const checksumBits = words.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n    const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n        throw new Error(\"invalid checksum\");\n    }\n    return hexlify(entropy.slice(0, entropyBits / 8));\n}\nexport function entropyToMnemonic(entropy, wordlist) {\n    wordlist = getWordlist(wordlist);\n    entropy = arrayify(entropy);\n    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {\n        throw new Error(\"invalid entropy\");\n    }\n    const indices = [0];\n    let remainingBits = 11;\n    for (let i = 0; i < entropy.length; i++) {\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n            remainingBits -= 8;\n            // This byte will complete an 11-bit index\n        }\n        else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n            remainingBits += 3;\n        }\n    }\n    // Compute the checksum bits\n    const checksumBits = entropy.length / 4;\n    const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\n    return wordlist.join(indices.map((index) => wordlist.getWord(index)));\n}\nexport function isValidMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n        return true;\n    }\n    catch (error) { }\n    return false;\n}\nexport function getAccountPath(index) {\n    if (typeof (index) !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n        logger.throwArgumentError(\"invalid account index\", \"index\", index);\n    }\n    return `m/44'/60'/${index}'/0/0`;\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}