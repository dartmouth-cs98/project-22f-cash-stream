{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport var Formatter = /*#__PURE__*/function () {\n  function Formatter() {\n    _classCallCheck(this, Formatter);\n    this.formats = this.getDefaultFormats();\n  }\n  _createClass(Formatter, [{\n    key: \"getDefaultFormats\",\n    value: function getDefaultFormats() {\n      var _this = this;\n      var formats = {};\n      var address = this.address.bind(this);\n      var bigNumber = this.bigNumber.bind(this);\n      var blockTag = this.blockTag.bind(this);\n      var data = this.data.bind(this);\n      var hash = this.hash.bind(this);\n      var hex = this.hex.bind(this);\n      var number = this.number.bind(this);\n      var type = this.type.bind(this);\n      var strictData = function strictData(v) {\n        return _this.data(v, true);\n      };\n      formats.transaction = {\n        hash: hash,\n        type: type,\n        accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        blockHash: Formatter.allowNull(hash, null),\n        blockNumber: Formatter.allowNull(number, null),\n        transactionIndex: Formatter.allowNull(number, null),\n        confirmations: Formatter.allowNull(number, null),\n        from: address,\n        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n        // must be set\n        gasPrice: Formatter.allowNull(bigNumber),\n        maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n        maxFeePerGas: Formatter.allowNull(bigNumber),\n        gasLimit: bigNumber,\n        to: Formatter.allowNull(address, null),\n        value: bigNumber,\n        nonce: number,\n        data: data,\n        r: Formatter.allowNull(this.uint256),\n        s: Formatter.allowNull(this.uint256),\n        v: Formatter.allowNull(number),\n        creates: Formatter.allowNull(address, null),\n        raw: Formatter.allowNull(data)\n      };\n      formats.transactionRequest = {\n        from: Formatter.allowNull(address),\n        nonce: Formatter.allowNull(number),\n        gasLimit: Formatter.allowNull(bigNumber),\n        gasPrice: Formatter.allowNull(bigNumber),\n        maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n        maxFeePerGas: Formatter.allowNull(bigNumber),\n        to: Formatter.allowNull(address),\n        value: Formatter.allowNull(bigNumber),\n        data: Formatter.allowNull(strictData),\n        type: Formatter.allowNull(number),\n        accessList: Formatter.allowNull(this.accessList.bind(this), null)\n      };\n      formats.receiptLog = {\n        transactionIndex: number,\n        blockNumber: number,\n        transactionHash: hash,\n        address: address,\n        topics: Formatter.arrayOf(hash),\n        data: data,\n        logIndex: number,\n        blockHash: hash\n      };\n      formats.receipt = {\n        to: Formatter.allowNull(this.address, null),\n        from: Formatter.allowNull(this.address, null),\n        contractAddress: Formatter.allowNull(address, null),\n        transactionIndex: number,\n        // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n        root: Formatter.allowNull(hex),\n        gasUsed: bigNumber,\n        logsBloom: Formatter.allowNull(data),\n        blockHash: hash,\n        transactionHash: hash,\n        logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n        blockNumber: number,\n        confirmations: Formatter.allowNull(number, null),\n        cumulativeGasUsed: bigNumber,\n        effectiveGasPrice: Formatter.allowNull(bigNumber),\n        status: Formatter.allowNull(number),\n        type: type\n      };\n      formats.block = {\n        hash: Formatter.allowNull(hash),\n        parentHash: hash,\n        number: number,\n        timestamp: number,\n        nonce: Formatter.allowNull(hex),\n        difficulty: this.difficulty.bind(this),\n        gasLimit: bigNumber,\n        gasUsed: bigNumber,\n        miner: Formatter.allowNull(address),\n        extraData: data,\n        transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n        baseFeePerGas: Formatter.allowNull(bigNumber)\n      };\n      formats.blockWithTransactions = shallowCopy(formats.block);\n      formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n      formats.filter = {\n        fromBlock: Formatter.allowNull(blockTag, undefined),\n        toBlock: Formatter.allowNull(blockTag, undefined),\n        blockHash: Formatter.allowNull(hash, undefined),\n        address: Formatter.allowNull(address, undefined),\n        topics: Formatter.allowNull(this.topics.bind(this), undefined)\n      };\n      formats.filterLog = {\n        blockNumber: Formatter.allowNull(number),\n        blockHash: Formatter.allowNull(hash),\n        transactionIndex: number,\n        removed: Formatter.allowNull(this.boolean.bind(this)),\n        address: address,\n        data: Formatter.allowFalsish(data, \"0x\"),\n        topics: Formatter.arrayOf(hash),\n        transactionHash: hash,\n        logIndex: number\n      };\n      return formats;\n    }\n  }, {\n    key: \"accessList\",\n    value: function accessList(_accessList) {\n      return accessListify(_accessList || []);\n    }\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n  }, {\n    key: \"number\",\n    value: function number(_number) {\n      if (_number === \"0x\") {\n        return 0;\n      }\n      return BigNumber.from(_number).toNumber();\n    }\n  }, {\n    key: \"type\",\n    value: function type(number) {\n      if (number === \"0x\" || number == null) {\n        return 0;\n      }\n      return BigNumber.from(number).toNumber();\n    }\n    // Strict! Used on input.\n  }, {\n    key: \"bigNumber\",\n    value: function bigNumber(value) {\n      return BigNumber.from(value);\n    }\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n  }, {\n    key: \"boolean\",\n    value: function boolean(value) {\n      if (typeof value === \"boolean\") {\n        return value;\n      }\n      if (typeof value === \"string\") {\n        value = value.toLowerCase();\n        if (value === \"true\") {\n          return true;\n        }\n        if (value === \"false\") {\n          return false;\n        }\n      }\n      throw new Error(\"invalid boolean - \" + value);\n    }\n  }, {\n    key: \"hex\",\n    value: function hex(value, strict) {\n      if (typeof value === \"string\") {\n        if (!strict && value.substring(0, 2) !== \"0x\") {\n          value = \"0x\" + value;\n        }\n        if (isHexString(value)) {\n          return value.toLowerCase();\n        }\n      }\n      return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n  }, {\n    key: \"data\",\n    value: function data(value, strict) {\n      var result = this.hex(value, strict);\n      if (result.length % 2 !== 0) {\n        throw new Error(\"invalid data; odd-length - \" + value);\n      }\n      return result;\n    }\n    // Requires an address\n    // Strict! Used on input.\n  }, {\n    key: \"address\",\n    value: function address(value) {\n      return getAddress(value);\n    }\n  }, {\n    key: \"callAddress\",\n    value: function callAddress(value) {\n      if (!isHexString(value, 32)) {\n        return null;\n      }\n      var address = getAddress(hexDataSlice(value, 12));\n      return address === AddressZero ? null : address;\n    }\n  }, {\n    key: \"contractAddress\",\n    value: function contractAddress(value) {\n      return getContractAddress(value);\n    }\n    // Strict! Used on input.\n  }, {\n    key: \"blockTag\",\n    value: function blockTag(_blockTag) {\n      if (_blockTag == null) {\n        return \"latest\";\n      }\n      if (_blockTag === \"earliest\") {\n        return \"0x0\";\n      }\n      switch (_blockTag) {\n        case \"earliest\":\n          return \"0x0\";\n        case \"latest\":\n        case \"pending\":\n        case \"safe\":\n        case \"finalized\":\n          return _blockTag;\n      }\n      if (typeof _blockTag === \"number\" || isHexString(_blockTag)) {\n        return hexValue(_blockTag);\n      }\n      throw new Error(\"invalid blockTag\");\n    }\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n  }, {\n    key: \"hash\",\n    value: function hash(value, strict) {\n      var result = this.hex(value, strict);\n      if (hexDataLength(result) !== 32) {\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n      }\n      return result;\n    }\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n  }, {\n    key: \"difficulty\",\n    value: function difficulty(value) {\n      if (value == null) {\n        return null;\n      }\n      var v = BigNumber.from(value);\n      try {\n        return v.toNumber();\n      } catch (error) {}\n      return null;\n    }\n  }, {\n    key: \"uint256\",\n    value: function uint256(value) {\n      if (!isHexString(value)) {\n        throw new Error(\"invalid uint256\");\n      }\n      return hexZeroPad(value, 32);\n    }\n  }, {\n    key: \"_block\",\n    value: function _block(value, format) {\n      if (value.author != null && value.miner == null) {\n        value.miner = value.author;\n      }\n      // The difficulty may need to come from _difficulty in recursed blocks\n      var difficulty = value._difficulty != null ? value._difficulty : value.difficulty;\n      var result = Formatter.check(format, value);\n      result._difficulty = difficulty == null ? null : BigNumber.from(difficulty);\n      return result;\n    }\n  }, {\n    key: \"block\",\n    value: function block(value) {\n      return this._block(value, this.formats.block);\n    }\n  }, {\n    key: \"blockWithTransactions\",\n    value: function blockWithTransactions(value) {\n      return this._block(value, this.formats.blockWithTransactions);\n    }\n    // Strict! Used on input.\n  }, {\n    key: \"transactionRequest\",\n    value: function transactionRequest(value) {\n      return Formatter.check(this.formats.transactionRequest, value);\n    }\n  }, {\n    key: \"transactionResponse\",\n    value: function transactionResponse(transaction) {\n      // Rename gas to gasLimit\n      if (transaction.gas != null && transaction.gasLimit == null) {\n        transaction.gasLimit = transaction.gas;\n      }\n      // Some clients (TestRPC) do strange things like return 0x0 for the\n      // 0 address; correct this to be a real address\n      if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n        transaction.to = \"0x0000000000000000000000000000000000000000\";\n      }\n      // Rename input to data\n      if (transaction.input != null && transaction.data == null) {\n        transaction.data = transaction.input;\n      }\n      // If to and creates are empty, populate the creates from the transaction\n      if (transaction.to == null && transaction.creates == null) {\n        transaction.creates = this.contractAddress(transaction);\n      }\n      if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n        transaction.accessList = [];\n      }\n      var result = Formatter.check(this.formats.transaction, transaction);\n      if (transaction.chainId != null) {\n        var chainId = transaction.chainId;\n        if (isHexString(chainId)) {\n          chainId = BigNumber.from(chainId).toNumber();\n        }\n        result.chainId = chainId;\n      } else {\n        var _chainId = transaction.networkId;\n        // geth-etc returns chainId\n        if (_chainId == null && result.v == null) {\n          _chainId = transaction.chainId;\n        }\n        if (isHexString(_chainId)) {\n          _chainId = BigNumber.from(_chainId).toNumber();\n        }\n        if (typeof _chainId !== \"number\" && result.v != null) {\n          _chainId = (result.v - 35) / 2;\n          if (_chainId < 0) {\n            _chainId = 0;\n          }\n          _chainId = parseInt(_chainId);\n        }\n        if (typeof _chainId !== \"number\") {\n          _chainId = 0;\n        }\n        result.chainId = _chainId;\n      }\n      // 0x0000... should actually be null\n      if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n        result.blockHash = null;\n      }\n      return result;\n    }\n  }, {\n    key: \"transaction\",\n    value: function transaction(value) {\n      return parseTransaction(value);\n    }\n  }, {\n    key: \"receiptLog\",\n    value: function receiptLog(value) {\n      return Formatter.check(this.formats.receiptLog, value);\n    }\n  }, {\n    key: \"receipt\",\n    value: function receipt(value) {\n      var result = Formatter.check(this.formats.receipt, value);\n      // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n      if (result.root != null) {\n        if (result.root.length <= 4) {\n          // Could be 0x00, 0x0, 0x01 or 0x1\n          var _value = BigNumber.from(result.root).toNumber();\n          if (_value === 0 || _value === 1) {\n            // Make sure if both are specified, they match\n            if (result.status != null && result.status !== _value) {\n              logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", {\n                root: result.root,\n                status: result.status\n              });\n            }\n            result.status = _value;\n            delete result.root;\n          } else {\n            logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n          }\n        } else if (result.root.length !== 66) {\n          // Must be a valid bytes32\n          logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n        }\n      }\n      if (result.status != null) {\n        result.byzantium = true;\n      }\n      return result;\n    }\n  }, {\n    key: \"topics\",\n    value: function topics(value) {\n      var _this2 = this;\n      if (Array.isArray(value)) {\n        return value.map(function (v) {\n          return _this2.topics(v);\n        });\n      } else if (value != null) {\n        return this.hash(value, true);\n      }\n      return null;\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(value) {\n      return Formatter.check(this.formats.filter, value);\n    }\n  }, {\n    key: \"filterLog\",\n    value: function filterLog(value) {\n      return Formatter.check(this.formats.filterLog, value);\n    }\n  }], [{\n    key: \"check\",\n    value: function check(format, object) {\n      var result = {};\n      for (var key in format) {\n        try {\n          var value = format[key](object[key]);\n          if (value !== undefined) {\n            result[key] = value;\n          }\n        } catch (error) {\n          error.checkKey = key;\n          error.checkValue = object[key];\n          throw error;\n        }\n      }\n      return result;\n    }\n    // if value is null-ish, nullValue is returned\n  }, {\n    key: \"allowNull\",\n    value: function allowNull(format, nullValue) {\n      return function (value) {\n        if (value == null) {\n          return nullValue;\n        }\n        return format(value);\n      };\n    }\n    // If value is false-ish, replaceValue is returned\n  }, {\n    key: \"allowFalsish\",\n    value: function allowFalsish(format, replaceValue) {\n      return function (value) {\n        if (!value) {\n          return replaceValue;\n        }\n        return format(value);\n      };\n    }\n    // Requires an Array satisfying check\n  }, {\n    key: \"arrayOf\",\n    value: function arrayOf(format) {\n      return function (array) {\n        if (!Array.isArray(array)) {\n          throw new Error(\"not an array\");\n        }\n        var result = [];\n        array.forEach(function (value) {\n          result.push(format(value));\n        });\n        return result;\n      };\n    }\n  }]);\n  return Formatter;\n}();\nexport function isCommunityResourcable(value) {\n  return value && typeof value.isCommunityResource === \"function\";\n}\nexport function isCommunityResource(value) {\n  return isCommunityResourcable(value) && value.isCommunityResource();\n}\n// Show the throttle message only once\nvar throttleMessage = false;\nexport function showThrottleMessage() {\n  if (throttleMessage) {\n    return;\n  }\n  throttleMessage = true;\n  console.log(\"========= NOTICE =========\");\n  console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n  console.log(\"\");\n  console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n  console.log(\"community resource for low-traffic projects and early prototyping.\");\n  console.log(\"\");\n  console.log(\"While your application will continue to function, we highly recommended\");\n  console.log(\"signing up for your own API keys to improve performance, increase your\");\n  console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n  console.log(\"\");\n  console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n  console.log(\"==========================\");\n}","map":{"version":3,"sources":["../src.ts/formatter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n    getDefaultFormats() {\n        const formats = ({});\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n        const strictData = (v) => { return this.data(v, true); };\n        formats.transaction = {\n            hash: hash,\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n            confirmations: Formatter.allowNull(number, null),\n            from: address,\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n            creates: Formatter.allowNull(address, null),\n            raw: Formatter.allowNull(data),\n        };\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            miner: Formatter.allowNull(address),\n            extraData: data,\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n            topics: Formatter.arrayOf(hash),\n            transactionHash: hash,\n            logIndex: number,\n        };\n        return formats;\n    }\n    accessList(accessList) {\n        return accessListify(accessList || []);\n    }\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number) {\n        if (number === \"0x\") {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    type(number) {\n        if (number === \"0x\" || number == null) {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    // Strict! Used on input.\n    bigNumber(value) {\n        return BigNumber.from(value);\n    }\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value) {\n        if (typeof (value) === \"boolean\") {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") {\n                return true;\n            }\n            if (value === \"false\") {\n                return false;\n            }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n    hex(value, strict) {\n        if (typeof (value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") {\n                value = \"0x\" + value;\n            }\n            if (isHexString(value)) {\n                return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    data(value, strict) {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n    // Requires an address\n    // Strict! Used on input.\n    address(value) {\n        return getAddress(value);\n    }\n    callAddress(value) {\n        if (!isHexString(value, 32)) {\n            return null;\n        }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null : address;\n    }\n    contractAddress(value) {\n        return getContractAddress(value);\n    }\n    // Strict! Used on input.\n    blockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        if (blockTag === \"earliest\") {\n            return \"0x0\";\n        }\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n            case \"finalized\":\n                return blockTag;\n        }\n        if (typeof (blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(blockTag);\n        }\n        throw new Error(\"invalid blockTag\");\n    }\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value, strict) {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value) {\n        if (value == null) {\n            return null;\n        }\n        const v = BigNumber.from(value);\n        try {\n            return v.toNumber();\n        }\n        catch (error) { }\n        return null;\n    }\n    uint256(value) {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n    _block(value, format) {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null : BigNumber.from(difficulty));\n        return result;\n    }\n    block(value) {\n        return this._block(value, this.formats.block);\n    }\n    blockWithTransactions(value) {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n    // Strict! Used on input.\n    transactionRequest(value) {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n    transactionResponse(transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n            transaction.accessList = [];\n        }\n        const result = Formatter.check(this.formats.transaction, transaction);\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            result.chainId = chainId;\n        }\n        else {\n            let chainId = transaction.networkId;\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            if (typeof (chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) {\n                    chainId = 0;\n                }\n                chainId = parseInt(chainId);\n            }\n            if (typeof (chainId) !== \"number\") {\n                chainId = 0;\n            }\n            result.chainId = chainId;\n        }\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n        return result;\n    }\n    transaction(value) {\n        return parseTransaction(value);\n    }\n    receiptLog(value) {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n    receipt(value) {\n        const result = Formatter.check(this.formats.receipt, value);\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                }\n                else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            }\n            else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n        return result;\n    }\n    topics(value) {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n        }\n        else if (value != null) {\n            return this.hash(value, true);\n        }\n        return null;\n    }\n    filter(value) {\n        return Formatter.check(this.formats.filter, value);\n    }\n    filterLog(value) {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n    static check(format, object) {\n        const result = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) {\n                    result[key] = value;\n                }\n            }\n            catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n    // if value is null-ish, nullValue is returned\n    static allowNull(format, nullValue) {\n        return (function (value) {\n            if (value == null) {\n                return nullValue;\n            }\n            return format(value);\n        });\n    }\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format, replaceValue) {\n        return (function (value) {\n            if (!value) {\n                return replaceValue;\n            }\n            return format(value);\n        });\n    }\n    // Requires an Array satisfying check\n    static arrayOf(format) {\n        return (function (array) {\n            if (!Array.isArray(array)) {\n                throw new Error(\"not an array\");\n            }\n            const result = [];\n            array.forEach(function (value) {\n                result.push(format(value));\n            });\n            return result;\n        });\n    }\n}\nexport function isCommunityResourcable(value) {\n    return (value && typeof (value.isCommunityResource) === \"function\");\n}\nexport function isCommunityResource(value) {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) {\n        return;\n    }\n    throttleMessage = true;\n    console.log(\"========= NOTICE =========\");\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n//# sourceMappingURL=formatter.js.map"]},"metadata":{},"sourceType":"module"}