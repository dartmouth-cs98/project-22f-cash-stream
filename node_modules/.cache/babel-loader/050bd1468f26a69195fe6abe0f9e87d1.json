{"ast":null,"code":"\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, zeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 as hashKeccak256 } from \"@ethersproject/keccak256\";\nimport { sha256 as hashSha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nvar regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nvar regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nvar regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nvar Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nfunction _pack(type, value, isArray) {\n  switch (type) {\n    case \"address\":\n      if (isArray) {\n        return zeroPad(value, 32);\n      }\n      return arrayify(value);\n    case \"string\":\n      return toUtf8Bytes(value);\n    case \"bytes\":\n      return arrayify(value);\n    case \"bool\":\n      value = value ? \"0x01\" : \"0x00\";\n      if (isArray) {\n        return zeroPad(value, 32);\n      }\n      return arrayify(value);\n  }\n  var match = type.match(regexNumber);\n  if (match) {\n    //let signed = (match[1] === \"int\")\n    var size = parseInt(match[2] || \"256\");\n    if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {\n      logger.throwArgumentError(\"invalid number type\", \"type\", type);\n    }\n    if (isArray) {\n      size = 256;\n    }\n    value = BigNumber.from(value).toTwos(size);\n    return zeroPad(value, size / 8);\n  }\n  match = type.match(regexBytes);\n  if (match) {\n    var _size = parseInt(match[1]);\n    if (String(_size) !== match[1] || _size === 0 || _size > 32) {\n      logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n    }\n    if (arrayify(value).byteLength !== _size) {\n      logger.throwArgumentError(\"invalid value for \".concat(type), \"value\", value);\n    }\n    if (isArray) {\n      return arrayify((value + Zeros).substring(0, 66));\n    }\n    return value;\n  }\n  match = type.match(regexArray);\n  if (match && Array.isArray(value)) {\n    var baseType = match[1];\n    var count = parseInt(match[2] || String(value.length));\n    if (count != value.length) {\n      logger.throwArgumentError(\"invalid array length for \".concat(type), \"value\", value);\n    }\n    var result = [];\n    value.forEach(function (value) {\n      result.push(_pack(baseType, value, true));\n    });\n    return concat(result);\n  }\n  return logger.throwArgumentError(\"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\nexport function pack(types, values) {\n  if (types.length != values.length) {\n    logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n  }\n  var tight = [];\n  types.forEach(function (type, index) {\n    tight.push(_pack(type, values[index]));\n  });\n  return hexlify(concat(tight));\n}\nexport function keccak256(types, values) {\n  return hashKeccak256(pack(types, values));\n}\nexport function sha256(types, values) {\n  return hashSha256(pack(types, values));\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, zeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 as hashKeccak256 } from \"@ethersproject/keccak256\";\nimport { sha256 as hashSha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nconst Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction _pack(type, value, isArray) {\n    switch (type) {\n        case \"address\":\n            if (isArray) {\n                return zeroPad(value, 32);\n            }\n            return arrayify(value);\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return arrayify(value);\n        case \"bool\":\n            value = (value ? \"0x01\" : \"0x00\");\n            if (isArray) {\n                return zeroPad(value, 32);\n            }\n            return arrayify(value);\n    }\n    let match = type.match(regexNumber);\n    if (match) {\n        //let signed = (match[1] === \"int\")\n        let size = parseInt(match[2] || \"256\");\n        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\n            logger.throwArgumentError(\"invalid number type\", \"type\", type);\n        }\n        if (isArray) {\n            size = 256;\n        }\n        value = BigNumber.from(value).toTwos(size);\n        return zeroPad(value, size / 8);\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n            logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n        }\n        if (arrayify(value).byteLength !== size) {\n            logger.throwArgumentError(`invalid value for ${type}`, \"value\", value);\n        }\n        if (isArray) {\n            return arrayify((value + Zeros).substring(0, 66));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            logger.throwArgumentError(`invalid array length for ${type}`, \"value\", value);\n        }\n        const result = [];\n        value.forEach(function (value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return concat(result);\n    }\n    return logger.throwArgumentError(\"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\nexport function pack(types, values) {\n    if (types.length != values.length) {\n        logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n    }\n    const tight = [];\n    types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\nexport function keccak256(types, values) {\n    return hashKeccak256(pack(types, values));\n}\nexport function sha256(types, values) {\n    return hashSha256(pack(types, values));\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}