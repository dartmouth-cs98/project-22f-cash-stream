{"ast":null,"code":"\"use strict\";\n\nimport _createClass from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getAddress as _getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport { checkResultErrors };\nexport var LogDescription = /*#__PURE__*/function (_Description) {\n  _inherits(LogDescription, _Description);\n  var _super = _createSuper(LogDescription);\n  function LogDescription() {\n    _classCallCheck(this, LogDescription);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(LogDescription);\n}(Description);\nexport var TransactionDescription = /*#__PURE__*/function (_Description2) {\n  _inherits(TransactionDescription, _Description2);\n  var _super2 = _createSuper(TransactionDescription);\n  function TransactionDescription() {\n    _classCallCheck(this, TransactionDescription);\n    return _super2.apply(this, arguments);\n  }\n  return _createClass(TransactionDescription);\n}(Description);\nexport var ErrorDescription = /*#__PURE__*/function (_Description3) {\n  _inherits(ErrorDescription, _Description3);\n  var _super3 = _createSuper(ErrorDescription);\n  function ErrorDescription() {\n    _classCallCheck(this, ErrorDescription);\n    return _super3.apply(this, arguments);\n  }\n  return _createClass(ErrorDescription);\n}(Description);\nexport var Indexed = /*#__PURE__*/function (_Description4) {\n  _inherits(Indexed, _Description4);\n  var _super4 = _createSuper(Indexed);\n  function Indexed() {\n    _classCallCheck(this, Indexed);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(Indexed, null, [{\n    key: \"isIndexed\",\n    value: function isIndexed(value) {\n      return !!(value && value._isIndexed);\n    }\n  }]);\n  return Indexed;\n}(Description);\nvar BuiltinErrors = {\n  \"0x08c379a0\": {\n    signature: \"Error(string)\",\n    name: \"Error\",\n    inputs: [\"string\"],\n    reason: true\n  },\n  \"0x4e487b71\": {\n    signature: \"Panic(uint256)\",\n    name: \"Panic\",\n    inputs: [\"uint256\"]\n  }\n};\nfunction wrapAccessError(property, error) {\n  var wrap = new Error(\"deferred error during ABI decoding triggered accessing \".concat(property));\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport var Interface = /*#__PURE__*/function () {\n  function Interface(fragments) {\n    var _this = this;\n    _classCallCheck(this, Interface);\n    var abi = [];\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n    defineReadOnly(this, \"fragments\", abi.map(function (fragment) {\n      return Fragment.from(fragment);\n    }).filter(function (fragment) {\n      return fragment != null;\n    }));\n    defineReadOnly(this, \"_abiCoder\", getStatic(this instanceof Interface ? this.constructor : void 0, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {});\n    // Add all fragments by their signature\n    this.fragments.forEach(function (fragment) {\n      var bucket = null;\n      switch (fragment.type) {\n        case \"constructor\":\n          if (_this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          }\n          //checkNames(fragment, \"input\", fragment.inputs);\n          defineReadOnly(_this, \"deploy\", fragment);\n          return;\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = _this.functions;\n          break;\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = _this.events;\n          break;\n        case \"error\":\n          bucket = _this.errors;\n          break;\n        default:\n          return;\n      }\n      var signature = fragment.format();\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n      bucket[signature] = fragment;\n    });\n    // If we do not have a constructor add a default\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n  _createClass(Interface, [{\n    key: \"format\",\n    value: function format(_format) {\n      if (!_format) {\n        _format = FormatTypes.full;\n      }\n      if (_format === FormatTypes.sighash) {\n        logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", _format);\n      }\n      var abi = this.fragments.map(function (fragment) {\n        return fragment.format(_format);\n      });\n      // We need to re-bundle the JSON fragments a bit\n      if (_format === FormatTypes.json) {\n        return JSON.stringify(abi.map(function (j) {\n          return JSON.parse(j);\n        }));\n      }\n      return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n  }, {\n    key: \"getFunction\",\n    value:\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    function getFunction(nameOrSignatureOrSighash) {\n      if (isHexString(nameOrSignatureOrSighash)) {\n        for (var name in this.functions) {\n          if (nameOrSignatureOrSighash === this.getSighash(name)) {\n            return this.functions[name];\n          }\n        }\n        logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n      }\n      // It is a bare name, look up the function (will return null if ambiguous)\n      if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n        var _name = nameOrSignatureOrSighash.trim();\n        var matching = Object.keys(this.functions).filter(function (f) {\n          return f.split(\"(\" /* fix:) */)[0] === _name;\n        });\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching function\", \"name\", _name);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching functions\", \"name\", _name);\n        }\n        return this.functions[matching[0]];\n      }\n      // Normalize the signature and lookup the function\n      var result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n      if (!result) {\n        logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n      }\n      return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n  }, {\n    key: \"getEvent\",\n    value: function getEvent(nameOrSignatureOrTopic) {\n      if (isHexString(nameOrSignatureOrTopic)) {\n        var topichash = nameOrSignatureOrTopic.toLowerCase();\n        for (var name in this.events) {\n          if (topichash === this.getEventTopic(name)) {\n            return this.events[name];\n          }\n        }\n        logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n      }\n      // It is a bare name, look up the function (will return null if ambiguous)\n      if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n        var _name2 = nameOrSignatureOrTopic.trim();\n        var matching = Object.keys(this.events).filter(function (f) {\n          return f.split(\"(\" /* fix:) */)[0] === _name2;\n        });\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching event\", \"name\", _name2);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching events\", \"name\", _name2);\n        }\n        return this.events[matching[0]];\n      }\n      // Normalize the signature and lookup the function\n      var result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n      if (!result) {\n        logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n      }\n      return result;\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n  }, {\n    key: \"getError\",\n    value: function getError(nameOrSignatureOrSighash) {\n      if (isHexString(nameOrSignatureOrSighash)) {\n        var getSighash = getStatic(this.constructor, \"getSighash\");\n        for (var name in this.errors) {\n          var error = this.errors[name];\n          if (nameOrSignatureOrSighash === getSighash(error)) {\n            return this.errors[name];\n          }\n        }\n        logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n      }\n      // It is a bare name, look up the function (will return null if ambiguous)\n      if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n        var _name3 = nameOrSignatureOrSighash.trim();\n        var matching = Object.keys(this.errors).filter(function (f) {\n          return f.split(\"(\" /* fix:) */)[0] === _name3;\n        });\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching error\", \"name\", _name3);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching errors\", \"name\", _name3);\n        }\n        return this.errors[matching[0]];\n      }\n      // Normalize the signature and lookup the function\n      var result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n      if (!result) {\n        logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n      }\n      return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n  }, {\n    key: \"getSighash\",\n    value: function getSighash(fragment) {\n      if (typeof fragment === \"string\") {\n        try {\n          fragment = this.getFunction(fragment);\n        } catch (error) {\n          try {\n            fragment = this.getError(fragment);\n          } catch (_) {\n            throw error;\n          }\n        }\n      }\n      return getStatic(this.constructor, \"getSighash\")(fragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n  }, {\n    key: \"getEventTopic\",\n    value: function getEventTopic(eventFragment) {\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n      return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n  }, {\n    key: \"_decodeParams\",\n    value: function _decodeParams(params, data) {\n      return this._abiCoder.decode(params, data);\n    }\n  }, {\n    key: \"_encodeParams\",\n    value: function _encodeParams(params, values) {\n      return this._abiCoder.encode(params, values);\n    }\n  }, {\n    key: \"encodeDeploy\",\n    value: function encodeDeploy(values) {\n      return this._encodeParams(this.deploy.inputs, values || []);\n    }\n  }, {\n    key: \"decodeErrorResult\",\n    value: function decodeErrorResult(fragment, data) {\n      if (typeof fragment === \"string\") {\n        fragment = this.getError(fragment);\n      }\n      var bytes = arrayify(data);\n      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n        logger.throwArgumentError(\"data signature does not match error \".concat(fragment.name, \".\"), \"data\", hexlify(bytes));\n      }\n      return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n  }, {\n    key: \"encodeErrorResult\",\n    value: function encodeErrorResult(fragment, values) {\n      if (typeof fragment === \"string\") {\n        fragment = this.getError(fragment);\n      }\n      return hexlify(concat([this.getSighash(fragment), this._encodeParams(fragment.inputs, values || [])]));\n    }\n    // Decode the data for a function call (e.g. tx.data)\n  }, {\n    key: \"decodeFunctionData\",\n    value: function decodeFunctionData(functionFragment, data) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      var bytes = arrayify(data);\n      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n        logger.throwArgumentError(\"data signature does not match function \".concat(functionFragment.name, \".\"), \"data\", hexlify(bytes));\n      }\n      return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n  }, {\n    key: \"encodeFunctionData\",\n    value: function encodeFunctionData(functionFragment, values) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n  }, {\n    key: \"decodeFunctionResult\",\n    value: function decodeFunctionResult(functionFragment, data) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      var bytes = arrayify(data);\n      var reason = null;\n      var message = \"\";\n      var errorArgs = null;\n      var errorName = null;\n      var errorSignature = null;\n      switch (bytes.length % this._abiCoder._getWordSize()) {\n        case 0:\n          try {\n            return this._abiCoder.decode(functionFragment.outputs, bytes);\n          } catch (error) {}\n          break;\n        case 4:\n          {\n            var selector = hexlify(bytes.slice(0, 4));\n            var builtin = BuiltinErrors[selector];\n            if (builtin) {\n              errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n              errorName = builtin.name;\n              errorSignature = builtin.signature;\n              if (builtin.reason) {\n                reason = errorArgs[0];\n              }\n              if (errorName === \"Error\") {\n                message = \"; VM Exception while processing transaction: reverted with reason string \".concat(JSON.stringify(errorArgs[0]));\n              } else if (errorName === \"Panic\") {\n                message = \"; VM Exception while processing transaction: reverted with panic code \".concat(errorArgs[0]);\n              }\n            } else {\n              try {\n                var error = this.getError(selector);\n                errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                errorName = error.name;\n                errorSignature = error.format();\n              } catch (error) {}\n            }\n            break;\n          }\n      }\n      return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n        method: functionFragment.format(),\n        data: hexlify(data),\n        errorArgs: errorArgs,\n        errorName: errorName,\n        errorSignature: errorSignature,\n        reason: reason\n      });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n  }, {\n    key: \"encodeFunctionResult\",\n    value: function encodeFunctionResult(functionFragment, values) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n  }, {\n    key: \"encodeFilterTopics\",\n    value: function encodeFilterTopics(eventFragment, values) {\n      var _this2 = this;\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n      if (values.length > eventFragment.inputs.length) {\n        logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n          argument: \"values\",\n          value: values\n        });\n      }\n      var topics = [];\n      if (!eventFragment.anonymous) {\n        topics.push(this.getEventTopic(eventFragment));\n      }\n      var encodeTopic = function encodeTopic(param, value) {\n        if (param.type === \"string\") {\n          return id(value);\n        } else if (param.type === \"bytes\") {\n          return keccak256(hexlify(value));\n        }\n        if (param.type === \"bool\" && typeof value === \"boolean\") {\n          value = value ? \"0x01\" : \"0x00\";\n        }\n        if (param.type.match(/^u?int/)) {\n          value = BigNumber.from(value).toHexString();\n        }\n        // Check addresses are valid\n        if (param.type === \"address\") {\n          _this2._abiCoder.encode([\"address\"], [value]);\n        }\n        return hexZeroPad(hexlify(value), 32);\n      };\n      values.forEach(function (value, index) {\n        var param = eventFragment.inputs[index];\n        if (!param.indexed) {\n          if (value != null) {\n            logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n          }\n          return;\n        }\n        if (value == null) {\n          topics.push(null);\n        } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n          logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n        } else if (Array.isArray(value)) {\n          topics.push(value.map(function (value) {\n            return encodeTopic(param, value);\n          }));\n        } else {\n          topics.push(encodeTopic(param, value));\n        }\n      });\n      // Trim off trailing nulls\n      while (topics.length && topics[topics.length - 1] === null) {\n        topics.pop();\n      }\n      return topics;\n    }\n  }, {\n    key: \"encodeEventLog\",\n    value: function encodeEventLog(eventFragment, values) {\n      var _this3 = this;\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n      var topics = [];\n      var dataTypes = [];\n      var dataValues = [];\n      if (!eventFragment.anonymous) {\n        topics.push(this.getEventTopic(eventFragment));\n      }\n      if (values.length !== eventFragment.inputs.length) {\n        logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n      }\n      eventFragment.inputs.forEach(function (param, index) {\n        var value = values[index];\n        if (param.indexed) {\n          if (param.type === \"string\") {\n            topics.push(id(value));\n          } else if (param.type === \"bytes\") {\n            topics.push(keccak256(value));\n          } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n            // @TODO\n            throw new Error(\"not implemented\");\n          } else {\n            topics.push(_this3._abiCoder.encode([param.type], [value]));\n          }\n        } else {\n          dataTypes.push(param);\n          dataValues.push(value);\n        }\n      });\n      return {\n        data: this._abiCoder.encode(dataTypes, dataValues),\n        topics: topics\n      };\n    }\n    // Decode a filter for the event and the search criteria\n  }, {\n    key: \"decodeEventLog\",\n    value: function decodeEventLog(eventFragment, data, topics) {\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n      if (topics != null && !eventFragment.anonymous) {\n        var topicHash = this.getEventTopic(eventFragment);\n        if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n          logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"topics[0]\",\n            expected: topicHash,\n            value: topics[0]\n          });\n        }\n        topics = topics.slice(1);\n      }\n      var indexed = [];\n      var nonIndexed = [];\n      var dynamic = [];\n      eventFragment.inputs.forEach(function (param, index) {\n        if (param.indexed) {\n          if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n            indexed.push(ParamType.fromObject({\n              type: \"bytes32\",\n              name: param.name\n            }));\n            dynamic.push(true);\n          } else {\n            indexed.push(param);\n            dynamic.push(false);\n          }\n        } else {\n          nonIndexed.push(param);\n          dynamic.push(false);\n        }\n      });\n      var resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n      var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n      var result = [];\n      var nonIndexedIndex = 0,\n        indexedIndex = 0;\n      eventFragment.inputs.forEach(function (param, index) {\n        if (param.indexed) {\n          if (resultIndexed == null) {\n            result[index] = new Indexed({\n              _isIndexed: true,\n              hash: null\n            });\n          } else if (dynamic[index]) {\n            result[index] = new Indexed({\n              _isIndexed: true,\n              hash: resultIndexed[indexedIndex++]\n            });\n          } else {\n            try {\n              result[index] = resultIndexed[indexedIndex++];\n            } catch (error) {\n              result[index] = error;\n            }\n          }\n        } else {\n          try {\n            result[index] = resultNonIndexed[nonIndexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n        // Add the keyword argument if named and safe\n        if (param.name && result[param.name] == null) {\n          var value = result[index];\n          // Make error named values throw on access\n          if (value instanceof Error) {\n            Object.defineProperty(result, param.name, {\n              enumerable: true,\n              get: function get() {\n                throw wrapAccessError(\"property \".concat(JSON.stringify(param.name)), value);\n              }\n            });\n          } else {\n            result[param.name] = value;\n          }\n        }\n      });\n      // Make all error indexed values throw on access\n      var _loop = function _loop(i) {\n        var value = result[i];\n        if (value instanceof Error) {\n          Object.defineProperty(result, i, {\n            enumerable: true,\n            get: function get() {\n              throw wrapAccessError(\"index \".concat(i), value);\n            }\n          });\n        }\n      };\n      for (var i = 0; i < result.length; i++) {\n        _loop(i);\n      }\n      return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n  }, {\n    key: \"parseTransaction\",\n    value: function parseTransaction(tx) {\n      var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n      if (!fragment) {\n        return null;\n      }\n      return new TransactionDescription({\n        args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n        functionFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        sighash: this.getSighash(fragment),\n        value: BigNumber.from(tx.value || \"0\")\n      });\n    }\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n  }, {\n    key: \"parseLog\",\n    value: function parseLog(log) {\n      var fragment = this.getEvent(log.topics[0]);\n      if (!fragment || fragment.anonymous) {\n        return null;\n      }\n      // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n      //        Probably not, because just because it is the only event in the ABI does\n      //        not mean we have the full ABI; maybe just a fragment?\n      return new LogDescription({\n        eventFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        topic: this.getEventTopic(fragment),\n        args: this.decodeEventLog(fragment, log.data, log.topics)\n      });\n    }\n  }, {\n    key: \"parseError\",\n    value: function parseError(data) {\n      var hexData = hexlify(data);\n      var fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n      if (!fragment) {\n        return null;\n      }\n      return new ErrorDescription({\n        args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n        errorFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        sighash: this.getSighash(fragment)\n      });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n  }], [{\n    key: \"getAbiCoder\",\n    value: function getAbiCoder() {\n      return defaultAbiCoder;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(address) {\n      return _getAddress(address);\n    }\n  }, {\n    key: \"getSighash\",\n    value: function getSighash(fragment) {\n      return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n  }, {\n    key: \"getEventTopic\",\n    value: function getEventTopic(eventFragment) {\n      return id(eventFragment.format());\n    }\n  }, {\n    key: \"isInterface\",\n    value: function isInterface(value) {\n      return !!(value && value._isInterface);\n    }\n  }]);\n  return Interface;\n}();","map":{"version":3,"sources":["../src.ts/interface.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {\n}\nexport class TransactionDescription extends Description {\n}\nexport class ErrorDescription extends Description {\n}\nexport class Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nconst BuiltinErrors = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [\"string\"], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [\"uint256\"] }\n};\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    constructor(fragments) {\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(fragment) {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n            return this.errors[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment) {\n        if (typeof (fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            }\n            catch (error) {\n                try {\n                    fragment = this.getError(fragment);\n                }\n                catch (_) {\n                    throw error;\n                }\n            }\n        }\n        return getStatic(this.constructor, \"getSighash\")(fragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    decodeErrorResult(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n    encodeErrorResult(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [])\n        ]));\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let message = \"\";\n        let errorArgs = null;\n        let errorName = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) {\n                        reason = errorArgs[0];\n                    }\n                    if (errorName === \"Error\") {\n                        message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;\n                    }\n                    else if (errorName === \"Panic\") {\n                        message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;\n                    }\n                }\n                else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    }\n                    catch (error) { }\n                }\n                break;\n            }\n        }\n        return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            if (param.type === \"bool\" && typeof (value) === \"boolean\") {\n                value = (value ? \"0x01\" : \"0x00\");\n            }\n            if (param.type.match(/^u?int/)) {\n                value = BigNumber.from(value).toHexString();\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }\n                    });\n                }\n                else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${i}`, value); }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    parseError(data) {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n//# sourceMappingURL=interface.js.map"]},"metadata":{},"sourceType":"module"}