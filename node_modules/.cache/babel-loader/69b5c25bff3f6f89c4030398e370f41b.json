{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/taykim/Desktop/cs98/cs98_fall_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nvar defaultProjectId = \"84842078b09946638c03157f83405213\";\nexport var InfuraWebSocketProvider = /*#__PURE__*/function (_WebSocketProvider) {\n  _inherits(InfuraWebSocketProvider, _WebSocketProvider);\n  var _super = _createSuper(InfuraWebSocketProvider);\n  function InfuraWebSocketProvider(network, apiKey) {\n    var _this;\n    _classCallCheck(this, InfuraWebSocketProvider);\n    var provider = new InfuraProvider(network, apiKey);\n    var connection = provider.connection;\n    if (connection.password) {\n      logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"InfuraProvider.getWebSocketProvider()\"\n      });\n    }\n    var url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n    _this = _super.call(this, url, network);\n    defineReadOnly(_assertThisInitialized(_this), \"apiKey\", provider.projectId);\n    defineReadOnly(_assertThisInitialized(_this), \"projectId\", provider.projectId);\n    defineReadOnly(_assertThisInitialized(_this), \"projectSecret\", provider.projectSecret);\n    return _this;\n  }\n  _createClass(InfuraWebSocketProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.projectId === defaultProjectId;\n    }\n  }]);\n  return InfuraWebSocketProvider;\n}(WebSocketProvider);\nexport var InfuraProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(InfuraProvider, _UrlJsonRpcProvider);\n  var _super2 = _createSuper(InfuraProvider);\n  function InfuraProvider() {\n    _classCallCheck(this, InfuraProvider);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(InfuraProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.projectId === defaultProjectId;\n    }\n  }], [{\n    key: \"getWebSocketProvider\",\n    value: function getWebSocketProvider(network, apiKey) {\n      return new InfuraWebSocketProvider(network, apiKey);\n    }\n  }, {\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      var apiKeyObj = {\n        apiKey: defaultProjectId,\n        projectId: defaultProjectId,\n        projectSecret: null\n      };\n      if (apiKey == null) {\n        return apiKeyObj;\n      }\n      if (typeof apiKey === \"string\") {\n        apiKeyObj.projectId = apiKey;\n      } else if (apiKey.projectSecret != null) {\n        logger.assertArgument(typeof apiKey.projectId === \"string\", \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n        logger.assertArgument(typeof apiKey.projectSecret === \"string\", \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n        apiKeyObj.projectId = apiKey.projectId;\n        apiKeyObj.projectSecret = apiKey.projectSecret;\n      } else if (apiKey.projectId) {\n        apiKeyObj.projectId = apiKey.projectId;\n      }\n      apiKeyObj.apiKey = apiKeyObj.projectId;\n      return apiKeyObj;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n      switch (network ? network.name : \"unknown\") {\n        case \"homestead\":\n          host = \"mainnet.infura.io\";\n          break;\n        case \"ropsten\":\n          host = \"ropsten.infura.io\";\n          break;\n        case \"rinkeby\":\n          host = \"rinkeby.infura.io\";\n          break;\n        case \"kovan\":\n          host = \"kovan.infura.io\";\n          break;\n        case \"goerli\":\n          host = \"goerli.infura.io\";\n          break;\n        case \"matic\":\n          host = \"polygon-mainnet.infura.io\";\n          break;\n        case \"maticmum\":\n          host = \"polygon-mumbai.infura.io\";\n          break;\n        case \"optimism\":\n          host = \"optimism-mainnet.infura.io\";\n          break;\n        case \"optimism-kovan\":\n          host = \"optimism-kovan.infura.io\";\n          break;\n        case \"arbitrum\":\n          host = \"arbitrum-mainnet.infura.io\";\n          break;\n        case \"arbitrum-rinkeby\":\n          host = \"arbitrum-rinkeby.infura.io\";\n          break;\n        default:\n          logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"network\",\n            value: network\n          });\n      }\n      var connection = {\n        allowGzip: true,\n        url: \"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId,\n        throttleCallback: function throttleCallback(attempt, url) {\n          if (apiKey.projectId === defaultProjectId) {\n            showThrottleMessage();\n          }\n          return Promise.resolve(true);\n        }\n      };\n      if (apiKey.projectSecret != null) {\n        connection.user = \"\";\n        connection.password = apiKey.projectSecret;\n      }\n      return connection;\n    }\n  }]);\n  return InfuraProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"sources":["../src.ts/infura-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nexport class InfuraWebSocketProvider extends WebSocketProvider {\n    constructor(network, apiKey) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n    isCommunityResource() {\n        return (this.projectId === defaultProjectId);\n    }\n}\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    static getWebSocketProvider(network, apiKey) {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        const apiKeyObj = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n        if (apiKey == null) {\n            return apiKeyObj;\n        }\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n        }\n        else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof (apiKey.projectId) === \"string\"), \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof (apiKey.projectSecret) === \"string\"), \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n        }\n        else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"ropsten\":\n                host = \"ropsten.infura.io\";\n                break;\n            case \"rinkeby\":\n                host = \"rinkeby.infura.io\";\n                break;\n            case \"kovan\":\n                host = \"kovan.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-kovan\":\n                host = \"optimism-kovan.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arbitrum-rinkeby.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        const connection = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt, url) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.projectId === defaultProjectId);\n    }\n}\n//# sourceMappingURL=infura-provider.js.map"]},"metadata":{},"sourceType":"module"}