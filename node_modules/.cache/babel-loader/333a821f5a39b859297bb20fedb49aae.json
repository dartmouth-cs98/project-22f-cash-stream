{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _taggedTemplateLiteral = require(\"/Users/taykim/Desktop/cs98/cfa-createflow-metamask-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar codegen_1 = require(\"../../compile/codegen\");\nvar error = {\n  message: function message(_ref) {\n    var schemaCode = _ref.schemaCode;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must match format \\\"\", \"\\\"\"])), schemaCode);\n  },\n  params: function params(_ref2) {\n    var schemaCode = _ref2.schemaCode;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{format: \", \"}\"])), schemaCode);\n  }\n};\nvar def = {\n  keyword: \"format\",\n  type: [\"number\", \"string\"],\n  schemaType: \"string\",\n  $data: true,\n  error: error,\n  code: function code(cxt, ruleType) {\n    var gen = cxt.gen,\n      data = cxt.data,\n      $data = cxt.$data,\n      schema = cxt.schema,\n      schemaCode = cxt.schemaCode,\n      it = cxt.it;\n    var opts = it.opts,\n      errSchemaPath = it.errSchemaPath,\n      schemaEnv = it.schemaEnv,\n      self = it.self;\n    if (!opts.validateFormats) return;\n    if ($data) validate$DataFormat();else validateFormat();\n    function validate$DataFormat() {\n      var fmts = gen.scopeValue(\"formats\", {\n        ref: self.formats,\n        code: opts.code.formats\n      });\n      var fDef = gen.const(\"fDef\", (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \"[\", \"]\"])), fmts, schemaCode));\n      var fType = gen.let(\"fType\");\n      var format = gen.let(\"format\");\n      // TODO simplify\n      gen.if((0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"typeof \", \" == \\\"object\\\" && !(\", \" instanceof RegExp)\"])), fDef, fDef), function () {\n        return gen.assign(fType, (0, codegen_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \".type || \\\"string\\\"\"])), fDef)).assign(format, (0, codegen_1._)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\", \".validate\"])), fDef));\n      }, function () {\n        return gen.assign(fType, (0, codegen_1._)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\\\"string\\\"\"])))).assign(format, fDef);\n      });\n      cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));\n      function unknownFmt() {\n        if (opts.strictSchema === false) return codegen_1.nil;\n        return (0, codegen_1._)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\", \" && !\", \"\"])), schemaCode, format);\n      }\n      function invalidFmt() {\n        var callFormat = schemaEnv.$async ? (0, codegen_1._)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"(\", \".async ? await \", \"(\", \") : \", \"(\", \"))\"])), fDef, format, data, format, data) : (0, codegen_1._)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([\"\", \"(\", \")\"])), format, data);\n        var validData = (0, codegen_1._)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral([\"(typeof \", \" == \\\"function\\\" ? \", \" : \", \".test(\", \"))\"])), format, callFormat, format, data);\n        return (0, codegen_1._)(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([\"\", \" && \", \" !== true && \", \" === \", \" && !\", \"\"])), format, format, fType, ruleType, validData);\n      }\n    }\n    function validateFormat() {\n      var formatDef = self.formats[schema];\n      if (!formatDef) {\n        unknownFormat();\n        return;\n      }\n      if (formatDef === true) return;\n      var _getFormat = getFormat(formatDef),\n        _getFormat2 = _slicedToArray(_getFormat, 3),\n        fmtType = _getFormat2[0],\n        format = _getFormat2[1],\n        fmtRef = _getFormat2[2];\n      if (fmtType === ruleType) cxt.pass(validCondition());\n      function unknownFormat() {\n        if (opts.strictSchema === false) {\n          self.logger.warn(unknownMsg());\n          return;\n        }\n        throw new Error(unknownMsg());\n        function unknownMsg() {\n          return \"unknown format \\\"\".concat(schema, \"\\\" ignored in schema at path \\\"\").concat(errSchemaPath, \"\\\"\");\n        }\n      }\n      function getFormat(fmtDef) {\n        var code = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral([\"\", \"\", \"\"])), opts.code.formats, (0, codegen_1.getProperty)(schema)) : undefined;\n        var fmt = gen.scopeValue(\"formats\", {\n          key: schema,\n          ref: fmtDef,\n          code: code\n        });\n        if (typeof fmtDef == \"object\" && !(fmtDef instanceof RegExp)) {\n          return [fmtDef.type || \"string\", fmtDef.validate, (0, codegen_1._)(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral([\"\", \".validate\"])), fmt)];\n        }\n        return [\"string\", fmtDef, fmt];\n      }\n      function validCondition() {\n        if (typeof formatDef == \"object\" && !(formatDef instanceof RegExp) && formatDef.async) {\n          if (!schemaEnv.$async) throw new Error(\"async format in sync schema\");\n          return (0, codegen_1._)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral([\"await \", \"(\", \")\"])), fmtRef, data);\n        }\n        return typeof format == \"function\" ? (0, codegen_1._)(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral([\"\", \"(\", \")\"])), fmtRef, data) : (0, codegen_1._)(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral([\"\", \".test(\", \")\"])), fmtRef, data);\n      }\n    }\n  }\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/format/format.ts"],"names":[],"mappings":";;;;;;;;AASA,IAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AAaA,IAAM,KAAK,GAA2B;EACpC,OAAO,EAAE;IAAA,IAAE,UAAU,QAAV,UAAU;IAAA,QAAM,CAAA,EAAA,SAAA,CAAA,GAAG,iGAAsB,UAAU;EAAA,CAAG;EACjE,MAAM,EAAE;IAAA,IAAE,UAAU,SAAV,UAAU;IAAA,QAAM,CAAA,EAAA,SAAA,CAAA,CAAC,uFAAY,UAAU;EAAA;CAClD;AAED,IAAM,GAAG,GAA0B;EACjC,OAAO,EAAE,QAAQ;EACjB,IAAI,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC;EAC1B,UAAU,EAAE,QAAQ;EACpB,KAAK,EAAE,IAAI;EACX,KAAK,EAAL,KAAK;EACL,IAAI,gBAAC,GAAe,EAAE,QAAiB,EAAA;IACrC,IAAO,GAAG,GAAyC,GAAG,CAA/C,GAAG;MAAE,IAAI,GAAmC,GAAG,CAA1C,IAAI;MAAE,KAAK,GAA4B,GAAG,CAApC,KAAK;MAAE,MAAM,GAAoB,GAAG,CAA7B,MAAM;MAAE,UAAU,GAAQ,GAAG,CAArB,UAAU;MAAE,EAAE,GAAI,GAAG,CAAT,EAAE;IAC/C,IAAO,IAAI,GAAoC,EAAE,CAA1C,IAAI;MAAE,aAAa,GAAqB,EAAE,CAApC,aAAa;MAAE,SAAS,GAAU,EAAE,CAArB,SAAS;MAAE,IAAI,GAAI,EAAE,CAAV,IAAI;IAC3C,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;IAE3B,IAAI,KAAK,EAAE,mBAAmB,EAAE,CAAA,KAC3B,cAAc,EAAE;IAErB,SAAS,mBAAmB,GAAA;MAC1B,IAAM,IAAI,GAAG,GAAG,CAAC,UAAU,CAAC,SAAS,EAAE;QACrC,GAAG,EAAE,IAAI,CAAC,OAAO;QACjB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC;OACjB,CAAC;MACF,IAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,GAAE,CAAA,EAAA,SAAA,CAAA,CAAC,mFAAG,IAAI,EAAI,UAAU,EAAI;MACzD,IAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC;MAC9B,IAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC;MAChC;MACA,GAAG,CAAC,EAAE,EACJ,CAAA,EAAA,SAAA,CAAA,CAAC,+HAAU,IAAI,EAAqB,IAAI,GACxC;QAAA,OAAM,GAAG,CAAC,MAAM,CAAC,KAAK,GAAE,CAAA,EAAA,SAAA,CAAA,CAAC,gGAAG,IAAI,EAAoB,CAAC,MAAM,CAAC,MAAM,GAAE,CAAA,EAAA,SAAA,CAAA,CAAC,sFAAG,IAAI,EAAY;MAAA,GACxF;QAAA,OAAM,GAAG,CAAC,MAAM,CAAC,KAAK,GAAE,CAAA,EAAA,SAAA,CAAA,CAAC,mFAAW,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC;MAAA,EAC1D;MACD,GAAG,CAAC,SAAS,CAAC,CAAA,CAAA,EAAA,SAAA,CAAA,EAAE,EAAC,UAAU,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;MAE7C,SAAS,UAAU,GAAA;QACjB,IAAI,IAAI,CAAC,YAAY,KAAK,KAAK,EAAE,OAAO,SAAA,CAAA,GAAG;QAC3C,QAAO,CAAA,EAAA,SAAA,CAAA,CAAC,sFAAG,UAAU,EAAQ,MAAM;MACrC;MAEA,SAAS,UAAU,GAAA;QACjB,IAAM,UAAU,GAAG,SAAS,CAAC,MAAM,IAC/B,CAAA,EAAA,SAAA,CAAA,CAAC,qHAAI,IAAI,EAAkB,MAAM,EAAI,IAAI,EAAO,MAAM,EAAI,IAAI,KAC9D,CAAA,EAAA,SAAA,CAAA,CAAC,qFAAG,MAAM,EAAI,IAAI,CAAG;QACzB,IAAM,SAAS,IAAG,CAAA,EAAA,SAAA,CAAA,CAAC,iIAAW,MAAM,EAAoB,UAAU,EAAM,MAAM,EAAS,IAAI,CAAI;QAC/F,QAAO,CAAA,EAAA,SAAA,CAAA,CAAC,0HAAG,MAAM,EAAO,MAAM,EAAgB,KAAK,EAAQ,QAAQ,EAAQ,SAAS;MACtF;IACF;IAEA,SAAS,cAAc,GAAA;MACrB,IAAM,SAAS,GAA4B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;MAC/D,IAAI,CAAC,SAAS,EAAE;QACd,aAAa,EAAE;QACf;MACD;MACD,IAAI,SAAS,KAAK,IAAI,EAAE;MACxB,iBAAkC,SAAS,CAAC,SAAS,CAAC;QAAA;QAA/C,OAAO;QAAE,MAAM;QAAE,MAAM;MAC9B,IAAI,OAAO,KAAK,QAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;MAEpD,SAAS,aAAa,GAAA;QACpB,IAAI,IAAI,CAAC,YAAY,KAAK,KAAK,EAAE;UAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;UAC9B;QACD;QACD,MAAM,IAAI,KAAK,CAAC,UAAU,EAAE,CAAC;QAE7B,SAAS,UAAU,GAAA;UACjB,kCAA0B,MAAgB,4CAAgC,aAAa;QACzF;MACF;MAEA,SAAS,SAAS,CAAC,MAAmB,EAAA;QACpC,IAAM,IAAI,GACR,MAAM,YAAY,MAAM,GACpB,CAAA,CAAA,EAAA,SAAA,CAAA,UAAU,EAAC,MAAM,CAAC,GAClB,IAAI,CAAC,IAAI,CAAC,OAAO,IACjB,CAAA,EAAA,SAAA,CAAA,CAAC,mFAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAG,CAAA,CAAA,EAAA,SAAA,CAAA,WAAW,EAAC,MAAM,CAAC,IAC3C,SAAS;QACf,IAAM,GAAG,GAAG,GAAG,CAAC,UAAU,CAAC,SAAS,EAAE;UAAC,GAAG,EAAE,MAAM;UAAE,GAAG,EAAE,MAAM;UAAE,IAAI,EAAJ;QAAI,CAAC,CAAC;QACvE,IAAI,OAAO,MAAM,IAAI,QAAQ,IAAI,EAAE,MAAM,YAAY,MAAM,CAAC,EAAE;UAC5D,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,QAAQ,EAAE,MAAM,CAAC,QAAQ,GAAE,CAAA,EAAA,SAAA,CAAA,CAAC,wFAAG,GAAG,EAAY;QACtE;QAED,OAAO,CAAC,QAAQ,EAAE,MAAM,EAAE,GAAG,CAAC;MAChC;MAEA,SAAS,cAAc,GAAA;QACrB,IAAI,OAAO,SAAS,IAAI,QAAQ,IAAI,EAAE,SAAS,YAAY,MAAM,CAAC,IAAI,SAAS,CAAC,KAAK,EAAE;UACrF,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC;UACrE,QAAO,CAAA,EAAA,SAAA,CAAA,CAAC,2FAAS,MAAM,EAAI,IAAI;QAChC;QACD,OAAO,OAAO,MAAM,IAAI,UAAU,IAAG,CAAA,EAAA,SAAA,CAAA,CAAC,qFAAG,MAAM,EAAI,IAAI,KAAM,CAAA,EAAA,SAAA,CAAA,CAAC,0FAAG,MAAM,EAAS,IAAI,CAAG;MACzF;IACF;EACF;CACD;AAED,OAAA,CAAA,OAAA,GAAe,GAAG","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message: ({ schemaCode }) => (0, codegen_1.str) `must match format \"${schemaCode}\"`,\n    params: ({ schemaCode }) => (0, codegen_1._) `{format: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"format\",\n    type: [\"number\", \"string\"],\n    schemaType: \"string\",\n    $data: true,\n    error,\n    code(cxt, ruleType) {\n        const { gen, data, $data, schema, schemaCode, it } = cxt;\n        const { opts, errSchemaPath, schemaEnv, self } = it;\n        if (!opts.validateFormats)\n            return;\n        if ($data)\n            validate$DataFormat();\n        else\n            validateFormat();\n        function validate$DataFormat() {\n            const fmts = gen.scopeValue(\"formats\", {\n                ref: self.formats,\n                code: opts.code.formats,\n            });\n            const fDef = gen.const(\"fDef\", (0, codegen_1._) `${fmts}[${schemaCode}]`);\n            const fType = gen.let(\"fType\");\n            const format = gen.let(\"format\");\n            // TODO simplify\n            gen.if((0, codegen_1._) `typeof ${fDef} == \"object\" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._) `${fDef}.type || \"string\"`).assign(format, (0, codegen_1._) `${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._) `\"string\"`).assign(format, fDef));\n            cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));\n            function unknownFmt() {\n                if (opts.strictSchema === false)\n                    return codegen_1.nil;\n                return (0, codegen_1._) `${schemaCode} && !${format}`;\n            }\n            function invalidFmt() {\n                const callFormat = schemaEnv.$async\n                    ? (0, codegen_1._) `(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`\n                    : (0, codegen_1._) `${format}(${data})`;\n                const validData = (0, codegen_1._) `(typeof ${format} == \"function\" ? ${callFormat} : ${format}.test(${data}))`;\n                return (0, codegen_1._) `${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;\n            }\n        }\n        function validateFormat() {\n            const formatDef = self.formats[schema];\n            if (!formatDef) {\n                unknownFormat();\n                return;\n            }\n            if (formatDef === true)\n                return;\n            const [fmtType, format, fmtRef] = getFormat(formatDef);\n            if (fmtType === ruleType)\n                cxt.pass(validCondition());\n            function unknownFormat() {\n                if (opts.strictSchema === false) {\n                    self.logger.warn(unknownMsg());\n                    return;\n                }\n                throw new Error(unknownMsg());\n                function unknownMsg() {\n                    return `unknown format \"${schema}\" ignored in schema at path \"${errSchemaPath}\"`;\n                }\n            }\n            function getFormat(fmtDef) {\n                const code = fmtDef instanceof RegExp\n                    ? (0, codegen_1.regexpCode)(fmtDef)\n                    : opts.code.formats\n                        ? (0, codegen_1._) `${opts.code.formats}${(0, codegen_1.getProperty)(schema)}`\n                        : undefined;\n                const fmt = gen.scopeValue(\"formats\", { key: schema, ref: fmtDef, code });\n                if (typeof fmtDef == \"object\" && !(fmtDef instanceof RegExp)) {\n                    return [fmtDef.type || \"string\", fmtDef.validate, (0, codegen_1._) `${fmt}.validate`];\n                }\n                return [\"string\", fmtDef, fmt];\n            }\n            function validCondition() {\n                if (typeof formatDef == \"object\" && !(formatDef instanceof RegExp) && formatDef.async) {\n                    if (!schemaEnv.$async)\n                        throw new Error(\"async format in sync schema\");\n                    return (0, codegen_1._) `await ${fmtRef}(${data})`;\n                }\n                return typeof format == \"function\" ? (0, codegen_1._) `${fmtRef}(${data})` : (0, codegen_1._) `${fmtRef}.test(${data})`;\n            }\n        }\n    },\n};\nexports.default = def;\n//# sourceMappingURL=format.js.map"]},"metadata":{},"sourceType":"script"}