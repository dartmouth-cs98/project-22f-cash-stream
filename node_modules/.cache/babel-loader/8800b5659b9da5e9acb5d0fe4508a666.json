{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexDataLength, hexDataSlice, hexlify, hexZeroPad, isBytesLike, splitSignature, stripZeros } from \"@ethersproject/bytes\";\nimport { Zero } from \"@ethersproject/constants\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { checkProperties } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey } from \"@ethersproject/signing-key\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport var TransactionTypes;\n(function (TransactionTypes) {\n  TransactionTypes[TransactionTypes[\"legacy\"] = 0] = \"legacy\";\n  TransactionTypes[TransactionTypes[\"eip2930\"] = 1] = \"eip2930\";\n  TransactionTypes[TransactionTypes[\"eip1559\"] = 2] = \"eip1559\";\n})(TransactionTypes || (TransactionTypes = {}));\n;\n///////////////////////////////\nfunction handleAddress(value) {\n  if (value === \"0x\") {\n    return null;\n  }\n  return getAddress(value);\n}\nfunction handleNumber(value) {\n  if (value === \"0x\") {\n    return Zero;\n  }\n  return BigNumber.from(value);\n}\n// Legacy Transaction Fields\nvar transactionFields = [{\n  name: \"nonce\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"gasPrice\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"gasLimit\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"to\",\n  length: 20\n}, {\n  name: \"value\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"data\"\n}];\nvar allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  type: true,\n  value: true\n};\nexport function computeAddress(key) {\n  var publicKey = computePublicKey(key);\n  return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));\n}\nexport function recoverAddress(digest, signature) {\n  return computeAddress(recoverPublicKey(arrayify(digest), signature));\n}\nfunction formatNumber(value, name) {\n  var result = stripZeros(BigNumber.from(value).toHexString());\n  if (result.length > 32) {\n    logger.throwArgumentError(\"invalid length for \" + name, \"transaction:\" + name, value);\n  }\n  return result;\n}\nfunction accessSetify(addr, storageKeys) {\n  return {\n    address: getAddress(addr),\n    storageKeys: (storageKeys || []).map(function (storageKey, index) {\n      if (hexDataLength(storageKey) !== 32) {\n        logger.throwArgumentError(\"invalid access list storageKey\", \"accessList[\".concat(addr, \":\").concat(index, \"]\"), storageKey);\n      }\n      return storageKey.toLowerCase();\n    })\n  };\n}\nexport function accessListify(value) {\n  if (Array.isArray(value)) {\n    return value.map(function (set, index) {\n      if (Array.isArray(set)) {\n        if (set.length > 2) {\n          logger.throwArgumentError(\"access list expected to be [ address, storageKeys[] ]\", \"value[\".concat(index, \"]\"), set);\n        }\n        return accessSetify(set[0], set[1]);\n      }\n      return accessSetify(set.address, set.storageKeys);\n    });\n  }\n  var result = Object.keys(value).map(function (addr) {\n    var storageKeys = value[addr].reduce(function (accum, storageKey) {\n      accum[storageKey] = true;\n      return accum;\n    }, {});\n    return accessSetify(addr, Object.keys(storageKeys).sort());\n  });\n  result.sort(function (a, b) {\n    return a.address.localeCompare(b.address);\n  });\n  return result;\n}\nfunction formatAccessList(value) {\n  return accessListify(value).map(function (set) {\n    return [set.address, set.storageKeys];\n  });\n}\nfunction _serializeEip1559(transaction, signature) {\n  // If there is an explicit gasPrice, make sure it matches the\n  // EIP-1559 fees; otherwise they may not understand what they\n  // think they are setting in terms of fee.\n  if (transaction.gasPrice != null) {\n    var gasPrice = BigNumber.from(transaction.gasPrice);\n    var maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);\n    if (!gasPrice.eq(maxFeePerGas)) {\n      logger.throwArgumentError(\"mismatch EIP-1559 gasPrice != maxFeePerGas\", \"tx\", {\n        gasPrice: gasPrice,\n        maxFeePerGas: maxFeePerGas\n      });\n    }\n  }\n  var fields = [formatNumber(transaction.chainId || 0, \"chainId\"), formatNumber(transaction.nonce || 0, \"nonce\"), formatNumber(transaction.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"), formatNumber(transaction.maxFeePerGas || 0, \"maxFeePerGas\"), formatNumber(transaction.gasLimit || 0, \"gasLimit\"), transaction.to != null ? getAddress(transaction.to) : \"0x\", formatNumber(transaction.value || 0, \"value\"), transaction.data || \"0x\", formatAccessList(transaction.accessList || [])];\n  if (signature) {\n    var sig = splitSignature(signature);\n    fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n    fields.push(stripZeros(sig.r));\n    fields.push(stripZeros(sig.s));\n  }\n  return hexConcat([\"0x02\", RLP.encode(fields)]);\n}\nfunction _serializeEip2930(transaction, signature) {\n  var fields = [formatNumber(transaction.chainId || 0, \"chainId\"), formatNumber(transaction.nonce || 0, \"nonce\"), formatNumber(transaction.gasPrice || 0, \"gasPrice\"), formatNumber(transaction.gasLimit || 0, \"gasLimit\"), transaction.to != null ? getAddress(transaction.to) : \"0x\", formatNumber(transaction.value || 0, \"value\"), transaction.data || \"0x\", formatAccessList(transaction.accessList || [])];\n  if (signature) {\n    var sig = splitSignature(signature);\n    fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n    fields.push(stripZeros(sig.r));\n    fields.push(stripZeros(sig.s));\n  }\n  return hexConcat([\"0x01\", RLP.encode(fields)]);\n}\n// Legacy Transactions and EIP-155\nfunction _serialize(transaction, signature) {\n  checkProperties(transaction, allowedTransactionKeys);\n  var raw = [];\n  transactionFields.forEach(function (fieldInfo) {\n    var value = transaction[fieldInfo.name] || [];\n    var options = {};\n    if (fieldInfo.numeric) {\n      options.hexPad = \"left\";\n    }\n    value = arrayify(hexlify(value, options));\n    // Fixed-width field\n    if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n      logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n    }\n    // Variable-width (with a maximum)\n    if (fieldInfo.maxLength) {\n      value = stripZeros(value);\n      if (value.length > fieldInfo.maxLength) {\n        logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n      }\n    }\n    raw.push(hexlify(value));\n  });\n  var chainId = 0;\n  if (transaction.chainId != null) {\n    // A chainId was provided; if non-zero we'll use EIP-155\n    chainId = transaction.chainId;\n    if (typeof chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n    }\n  } else if (signature && !isBytesLike(signature) && signature.v > 28) {\n    // No chainId provided, but the signature is signing with EIP-155; derive chainId\n    chainId = Math.floor((signature.v - 35) / 2);\n  }\n  // We have an EIP-155 transaction (chainId was specified and non-zero)\n  if (chainId !== 0) {\n    raw.push(hexlify(chainId)); // @TODO: hexValue?\n    raw.push(\"0x\");\n    raw.push(\"0x\");\n  }\n  // Requesting an unsigned transaction\n  if (!signature) {\n    return RLP.encode(raw);\n  }\n  // The splitSignature will ensure the transaction has a recoveryParam in the\n  // case that the signTransaction function only adds a v.\n  var sig = splitSignature(signature);\n  // We pushed a chainId and null r, s on for hashing only; remove those\n  var v = 27 + sig.recoveryParam;\n  if (chainId !== 0) {\n    raw.pop();\n    raw.pop();\n    raw.pop();\n    v += chainId * 2 + 8;\n    // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n    if (sig.v > 28 && sig.v !== v) {\n      logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n    }\n  } else if (sig.v !== v) {\n    logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n  }\n  raw.push(hexlify(v));\n  raw.push(stripZeros(arrayify(sig.r)));\n  raw.push(stripZeros(arrayify(sig.s)));\n  return RLP.encode(raw);\n}\nexport function serialize(transaction, signature) {\n  // Legacy and EIP-155 Transactions\n  if (transaction.type == null || transaction.type === 0) {\n    if (transaction.accessList != null) {\n      logger.throwArgumentError(\"untyped transactions do not support accessList; include type: 1\", \"transaction\", transaction);\n    }\n    return _serialize(transaction, signature);\n  }\n  // Typed Transactions (EIP-2718)\n  switch (transaction.type) {\n    case 1:\n      return _serializeEip2930(transaction, signature);\n    case 2:\n      return _serializeEip1559(transaction, signature);\n    default:\n      break;\n  }\n  return logger.throwError(\"unsupported transaction type: \".concat(transaction.type), Logger.errors.UNSUPPORTED_OPERATION, {\n    operation: \"serializeTransaction\",\n    transactionType: transaction.type\n  });\n}\nfunction _parseEipSignature(tx, fields, serialize) {\n  try {\n    var recid = handleNumber(fields[0]).toNumber();\n    if (recid !== 0 && recid !== 1) {\n      throw new Error(\"bad recid\");\n    }\n    tx.v = recid;\n  } catch (error) {\n    logger.throwArgumentError(\"invalid v for transaction type: 1\", \"v\", fields[0]);\n  }\n  tx.r = hexZeroPad(fields[1], 32);\n  tx.s = hexZeroPad(fields[2], 32);\n  try {\n    var digest = keccak256(serialize(tx));\n    tx.from = recoverAddress(digest, {\n      r: tx.r,\n      s: tx.s,\n      recoveryParam: tx.v\n    });\n  } catch (error) {}\n}\nfunction _parseEip1559(payload) {\n  var transaction = RLP.decode(payload.slice(1));\n  if (transaction.length !== 9 && transaction.length !== 12) {\n    logger.throwArgumentError(\"invalid component count for transaction type: 2\", \"payload\", hexlify(payload));\n  }\n  var maxPriorityFeePerGas = handleNumber(transaction[2]);\n  var maxFeePerGas = handleNumber(transaction[3]);\n  var tx = {\n    type: 2,\n    chainId: handleNumber(transaction[0]).toNumber(),\n    nonce: handleNumber(transaction[1]).toNumber(),\n    maxPriorityFeePerGas: maxPriorityFeePerGas,\n    maxFeePerGas: maxFeePerGas,\n    gasPrice: null,\n    gasLimit: handleNumber(transaction[4]),\n    to: handleAddress(transaction[5]),\n    value: handleNumber(transaction[6]),\n    data: transaction[7],\n    accessList: accessListify(transaction[8])\n  };\n  // Unsigned EIP-1559 Transaction\n  if (transaction.length === 9) {\n    return tx;\n  }\n  tx.hash = keccak256(payload);\n  _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);\n  return tx;\n}\nfunction _parseEip2930(payload) {\n  var transaction = RLP.decode(payload.slice(1));\n  if (transaction.length !== 8 && transaction.length !== 11) {\n    logger.throwArgumentError(\"invalid component count for transaction type: 1\", \"payload\", hexlify(payload));\n  }\n  var tx = {\n    type: 1,\n    chainId: handleNumber(transaction[0]).toNumber(),\n    nonce: handleNumber(transaction[1]).toNumber(),\n    gasPrice: handleNumber(transaction[2]),\n    gasLimit: handleNumber(transaction[3]),\n    to: handleAddress(transaction[4]),\n    value: handleNumber(transaction[5]),\n    data: transaction[6],\n    accessList: accessListify(transaction[7])\n  };\n  // Unsigned EIP-2930 Transaction\n  if (transaction.length === 8) {\n    return tx;\n  }\n  tx.hash = keccak256(payload);\n  _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);\n  return tx;\n}\n// Legacy Transactions and EIP-155\nfunction _parse(rawTransaction) {\n  var transaction = RLP.decode(rawTransaction);\n  if (transaction.length !== 9 && transaction.length !== 6) {\n    logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n  }\n  var tx = {\n    nonce: handleNumber(transaction[0]).toNumber(),\n    gasPrice: handleNumber(transaction[1]),\n    gasLimit: handleNumber(transaction[2]),\n    to: handleAddress(transaction[3]),\n    value: handleNumber(transaction[4]),\n    data: transaction[5],\n    chainId: 0\n  };\n  // Legacy unsigned transaction\n  if (transaction.length === 6) {\n    return tx;\n  }\n  try {\n    tx.v = BigNumber.from(transaction[6]).toNumber();\n  } catch (error) {\n    // @TODO: What makes snese to do? The v is too big\n    return tx;\n  }\n  tx.r = hexZeroPad(transaction[7], 32);\n  tx.s = hexZeroPad(transaction[8], 32);\n  if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {\n    // EIP-155 unsigned transaction\n    tx.chainId = tx.v;\n    tx.v = 0;\n  } else {\n    // Signed Transaction\n    tx.chainId = Math.floor((tx.v - 35) / 2);\n    if (tx.chainId < 0) {\n      tx.chainId = 0;\n    }\n    var recoveryParam = tx.v - 27;\n    var raw = transaction.slice(0, 6);\n    if (tx.chainId !== 0) {\n      raw.push(hexlify(tx.chainId));\n      raw.push(\"0x\");\n      raw.push(\"0x\");\n      recoveryParam -= tx.chainId * 2 + 8;\n    }\n    var digest = keccak256(RLP.encode(raw));\n    try {\n      tx.from = recoverAddress(digest, {\n        r: hexlify(tx.r),\n        s: hexlify(tx.s),\n        recoveryParam: recoveryParam\n      });\n    } catch (error) {}\n    tx.hash = keccak256(rawTransaction);\n  }\n  tx.type = null;\n  return tx;\n}\nexport function parse(rawTransaction) {\n  var payload = arrayify(rawTransaction);\n  // Legacy and EIP-155 Transactions\n  if (payload[0] > 0x7f) {\n    return _parse(payload);\n  }\n  // Typed Transaction (EIP-2718)\n  switch (payload[0]) {\n    case 1:\n      return _parseEip2930(payload);\n    case 2:\n      return _parseEip1559(payload);\n    default:\n      break;\n  }\n  return logger.throwError(\"unsupported transaction type: \".concat(payload[0]), Logger.errors.UNSUPPORTED_OPERATION, {\n    operation: \"parseTransaction\",\n    transactionType: payload[0]\n  });\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexDataLength, hexDataSlice, hexlify, hexZeroPad, isBytesLike, splitSignature, stripZeros, } from \"@ethersproject/bytes\";\nimport { Zero } from \"@ethersproject/constants\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { checkProperties } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey } from \"@ethersproject/signing-key\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport var TransactionTypes;\n(function (TransactionTypes) {\n    TransactionTypes[TransactionTypes[\"legacy\"] = 0] = \"legacy\";\n    TransactionTypes[TransactionTypes[\"eip2930\"] = 1] = \"eip2930\";\n    TransactionTypes[TransactionTypes[\"eip1559\"] = 2] = \"eip1559\";\n})(TransactionTypes || (TransactionTypes = {}));\n;\n///////////////////////////////\nfunction handleAddress(value) {\n    if (value === \"0x\") {\n        return null;\n    }\n    return getAddress(value);\n}\nfunction handleNumber(value) {\n    if (value === \"0x\") {\n        return Zero;\n    }\n    return BigNumber.from(value);\n}\n// Legacy Transaction Fields\nconst transactionFields = [\n    { name: \"nonce\", maxLength: 32, numeric: true },\n    { name: \"gasPrice\", maxLength: 32, numeric: true },\n    { name: \"gasLimit\", maxLength: 32, numeric: true },\n    { name: \"to\", length: 20 },\n    { name: \"value\", maxLength: 32, numeric: true },\n    { name: \"data\" },\n];\nconst allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, type: true, value: true\n};\nexport function computeAddress(key) {\n    const publicKey = computePublicKey(key);\n    return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));\n}\nexport function recoverAddress(digest, signature) {\n    return computeAddress(recoverPublicKey(arrayify(digest), signature));\n}\nfunction formatNumber(value, name) {\n    const result = stripZeros(BigNumber.from(value).toHexString());\n    if (result.length > 32) {\n        logger.throwArgumentError(\"invalid length for \" + name, (\"transaction:\" + name), value);\n    }\n    return result;\n}\nfunction accessSetify(addr, storageKeys) {\n    return {\n        address: getAddress(addr),\n        storageKeys: (storageKeys || []).map((storageKey, index) => {\n            if (hexDataLength(storageKey) !== 32) {\n                logger.throwArgumentError(\"invalid access list storageKey\", `accessList[${addr}:${index}]`, storageKey);\n            }\n            return storageKey.toLowerCase();\n        })\n    };\n}\nexport function accessListify(value) {\n    if (Array.isArray(value)) {\n        return value.map((set, index) => {\n            if (Array.isArray(set)) {\n                if (set.length > 2) {\n                    logger.throwArgumentError(\"access list expected to be [ address, storageKeys[] ]\", `value[${index}]`, set);\n                }\n                return accessSetify(set[0], set[1]);\n            }\n            return accessSetify(set.address, set.storageKeys);\n        });\n    }\n    const result = Object.keys(value).map((addr) => {\n        const storageKeys = value[addr].reduce((accum, storageKey) => {\n            accum[storageKey] = true;\n            return accum;\n        }, {});\n        return accessSetify(addr, Object.keys(storageKeys).sort());\n    });\n    result.sort((a, b) => (a.address.localeCompare(b.address)));\n    return result;\n}\nfunction formatAccessList(value) {\n    return accessListify(value).map((set) => [set.address, set.storageKeys]);\n}\nfunction _serializeEip1559(transaction, signature) {\n    // If there is an explicit gasPrice, make sure it matches the\n    // EIP-1559 fees; otherwise they may not understand what they\n    // think they are setting in terms of fee.\n    if (transaction.gasPrice != null) {\n        const gasPrice = BigNumber.from(transaction.gasPrice);\n        const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);\n        if (!gasPrice.eq(maxFeePerGas)) {\n            logger.throwArgumentError(\"mismatch EIP-1559 gasPrice != maxFeePerGas\", \"tx\", {\n                gasPrice, maxFeePerGas\n            });\n        }\n    }\n    const fields = [\n        formatNumber(transaction.chainId || 0, \"chainId\"),\n        formatNumber(transaction.nonce || 0, \"nonce\"),\n        formatNumber(transaction.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(transaction.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n        ((transaction.to != null) ? getAddress(transaction.to) : \"0x\"),\n        formatNumber(transaction.value || 0, \"value\"),\n        (transaction.data || \"0x\"),\n        (formatAccessList(transaction.accessList || []))\n    ];\n    if (signature) {\n        const sig = splitSignature(signature);\n        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n        fields.push(stripZeros(sig.r));\n        fields.push(stripZeros(sig.s));\n    }\n    return hexConcat([\"0x02\", RLP.encode(fields)]);\n}\nfunction _serializeEip2930(transaction, signature) {\n    const fields = [\n        formatNumber(transaction.chainId || 0, \"chainId\"),\n        formatNumber(transaction.nonce || 0, \"nonce\"),\n        formatNumber(transaction.gasPrice || 0, \"gasPrice\"),\n        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n        ((transaction.to != null) ? getAddress(transaction.to) : \"0x\"),\n        formatNumber(transaction.value || 0, \"value\"),\n        (transaction.data || \"0x\"),\n        (formatAccessList(transaction.accessList || []))\n    ];\n    if (signature) {\n        const sig = splitSignature(signature);\n        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n        fields.push(stripZeros(sig.r));\n        fields.push(stripZeros(sig.s));\n    }\n    return hexConcat([\"0x01\", RLP.encode(fields)]);\n}\n// Legacy Transactions and EIP-155\nfunction _serialize(transaction, signature) {\n    checkProperties(transaction, allowedTransactionKeys);\n    const raw = [];\n    transactionFields.forEach(function (fieldInfo) {\n        let value = transaction[fieldInfo.name] || ([]);\n        const options = {};\n        if (fieldInfo.numeric) {\n            options.hexPad = \"left\";\n        }\n        value = arrayify(hexlify(value, options));\n        // Fixed-width field\n        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n            logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, (\"transaction:\" + fieldInfo.name), value);\n        }\n        // Variable-width (with a maximum)\n        if (fieldInfo.maxLength) {\n            value = stripZeros(value);\n            if (value.length > fieldInfo.maxLength) {\n                logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, (\"transaction:\" + fieldInfo.name), value);\n            }\n        }\n        raw.push(hexlify(value));\n    });\n    let chainId = 0;\n    if (transaction.chainId != null) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = transaction.chainId;\n        if (typeof (chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n        }\n    }\n    else if (signature && !isBytesLike(signature) && signature.v > 28) {\n        // No chainId provided, but the signature is signing with EIP-155; derive chainId\n        chainId = Math.floor((signature.v - 35) / 2);\n    }\n    // We have an EIP-155 transaction (chainId was specified and non-zero)\n    if (chainId !== 0) {\n        raw.push(hexlify(chainId)); // @TODO: hexValue?\n        raw.push(\"0x\");\n        raw.push(\"0x\");\n    }\n    // Requesting an unsigned transaction\n    if (!signature) {\n        return RLP.encode(raw);\n    }\n    // The splitSignature will ensure the transaction has a recoveryParam in the\n    // case that the signTransaction function only adds a v.\n    const sig = splitSignature(signature);\n    // We pushed a chainId and null r, s on for hashing only; remove those\n    let v = 27 + sig.recoveryParam;\n    if (chainId !== 0) {\n        raw.pop();\n        raw.pop();\n        raw.pop();\n        v += chainId * 2 + 8;\n        // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n        if (sig.v > 28 && sig.v !== v) {\n            logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n        }\n    }\n    else if (sig.v !== v) {\n        logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n    }\n    raw.push(hexlify(v));\n    raw.push(stripZeros(arrayify(sig.r)));\n    raw.push(stripZeros(arrayify(sig.s)));\n    return RLP.encode(raw);\n}\nexport function serialize(transaction, signature) {\n    // Legacy and EIP-155 Transactions\n    if (transaction.type == null || transaction.type === 0) {\n        if (transaction.accessList != null) {\n            logger.throwArgumentError(\"untyped transactions do not support accessList; include type: 1\", \"transaction\", transaction);\n        }\n        return _serialize(transaction, signature);\n    }\n    // Typed Transactions (EIP-2718)\n    switch (transaction.type) {\n        case 1:\n            return _serializeEip2930(transaction, signature);\n        case 2:\n            return _serializeEip1559(transaction, signature);\n        default:\n            break;\n    }\n    return logger.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"serializeTransaction\",\n        transactionType: transaction.type\n    });\n}\nfunction _parseEipSignature(tx, fields, serialize) {\n    try {\n        const recid = handleNumber(fields[0]).toNumber();\n        if (recid !== 0 && recid !== 1) {\n            throw new Error(\"bad recid\");\n        }\n        tx.v = recid;\n    }\n    catch (error) {\n        logger.throwArgumentError(\"invalid v for transaction type: 1\", \"v\", fields[0]);\n    }\n    tx.r = hexZeroPad(fields[1], 32);\n    tx.s = hexZeroPad(fields[2], 32);\n    try {\n        const digest = keccak256(serialize(tx));\n        tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });\n    }\n    catch (error) { }\n}\nfunction _parseEip1559(payload) {\n    const transaction = RLP.decode(payload.slice(1));\n    if (transaction.length !== 9 && transaction.length !== 12) {\n        logger.throwArgumentError(\"invalid component count for transaction type: 2\", \"payload\", hexlify(payload));\n    }\n    const maxPriorityFeePerGas = handleNumber(transaction[2]);\n    const maxFeePerGas = handleNumber(transaction[3]);\n    const tx = {\n        type: 2,\n        chainId: handleNumber(transaction[0]).toNumber(),\n        nonce: handleNumber(transaction[1]).toNumber(),\n        maxPriorityFeePerGas: maxPriorityFeePerGas,\n        maxFeePerGas: maxFeePerGas,\n        gasPrice: null,\n        gasLimit: handleNumber(transaction[4]),\n        to: handleAddress(transaction[5]),\n        value: handleNumber(transaction[6]),\n        data: transaction[7],\n        accessList: accessListify(transaction[8]),\n    };\n    // Unsigned EIP-1559 Transaction\n    if (transaction.length === 9) {\n        return tx;\n    }\n    tx.hash = keccak256(payload);\n    _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);\n    return tx;\n}\nfunction _parseEip2930(payload) {\n    const transaction = RLP.decode(payload.slice(1));\n    if (transaction.length !== 8 && transaction.length !== 11) {\n        logger.throwArgumentError(\"invalid component count for transaction type: 1\", \"payload\", hexlify(payload));\n    }\n    const tx = {\n        type: 1,\n        chainId: handleNumber(transaction[0]).toNumber(),\n        nonce: handleNumber(transaction[1]).toNumber(),\n        gasPrice: handleNumber(transaction[2]),\n        gasLimit: handleNumber(transaction[3]),\n        to: handleAddress(transaction[4]),\n        value: handleNumber(transaction[5]),\n        data: transaction[6],\n        accessList: accessListify(transaction[7])\n    };\n    // Unsigned EIP-2930 Transaction\n    if (transaction.length === 8) {\n        return tx;\n    }\n    tx.hash = keccak256(payload);\n    _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);\n    return tx;\n}\n// Legacy Transactions and EIP-155\nfunction _parse(rawTransaction) {\n    const transaction = RLP.decode(rawTransaction);\n    if (transaction.length !== 9 && transaction.length !== 6) {\n        logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n    }\n    const tx = {\n        nonce: handleNumber(transaction[0]).toNumber(),\n        gasPrice: handleNumber(transaction[1]),\n        gasLimit: handleNumber(transaction[2]),\n        to: handleAddress(transaction[3]),\n        value: handleNumber(transaction[4]),\n        data: transaction[5],\n        chainId: 0\n    };\n    // Legacy unsigned transaction\n    if (transaction.length === 6) {\n        return tx;\n    }\n    try {\n        tx.v = BigNumber.from(transaction[6]).toNumber();\n    }\n    catch (error) {\n        // @TODO: What makes snese to do? The v is too big\n        return tx;\n    }\n    tx.r = hexZeroPad(transaction[7], 32);\n    tx.s = hexZeroPad(transaction[8], 32);\n    if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {\n        // EIP-155 unsigned transaction\n        tx.chainId = tx.v;\n        tx.v = 0;\n    }\n    else {\n        // Signed Transaction\n        tx.chainId = Math.floor((tx.v - 35) / 2);\n        if (tx.chainId < 0) {\n            tx.chainId = 0;\n        }\n        let recoveryParam = tx.v - 27;\n        const raw = transaction.slice(0, 6);\n        if (tx.chainId !== 0) {\n            raw.push(hexlify(tx.chainId));\n            raw.push(\"0x\");\n            raw.push(\"0x\");\n            recoveryParam -= tx.chainId * 2 + 8;\n        }\n        const digest = keccak256(RLP.encode(raw));\n        try {\n            tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam: recoveryParam });\n        }\n        catch (error) { }\n        tx.hash = keccak256(rawTransaction);\n    }\n    tx.type = null;\n    return tx;\n}\nexport function parse(rawTransaction) {\n    const payload = arrayify(rawTransaction);\n    // Legacy and EIP-155 Transactions\n    if (payload[0] > 0x7f) {\n        return _parse(payload);\n    }\n    // Typed Transaction (EIP-2718)\n    switch (payload[0]) {\n        case 1:\n            return _parseEip2930(payload);\n        case 2:\n            return _parseEip1559(payload);\n        default:\n            break;\n    }\n    return logger.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"parseTransaction\",\n        transactionType: payload[0]\n    });\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}