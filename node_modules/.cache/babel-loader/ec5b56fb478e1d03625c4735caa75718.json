{"ast":null,"code":"import _objectSpread from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/taykim/Desktop/cs98/project-22f-zk-vote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { ethers } from \"ethers\";\nimport Host from \"./Host\";\nimport { SFError } from \"./SFError\";\nimport IConstantFlowAgreementV1ABI from \"./abi/IConstantFlowAgreementV1.json\";\nimport { getSanitizedTimestamp, isPermissionsClean, normalizeAddress } from \"./utils\";\nvar cfaInterface = new ethers.utils.Interface(IConstantFlowAgreementV1ABI.abi);\n/**\n * Constant Flow Agreement V1 Helper Class\n * @description A helper class to interact with the CFAV1 contract.\n */\nvar ConstantFlowAgreementV1 = /*#__PURE__*/function () {\n  function ConstantFlowAgreementV1(options) {\n    var _this = this;\n    _classCallCheck(this, ConstantFlowAgreementV1);\n    /** ### CFA Read Functions ### */\n    /**\n     * Get the details of a flow.\n     * @param superToken the superToken of the agreement\n     * @param sender the sender of the flow\n     * @param receiver the receiver of the flow\n     * @param providerOrSigner a provider or signer object\n     * @returns {Promise<IWeb3FlowInfo>} Web3 Flow info object\n     */\n    this.getFlow = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(params) {\n        var normalizedToken, normalizedSender, normalizedReceiver, flowData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                normalizedToken = normalizeAddress(params.superToken);\n                normalizedSender = normalizeAddress(params.sender);\n                normalizedReceiver = normalizeAddress(params.receiver);\n                _context.prev = 3;\n                _context.next = 6;\n                return _this.contract.connect(params.providerOrSigner).getFlow(normalizedToken, normalizedSender, normalizedReceiver);\n              case 6:\n                flowData = _context.sent;\n                return _context.abrupt(\"return\", _this._sanitizeFlowInfo(flowData));\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](3);\n                throw new SFError({\n                  type: \"CFAV1_READ\",\n                  customMessage: \"There was an error getting the flow\",\n                  errorObject: _context.t0\n                });\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 10]]);\n      }));\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    /**\n     * Get the flow info of an account (net flow).\n     * @param superToken the superToken of the agreement\n     * @param account the account we're querying\n     * @param providerOrSigner a provider or signer object\n     * @returns {Promise<IWeb3FlowInfo>} Web3 Flow info object\n     */\n    this.getAccountFlowInfo = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {\n        var normalizedToken, normalizedAccount, flowData;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                normalizedToken = normalizeAddress(params.superToken);\n                normalizedAccount = normalizeAddress(params.account);\n                _context2.prev = 2;\n                _context2.next = 5;\n                return _this.contract.connect(params.providerOrSigner).getAccountFlowInfo(normalizedToken, normalizedAccount);\n              case 5:\n                flowData = _context2.sent;\n                return _context2.abrupt(\"return\", _this._sanitizeFlowInfo(flowData));\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](2);\n                throw new SFError({\n                  type: \"CFAV1_READ\",\n                  customMessage: \"There was an error getting the account flow information\",\n                  errorObject: _context2.t0\n                });\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[2, 9]]);\n      }));\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    /**\n     * Get the net flow of an account.\n     * @param superToken the superToken of the agreement\n     * @param account the account we're querying\n     * @param providerOrSigner a provider or signer object\n     * @returns {Promise<string>} Web3 Flow info object\n     */\n    this.getNetFlow = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(params) {\n        var normalizedToken, normalizedAccount;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                normalizedToken = normalizeAddress(params.superToken);\n                normalizedAccount = normalizeAddress(params.account);\n                _context3.prev = 2;\n                _context3.next = 5;\n                return _this.contract.connect(params.providerOrSigner).getNetFlow(normalizedToken, normalizedAccount);\n              case 5:\n                return _context3.abrupt(\"return\", _context3.sent.toString());\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](2);\n                throw new SFError({\n                  type: \"CFAV1_READ\",\n                  customMessage: \"There was an error getting net flow\",\n                  errorObject: _context3.t0\n                });\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[2, 8]]);\n      }));\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    /**\n     * Get flow operator data.\n     * @param superToken the superToken of the agreement\n     * @param sender the sender\n     * @param flowOperator the flowOperator\n     * @param providerOrSigner a provider or signer object\n     * @returns {Promise<IWeb3FlowOperatorData>} Web3 Flow info object\n     */\n    this.getFlowOperatorData = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(params) {\n        var normalizedToken, normalizedSender, normalizedFlowOperator, flowOperatorData;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                normalizedToken = normalizeAddress(params.superToken);\n                normalizedSender = normalizeAddress(params.sender);\n                normalizedFlowOperator = normalizeAddress(params.flowOperator);\n                _context4.prev = 3;\n                _context4.next = 6;\n                return _this.contract.connect(params.providerOrSigner).getFlowOperatorData(normalizedToken, normalizedSender, normalizedFlowOperator);\n              case 6:\n                flowOperatorData = _context4.sent;\n                return _context4.abrupt(\"return\", _this._sanitizeFlowOperatorData(flowOperatorData));\n              case 10:\n                _context4.prev = 10;\n                _context4.t0 = _context4[\"catch\"](3);\n                throw new SFError({\n                  type: \"CFAV1_READ\",\n                  customMessage: \"There was an error getting flow operator data\",\n                  errorObject: _context4.t0\n                });\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[3, 10]]);\n      }));\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    /**\n     * Get flow operator data using the flowOperatorId.\n     * @param superToken the superToken of the agreement\n     * @param flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n     * @param providerOrSigner a provider or signer object\n     * @returns {Promise<IWeb3FlowOperatorData>} Web3 Flow info object\n     */\n    this.getFlowOperatorDataByID = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(params) {\n        var normalizedToken, flowOperatorData;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                normalizedToken = normalizeAddress(params.superToken);\n                _context5.prev = 1;\n                _context5.next = 4;\n                return _this.contract.connect(params.providerOrSigner).getFlowOperatorDataByID(normalizedToken, params.flowOperatorId);\n              case 4:\n                flowOperatorData = _context5.sent;\n                return _context5.abrupt(\"return\", _this._sanitizeFlowOperatorData(_objectSpread(_objectSpread({}, flowOperatorData), {}, {\n                  flowOperatorId: params.flowOperatorId\n                })));\n              case 8:\n                _context5.prev = 8;\n                _context5.t0 = _context5[\"catch\"](1);\n                throw new SFError({\n                  type: \"CFAV1_READ\",\n                  customMessage: \"There was an error getting flow operator data\",\n                  errorObject: _context5.t0\n                });\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[1, 8]]);\n      }));\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n    /** ### CFA Write Functions ### */\n    /**\n     * Create a flow.\n     * @param flowRate The specified flow rate.\n     * @param receiver The receiver of the flow.\n     * @param superToken The token to be flowed.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    this.createFlow = function (params) {\n      var normalizedToken = normalizeAddress(params.superToken);\n      var normalizedReceiver = normalizeAddress(params.receiver);\n      var callData = cfaInterface.encodeFunctionData(\"createFlow\", [normalizedToken, normalizedReceiver, params.flowRate, \"0x\"]);\n      return _this.host.populateCallAgreementTxnAndReturnOperation(_this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n    };\n    /**\n     * Update a flow.\n     * @param flowRate The specified flow rate.\n     * @param receiver The receiver of the flow.\n     * @param superToken The token to be flowed.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    this.updateFlow = function (params) {\n      var normalizedToken = normalizeAddress(params.superToken);\n      var normalizedReceiver = normalizeAddress(params.receiver);\n      var callData = cfaInterface.encodeFunctionData(\"updateFlow\", [normalizedToken, normalizedReceiver, params.flowRate, \"0x\"]);\n      return _this.host.populateCallAgreementTxnAndReturnOperation(_this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n    };\n    /**\n     * Delete a flow.\n     * @param superToken The token to be flowed.\n     * @param sender The sender of the flow.\n     * @param receiver The receiver of the flow.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    this.deleteFlow = function (params) {\n      var normalizedToken = normalizeAddress(params.superToken);\n      var normalizedSender = normalizeAddress(params.sender);\n      var normalizedReceiver = normalizeAddress(params.receiver);\n      var callData = cfaInterface.encodeFunctionData(\"deleteFlow\", [normalizedToken, normalizedSender, normalizedReceiver, \"0x\"]);\n      return _this.host.populateCallAgreementTxnAndReturnOperation(_this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n    };\n    /**\n     * Create a flow as an operator\n     * @param flowRate The specified flow rate.\n     * @param sender The sender of the flow.\n     * @param receiver The receiver of the flow.\n     * @param superToken The token to be flowed.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    this.createFlowByOperator = function (params) {\n      var normalizedToken = normalizeAddress(params.superToken);\n      var normalizedReceiver = normalizeAddress(params.receiver);\n      var normalizedSender = normalizeAddress(params.sender);\n      var callData = cfaInterface.encodeFunctionData(\"createFlowByOperator\", [normalizedToken, normalizedSender, normalizedReceiver, params.flowRate, \"0x\"]);\n      return _this.host.populateCallAgreementTxnAndReturnOperation(_this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n    };\n    /**\n     * Update a flow as an operator.\n     * @param flowRate The specified flow rate.\n     * @param sender The sender of the flow.\n     * @param receiver The receiver of the flow.\n     * @param superToken The token to be flowed.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    this.updateFlowByOperator = function (params) {\n      var normalizedToken = normalizeAddress(params.superToken);\n      var normalizedSender = normalizeAddress(params.sender);\n      var normalizedReceiver = normalizeAddress(params.receiver);\n      var callData = cfaInterface.encodeFunctionData(\"updateFlowByOperator\", [normalizedToken, normalizedSender, normalizedReceiver, params.flowRate, \"0x\"]);\n      return _this.host.populateCallAgreementTxnAndReturnOperation(_this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n    };\n    /**\n     * Delete a flow as an operator.\n     * @param sender The sender of the flow.\n     * @param receiver The receiver of the flow.\n     * @param superToken The token to be flowed.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    this.deleteFlowByOperator = function (params) {\n      var normalizedToken = normalizeAddress(params.superToken);\n      var normalizedSender = normalizeAddress(params.sender);\n      var normalizedReceiver = normalizeAddress(params.receiver);\n      var callData = cfaInterface.encodeFunctionData(\"deleteFlowByOperator\", [normalizedToken, normalizedSender, normalizedReceiver, \"0x\"]);\n      return _this.host.populateCallAgreementTxnAndReturnOperation(_this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n    };\n    /** ### Private Functions ### */\n    /**\n     * Sanitizes flow info, converting BigNumber to string.\n     * @param timestamp last updated timestamp of flow\n     * @param flowRate the current flow rate\n     * @param deposit the deposit amount\n     * @param owedDeposit any owed depsit\n     * @returns {IWeb3FlowInfo} sanitized web3 flow info\n     */\n    this._sanitizeFlowInfo = function (params) {\n      return {\n        timestamp: getSanitizedTimestamp(params.timestamp),\n        flowRate: params.flowRate.toString(),\n        deposit: params.deposit.toString(),\n        owedDeposit: params.owedDeposit.toString()\n      };\n    };\n    /**\n     * Sanitizes flow operator data, converting BigNumber to string.\n     * @param flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n     * @param permissions the permissions\n     * @param flowRateAllowance the flow rate allowance granted to the flow operator\n     * @returns {IWeb3FlowOperatorData} sanitized web3 flow info\n     */\n    this._sanitizeFlowOperatorData = function (params) {\n      return {\n        flowOperatorId: params.flowOperatorId,\n        permissions: params.permissions.toString(),\n        flowRateAllowance: params.flowRateAllowance.toString()\n      };\n    };\n    this.options = options;\n    this.host = new Host(options.config.hostAddress);\n    this.contract = new ethers.Contract(this.options.config.cfaV1Address, IConstantFlowAgreementV1ABI.abi);\n  }\n  /** ### CFA ACL Write Functions (byOperator) ### */\n  /**\n   * Update permissions for a flow operator as a sender.\n   * @param superToken The token to be flowed.\n   * @param flowOperator The permission grantee address\n   * @param permission The permissions to set.\n   * @param flowRateAllowance The flowRateAllowance granted to the flow operator.\n   * @param userData Extra user data provided.\n   * @param overrides ethers overrides object for more control over the transaction sent.\n   * @returns {Operation} An instance of Operation which can be executed or batched.\n   */\n  _createClass(ConstantFlowAgreementV1, [{\n    key: \"updateFlowOperatorPermissions\",\n    value: function updateFlowOperatorPermissions(params) {\n      var normalizedToken = normalizeAddress(params.superToken);\n      var normalizedFlowOperator = normalizeAddress(params.flowOperator);\n      if (!isPermissionsClean(params.permissions)) {\n        throw new SFError({\n          type: \"UNCLEAN_PERMISSIONS\",\n          customMessage: \"The desired permissions are unclean\"\n        });\n      }\n      if (Number(params.flowRateAllowance) < 0) {\n        throw new SFError({\n          type: \"NEGATIVE_FLOW_ALLOWANCE\",\n          customMessage: \"No negative flow allowance allowed\"\n        });\n      }\n      var callData = cfaInterface.encodeFunctionData(\"updateFlowOperatorPermissions\", [normalizedToken, normalizedFlowOperator, params.permissions, params.flowRateAllowance, \"0x\"]);\n      return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n    }\n    /**\n     * Give flow operator full control - max flow rate and create/update/delete permissions.\n     * @param superToken The token to be flowed.\n     * @param flowOperator The permission grantee address\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     */\n  }, {\n    key: \"authorizeFlowOperatorWithFullControl\",\n    value: function authorizeFlowOperatorWithFullControl(params) {\n      var normalizedToken = normalizeAddress(params.superToken);\n      var normalizedFlowOperator = normalizeAddress(params.flowOperator);\n      var callData = cfaInterface.encodeFunctionData(\"authorizeFlowOperatorWithFullControl\", [normalizedToken, normalizedFlowOperator, \"0x\"]);\n      return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n    }\n    /**\n     * Revoke flow operator control - set flow rate to 0 with no permissions.\n     * @param superToken The token to be flowed.\n     * @param flowOperator The permission grantee address\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     */\n  }, {\n    key: \"revokeFlowOperatorWithFullControl\",\n    value: function revokeFlowOperatorWithFullControl(params) {\n      var normalizedToken = normalizeAddress(params.superToken);\n      var normalizedFlowOperator = normalizeAddress(params.flowOperator);\n      var callData = cfaInterface.encodeFunctionData(\"revokeFlowOperatorWithFullControl\", [normalizedToken, normalizedFlowOperator, \"0x\"]);\n      return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n    }\n  }]);\n  return ConstantFlowAgreementV1;\n}();\nexport { ConstantFlowAgreementV1 as default };","map":{"version":3,"sources":["../../src/ConstantFlowAgreementV1.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { ethers } from \"ethers\";\nimport Host from \"./Host\";\nimport { SFError } from \"./SFError\";\nimport IConstantFlowAgreementV1ABI from \"./abi/IConstantFlowAgreementV1.json\";\nimport { getSanitizedTimestamp, isPermissionsClean, normalizeAddress, } from \"./utils\";\nconst cfaInterface = new ethers.utils.Interface(IConstantFlowAgreementV1ABI.abi);\n/**\n * Constant Flow Agreement V1 Helper Class\n * @description A helper class to interact with the CFAV1 contract.\n */\nexport default class ConstantFlowAgreementV1 {\n    constructor(options) {\n        /** ### CFA Read Functions ### */\n        /**\n         * Get the details of a flow.\n         * @param superToken the superToken of the agreement\n         * @param sender the sender of the flow\n         * @param receiver the receiver of the flow\n         * @param providerOrSigner a provider or signer object\n         * @returns {Promise<IWeb3FlowInfo>} Web3 Flow info object\n         */\n        this.getFlow = async (params) => {\n            const normalizedToken = normalizeAddress(params.superToken);\n            const normalizedSender = normalizeAddress(params.sender);\n            const normalizedReceiver = normalizeAddress(params.receiver);\n            try {\n                const flowData = await this.contract\n                    .connect(params.providerOrSigner)\n                    .getFlow(normalizedToken, normalizedSender, normalizedReceiver);\n                return this._sanitizeFlowInfo(flowData);\n            }\n            catch (err) {\n                throw new SFError({\n                    type: \"CFAV1_READ\",\n                    customMessage: \"There was an error getting the flow\",\n                    errorObject: err,\n                });\n            }\n        };\n        /**\n         * Get the flow info of an account (net flow).\n         * @param superToken the superToken of the agreement\n         * @param account the account we're querying\n         * @param providerOrSigner a provider or signer object\n         * @returns {Promise<IWeb3FlowInfo>} Web3 Flow info object\n         */\n        this.getAccountFlowInfo = async (params) => {\n            const normalizedToken = normalizeAddress(params.superToken);\n            const normalizedAccount = normalizeAddress(params.account);\n            try {\n                const flowData = await this.contract\n                    .connect(params.providerOrSigner)\n                    .getAccountFlowInfo(normalizedToken, normalizedAccount);\n                return this._sanitizeFlowInfo(flowData);\n            }\n            catch (err) {\n                throw new SFError({\n                    type: \"CFAV1_READ\",\n                    customMessage: \"There was an error getting the account flow information\",\n                    errorObject: err,\n                });\n            }\n        };\n        /**\n         * Get the net flow of an account.\n         * @param superToken the superToken of the agreement\n         * @param account the account we're querying\n         * @param providerOrSigner a provider or signer object\n         * @returns {Promise<string>} Web3 Flow info object\n         */\n        this.getNetFlow = async (params) => {\n            const normalizedToken = normalizeAddress(params.superToken);\n            const normalizedAccount = normalizeAddress(params.account);\n            try {\n                return (await this.contract\n                    .connect(params.providerOrSigner)\n                    .getNetFlow(normalizedToken, normalizedAccount)).toString();\n            }\n            catch (err) {\n                throw new SFError({\n                    type: \"CFAV1_READ\",\n                    customMessage: \"There was an error getting net flow\",\n                    errorObject: err,\n                });\n            }\n        };\n        /**\n         * Get flow operator data.\n         * @param superToken the superToken of the agreement\n         * @param sender the sender\n         * @param flowOperator the flowOperator\n         * @param providerOrSigner a provider or signer object\n         * @returns {Promise<IWeb3FlowOperatorData>} Web3 Flow info object\n         */\n        this.getFlowOperatorData = async (params) => {\n            const normalizedToken = normalizeAddress(params.superToken);\n            const normalizedSender = normalizeAddress(params.sender);\n            const normalizedFlowOperator = normalizeAddress(params.flowOperator);\n            try {\n                const flowOperatorData = await this.contract\n                    .connect(params.providerOrSigner)\n                    .getFlowOperatorData(normalizedToken, normalizedSender, normalizedFlowOperator);\n                return this._sanitizeFlowOperatorData(flowOperatorData);\n            }\n            catch (err) {\n                throw new SFError({\n                    type: \"CFAV1_READ\",\n                    customMessage: \"There was an error getting flow operator data\",\n                    errorObject: err,\n                });\n            }\n        };\n        /**\n         * Get flow operator data using the flowOperatorId.\n         * @param superToken the superToken of the agreement\n         * @param flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n         * @param providerOrSigner a provider or signer object\n         * @returns {Promise<IWeb3FlowOperatorData>} Web3 Flow info object\n         */\n        this.getFlowOperatorDataByID = async (params) => {\n            const normalizedToken = normalizeAddress(params.superToken);\n            try {\n                const flowOperatorData = await this.contract\n                    .connect(params.providerOrSigner)\n                    .getFlowOperatorDataByID(normalizedToken, params.flowOperatorId);\n                return this._sanitizeFlowOperatorData({\n                    ...flowOperatorData,\n                    flowOperatorId: params.flowOperatorId,\n                });\n            }\n            catch (err) {\n                throw new SFError({\n                    type: \"CFAV1_READ\",\n                    customMessage: \"There was an error getting flow operator data\",\n                    errorObject: err,\n                });\n            }\n        };\n        /** ### CFA Write Functions ### */\n        /**\n         * Create a flow.\n         * @param flowRate The specified flow rate.\n         * @param receiver The receiver of the flow.\n         * @param superToken The token to be flowed.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.createFlow = (params) => {\n            const normalizedToken = normalizeAddress(params.superToken);\n            const normalizedReceiver = normalizeAddress(params.receiver);\n            const callData = cfaInterface.encodeFunctionData(\"createFlow\", [\n                normalizedToken,\n                normalizedReceiver,\n                params.flowRate,\n                \"0x\",\n            ]);\n            return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n        };\n        /**\n         * Update a flow.\n         * @param flowRate The specified flow rate.\n         * @param receiver The receiver of the flow.\n         * @param superToken The token to be flowed.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.updateFlow = (params) => {\n            const normalizedToken = normalizeAddress(params.superToken);\n            const normalizedReceiver = normalizeAddress(params.receiver);\n            const callData = cfaInterface.encodeFunctionData(\"updateFlow\", [\n                normalizedToken,\n                normalizedReceiver,\n                params.flowRate,\n                \"0x\",\n            ]);\n            return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n        };\n        /**\n         * Delete a flow.\n         * @param superToken The token to be flowed.\n         * @param sender The sender of the flow.\n         * @param receiver The receiver of the flow.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.deleteFlow = (params) => {\n            const normalizedToken = normalizeAddress(params.superToken);\n            const normalizedSender = normalizeAddress(params.sender);\n            const normalizedReceiver = normalizeAddress(params.receiver);\n            const callData = cfaInterface.encodeFunctionData(\"deleteFlow\", [\n                normalizedToken,\n                normalizedSender,\n                normalizedReceiver,\n                \"0x\",\n            ]);\n            return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n        };\n        /**\n         * Create a flow as an operator\n         * @param flowRate The specified flow rate.\n         * @param sender The sender of the flow.\n         * @param receiver The receiver of the flow.\n         * @param superToken The token to be flowed.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.createFlowByOperator = (params) => {\n            const normalizedToken = normalizeAddress(params.superToken);\n            const normalizedReceiver = normalizeAddress(params.receiver);\n            const normalizedSender = normalizeAddress(params.sender);\n            const callData = cfaInterface.encodeFunctionData(\"createFlowByOperator\", [\n                normalizedToken,\n                normalizedSender,\n                normalizedReceiver,\n                params.flowRate,\n                \"0x\",\n            ]);\n            return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n        };\n        /**\n         * Update a flow as an operator.\n         * @param flowRate The specified flow rate.\n         * @param sender The sender of the flow.\n         * @param receiver The receiver of the flow.\n         * @param superToken The token to be flowed.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.updateFlowByOperator = (params) => {\n            const normalizedToken = normalizeAddress(params.superToken);\n            const normalizedSender = normalizeAddress(params.sender);\n            const normalizedReceiver = normalizeAddress(params.receiver);\n            const callData = cfaInterface.encodeFunctionData(\"updateFlowByOperator\", [\n                normalizedToken,\n                normalizedSender,\n                normalizedReceiver,\n                params.flowRate,\n                \"0x\",\n            ]);\n            return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n        };\n        /**\n         * Delete a flow as an operator.\n         * @param sender The sender of the flow.\n         * @param receiver The receiver of the flow.\n         * @param superToken The token to be flowed.\n         * @param userData Extra user data provided.\n         * @param overrides ethers overrides object for more control over the transaction sent.\n         * @returns {Operation} An instance of Operation which can be executed or batched.\n         */\n        this.deleteFlowByOperator = (params) => {\n            const normalizedToken = normalizeAddress(params.superToken);\n            const normalizedSender = normalizeAddress(params.sender);\n            const normalizedReceiver = normalizeAddress(params.receiver);\n            const callData = cfaInterface.encodeFunctionData(\"deleteFlowByOperator\", [normalizedToken, normalizedSender, normalizedReceiver, \"0x\"]);\n            return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n        };\n        /** ### Private Functions ### */\n        /**\n         * Sanitizes flow info, converting BigNumber to string.\n         * @param timestamp last updated timestamp of flow\n         * @param flowRate the current flow rate\n         * @param deposit the deposit amount\n         * @param owedDeposit any owed depsit\n         * @returns {IWeb3FlowInfo} sanitized web3 flow info\n         */\n        this._sanitizeFlowInfo = (params) => {\n            return {\n                timestamp: getSanitizedTimestamp(params.timestamp),\n                flowRate: params.flowRate.toString(),\n                deposit: params.deposit.toString(),\n                owedDeposit: params.owedDeposit.toString(),\n            };\n        };\n        /**\n         * Sanitizes flow operator data, converting BigNumber to string.\n         * @param flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n         * @param permissions the permissions\n         * @param flowRateAllowance the flow rate allowance granted to the flow operator\n         * @returns {IWeb3FlowOperatorData} sanitized web3 flow info\n         */\n        this._sanitizeFlowOperatorData = (params) => {\n            return {\n                flowOperatorId: params.flowOperatorId,\n                permissions: params.permissions.toString(),\n                flowRateAllowance: params.flowRateAllowance.toString(),\n            };\n        };\n        this.options = options;\n        this.host = new Host(options.config.hostAddress);\n        this.contract = new ethers.Contract(this.options.config.cfaV1Address, IConstantFlowAgreementV1ABI.abi);\n    }\n    /** ### CFA ACL Write Functions (byOperator) ### */\n    /**\n     * Update permissions for a flow operator as a sender.\n     * @param superToken The token to be flowed.\n     * @param flowOperator The permission grantee address\n     * @param permission The permissions to set.\n     * @param flowRateAllowance The flowRateAllowance granted to the flow operator.\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     * @returns {Operation} An instance of Operation which can be executed or batched.\n     */\n    updateFlowOperatorPermissions(params) {\n        const normalizedToken = normalizeAddress(params.superToken);\n        const normalizedFlowOperator = normalizeAddress(params.flowOperator);\n        if (!isPermissionsClean(params.permissions)) {\n            throw new SFError({\n                type: \"UNCLEAN_PERMISSIONS\",\n                customMessage: \"The desired permissions are unclean\",\n            });\n        }\n        if (Number(params.flowRateAllowance) < 0) {\n            throw new SFError({\n                type: \"NEGATIVE_FLOW_ALLOWANCE\",\n                customMessage: \"No negative flow allowance allowed\",\n            });\n        }\n        const callData = cfaInterface.encodeFunctionData(\"updateFlowOperatorPermissions\", [\n            normalizedToken,\n            normalizedFlowOperator,\n            params.permissions,\n            params.flowRateAllowance,\n            \"0x\",\n        ]);\n        return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n    }\n    /**\n     * Give flow operator full control - max flow rate and create/update/delete permissions.\n     * @param superToken The token to be flowed.\n     * @param flowOperator The permission grantee address\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     */\n    authorizeFlowOperatorWithFullControl(params) {\n        const normalizedToken = normalizeAddress(params.superToken);\n        const normalizedFlowOperator = normalizeAddress(params.flowOperator);\n        const callData = cfaInterface.encodeFunctionData(\"authorizeFlowOperatorWithFullControl\", [normalizedToken, normalizedFlowOperator, \"0x\"]);\n        return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n    }\n    /**\n     * Revoke flow operator control - set flow rate to 0 with no permissions.\n     * @param superToken The token to be flowed.\n     * @param flowOperator The permission grantee address\n     * @param userData Extra user data provided.\n     * @param overrides ethers overrides object for more control over the transaction sent.\n     */\n    revokeFlowOperatorWithFullControl(params) {\n        const normalizedToken = normalizeAddress(params.superToken);\n        const normalizedFlowOperator = normalizeAddress(params.flowOperator);\n        const callData = cfaInterface.encodeFunctionData(\"revokeFlowOperatorWithFullControl\", [normalizedToken, normalizedFlowOperator, \"0x\"]);\n        return this.host.populateCallAgreementTxnAndReturnOperation(this.options.config.cfaV1Address, callData, params.userData, params.overrides);\n    }\n}\n//# sourceMappingURL=ConstantFlowAgreementV1.js.map"]},"metadata":{},"sourceType":"module"}