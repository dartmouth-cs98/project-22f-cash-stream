{"version":3,"file":"index.cjs.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getEventValue.ts","../src/logic/isNameInFieldArray.ts","../src/logic/getNodeParentName.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/utils/isString.ts","../src/logic/generateWatchOutput.ts","../src/utils/isFunction.ts","../src/utils/objectHasFunction.ts","../src/useWatch.ts","../src/useController.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/isWatched.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/cloneObject.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/utils/createSubject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/unset.ts","../src/logic/getDirtyFields.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/utils/isRegex.ts","../src/logic/getRuleValue.ts","../src/logic/schemaErrorLookup.ts","../src/logic/skipValidation.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/logic/hasValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/utils/omitKeys.ts","../src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => (value || []).filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  exact && signalName\n    ? name === signalName\n    : !name ||\n      !signalName ||\n      name === signalName ||\n      convertToArrayPayload(name).some(\n        (currentName) =>\n          currentName &&\n          (currentName.startsWith(signalName) ||\n            signalName.startsWith(currentName)),\n      );\n","import React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","import React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name, exact } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (value) =>\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        value.name,\n        exact,\n      ) &&\n      shouldRenderFormState(value, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...value,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import React from 'react';\n\nimport generateWatchOutput from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport objectHasFunction from './utils/objectHasFunction';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n          exact,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current) ||\n            (isObject(fieldValues) && !objectHasFunction(fieldValues))\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : isUndefined(fieldValues)\n            ? defaultValue\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import React from 'react';\n\nimport getEventValue from './logic/getEventValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n    exact: !isArrayField,\n  }) as UnpackNestedValue<FieldPathValue<TFieldValues, TName>>;\n  const formState = useFormState({\n    control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      isArrayField\n        ? _shouldUnregisterField && !control._stateFlags.action\n        : _shouldUnregisterField\n        ? control.unregister(name)\n        : updateMounted(name, false);\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n\n  return {\n    field: {\n      onChange: (event) => {\n        registerProps.onChange({\n          target: {\n            value: getEventValue(event),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        parseFloat(inputValue as string);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n    shouldSetError = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (shouldSetError && Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (!isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return {\n      ...(isBoolean(options.disabled) ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n\n          if (\n            fieldRef === field._f.ref ||\n            (radioOrCheckbox &&\n              compact(field._f.refs).find((option) => option === fieldRef))\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: radioOrCheckbox\n              ? {\n                  ...field._f,\n                  refs: [...compact(field._f.refs).filter(live), fieldRef],\n                  ref: { type: fieldRef.type, name },\n                }\n              : {\n                  ...field._f,\n                  ref: fieldRef,\n                },\n          });\n\n          updateValidAndValue(name, false, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb && isUndefined(formValues)) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _fields = {};\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport isWatched from './logic/isWatched';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport cloneObject from './utils/cloneObject';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(\n      name,\n      fieldArrayValues.length - 1,\n      options,\n    );\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      fieldArrayValues,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(cloneObject(value)), keyName),\n    );\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, 0, options);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      fieldArrayValues,\n    );\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      fieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(cloneObject(value)), keyName),\n    );\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, index, options);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      fieldArrayValues,\n    );\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldArrayValues,\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldArrayValues,\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds<TFieldValues, TFieldArrayName, TKeyName>(\n      updatedFieldArrayValues,\n      keyName,\n    );\n    const fieldArrayValues = updateValues(_fieldIds.current);\n\n    setFields(_fieldIds.current);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      fieldArrayValues,\n      true,\n      false,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapIds<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >(convertToArrayPayload(value) as Partial<TFieldValues>[], keyName);\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      fieldArrayValues,\n      true,\n      false,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","HookFormContext","React","createContext","useFormContext","useContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","signalName","exact","convertToArrayPayload","currentName","startsWith","useSubscribe","props","_props","useRef","useEffect","subscription","disabled","subject","subscribe","next","callback","unsubscribe","tearDown","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","shouldSubscribeByName","shouldRenderFormState","_subjects","state","getProxyFormState","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","isFunction","useWatch","fieldValues","generateWatchOutput","values","_formValues","updateValue","objectHasFunction","_getWatch","_removeUnmounted","useController","shouldUnregister","isArrayField","isNameInFieldArray","array","_defaultValues","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","onChange","getEventValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","validateAllFieldCriteria","types","[object Object]","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","options","shouldFocus","focusName","focusIndex","isBlurEvent","has","watchName","slice","_fieldIds","keyName","output","d","performance","now","c","r","Math","random","toString","generateId","append","cloneObject","Set","insert","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","window","document","isHTMLElement","contains","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","markFieldsDirty","isParentNodeArray","defaultValues","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","RegExp","rule","isRegex","schemaErrorLookup","join","foundError","pop","isValidElement","getValidateError","isMessage","validationData","async","inputValue","shouldUseNativeValidation","required","maxLength","minLength","min","max","pattern","validate","inputRef","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","reValidateMode","shouldFocusError","createFormControl","delayErrorCallback","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","criteriaMode","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","_getDirty","isPreviousFieldDirty","shouldRenderByError","previousFieldError","shouldUpdateValid","wait","delayError","args","clearTimeout","setTimeout","updatedFormState","context","getResolverOptions","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","getValues","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","getDirtyFields","isWatched","shouldSkipValidation","deps","skipValidation","watched","previousErrorLookupResult","errorLookupResult","fieldNames","executeSchemaAndUpdateState","Promise","all","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","live","_updateFieldArray","method","shouldSetValues","shouldSetFields","shouldSetError","argA","argB","unsetEmptyArray","_getFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","info","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","resetField","clearErrors","inputName","setError","setFocus","render","Provider","children","setFields","mapIds","_actioned","fieldArrayName","updateValues","useCallback","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","omitKeys","then","swap","mapCurrentIds","swapArrayAt","fieldArrayValues","move","moveArrayAt","prependAt","getFocusFieldName","fillEmptyArray","appendValue","appendAt","remove","removeArrayAt","insertAt","update","updateAt","_formControl"],"mappings":"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"}